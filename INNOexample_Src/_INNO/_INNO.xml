<?xml version="1.0"?>
<doc>
    <assembly>
        <name>_INNO</name>
    </assembly>
    <members>
        <member name="T:_INNO.InnoExtensions">
            <summary>
            InnoExtensions 확장 클래스입니다.
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToShort(System.String)">
            <summary>
            문자열을 short 형식으로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToInt32(System.String)">
            <summary>
            문자열을 Int32 형식으로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToLong(System.String)">
            <summary>
            문자열을 long 형식으로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToDouble(System.String)">
            <summary>
            문자열을 double 형식으로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToBool(System.String)">
            <summary>
            문자열을 bool 형식으로 변환합니다.<br/>
            문자열 "1", "True", "O"는 true로 반환합니다. (대소문자 구분없음)<br/>
            문자열 "0", 빈문자열, null 및 그외의 문자는 false로 반환합니다. (대소문자 구분없음)<br/>
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.IsNullOrEmpty(System.String)">
            <summary>
            지정된 문자열이 null이거나 빈 문자열("")인지를 확인.
            </summary>
            <returns>매개변수가 null/빈문자열("")이면 true, 그렇지 않으면 false</returns>
        </member>
        <member name="M:_INNO.InnoExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            지정된 문자열이 null이거나 비어 있거나 공백 문자로만 구성되어 있는지를 확인.
            </summary>
            <param name="data"></param>
            <returns>매개변수가 null/빈문자열("")/공백문자열 이면 true, 그렇지 않으면 false</returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToDateTime(System.String)">
            <summary>
            "yyyy-MM-dd HH:mm:ss.fff" 형식의 문자열을 전달받아 DateTime으로 변환하여 리턴.
            </summary>
            <param name="data">yyyy-MM-dd HH:mm:ss.fff</param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.SplitWithoutEmpty(System.String,System.String)">
            <summary>
            마지막 separator 와 무관하게 빈 문자열 무시하고 Split하여 문자열 배열 리턴.
            "AA:BB:CC:" => string[3] = {"AA", "BB", "CC"}
            </summary>
            <param name="data"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.Join(System.String[],System.String)">
            <summary>
            문자열 배열을 separator롤 포함한 문자열로 변환하여 리턴.
            </summary>
            <param name="data"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.WordCount(System.String,System.String)">
            <summary>
            문장에서 단어의 개수를 리턴
            ex) "I am a boy" => 4
            </summary>
            <param name="data"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToCommaString(System.String)">
            <summary>
            천단위 콤마 문자열로 변환하여 리턴.
            ex) "123456" => "123,456"
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.RemoveEmptyString(System.String[])">
            <summary>
            문자열 배열 중 빈 문자열을 제거하고 새로 생성한 문자열 배열을 리턴.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.SafePadRight(System.String,System.Int32,System.Char)">
            <summary>
            Trim 처리후 totalWidth 길이만큼의 문자열만 처리합니다. 문자열이 totalWidth보다 작은 경우 우측에 paddingChar를 추가하여 반환합니다.
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.Compare(System.String,System.String,System.Boolean)">
            <summary>
            문자열 비교. 같으면 true, 다르면 false
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToString(System.String[],System.String)">
            <summary>
            문자열 배열을 separator롤 포함한 문자열로 변환하여 리턴.
            </summary>
            <param name="data"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToHexString(System.String,System.String)">
            <summary>
            "313233" -> "333133323333"<br/>
            separator = " " 라면,<br/>
            "313233" -> "33 31 33 32 33 33"<br/>
            </summary>
            <param name="data"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToDoubleQuotedString(System.String)">
            <summary>
            쌍따옴표가 추가된 문자열 리턴.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToDateTimeFormat(System.String,System.Nullable{System.DateTime})">
            <summary>
            문자열을 DateTime 기준으로 변경합니다.
            예시) "yyyy MM dd".ToDateTimeFormat() 호출시 "2023 01 02" 문자열을 반환합니다.
            사용가능 문자열 "yyyy"(4자리년), "yy"(2자리년), "MM"(월), "dd"(일), "HH"(24시간), "mm"(분), "ss"(초), "fff"(밀리초)
            </summary>
            <param name="txt"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToOddByteArray(System.String)">
            <summary>
            "303132" -> [0x30][0x31][0x32] : 2자리 문자 묶음(짝수) 이여야 함.<br/>
            공백은 자동 제거됩니다. "30 31 32" -> [0x30][0x31][0x32]
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToByteArray(System.String,System.Int32)">
            <summary>
            length = 0 이면 (문자열 길이),<br/>
            "303132" -> [0x33][0x30][0x33][0x31][0x33][0x32]<br/>
            length = 4 이면,<br/>
            "303132" -> [0x33][0x30][0x33][0x31]
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToEachByteArray_EncodingAscii(System.String)">
            <summary>
            "303132" -> [0x33][0x30][0x33][0x31][0x33][0x32]
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToEachByteArray_Digits(System.String,System.Int32)">
            <summary>
            "303132" digits=3 사용시 => [0x33][0x30][0x33]<br/>
            "10" digits=3 사용시 => [0x30][0x31][0x30]<br/> ????
            digits=0은 hex의 길이 전체 사용.
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToCharArray(System.String)">
            <summary>
            문자열을 Char 배열로 변환합니다.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToString(System.Char[])">
            <summary>
            Char 배열을 문자열로 변환합니다.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToTimeSpan(System.Int32)">
            <summary>
            초를 입력받아 TimeSpan으로 변환하여 리턴.
            </summary>
            <param name="totalSec"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToCommaString(System.Int32)">
            <summary>
            천단위 콤마 문자열로 변환하여 리턴.
            ex) 123456 => "123,456"
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToHex(System.Int32)">
            <summary>
            3 -> '3', 10 -> 'A'
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.IsEven(System.Int32)">
            <summary>
            홀수 여부 리턴
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.IsOdd(System.Int32)">
            <summary>
            짝수 여부 리턴
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.To4ByteArray(System.Int32,System.Boolean)">
            <summary>
            256 입력시, [0x00][0x00][0x01][0x00] 리턴.<br/>
            '- 00000000 00000000 00000001 00000000<br/>
            1024 입력시, [0x00][0x00][0x04][0x00] 리턴.<br/>
            '- 00000000 00000000 00000100 00000000<br/>
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.To4ByteArrayOnSystem(System.Int32)">
            <summary>
            256 입력시, [0x00][0x00][0x01][0x00] 리턴.<br/>
            '- 00000000 00000000 00000001 00000000<br/>
            1024 입력시, [0x00][0x00][0x04][0x00] 리턴.<br/>
            '- 00000000 00000000 00000100 00000000<br/>
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToShort(System.Double)">
            <summary>
            double을 short 형식으로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToInt32(System.Double)">
            <summary>
            double을 Int32 형식으로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToLong(System.Double)">
            <summary>
            double을 long 형식으로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToCommaString(System.Double)">
            <summary>
            천단위 콤마 문자열로 변환하여 리턴.
            ex) 123456.789 => "123,456.789"
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToInt32(System.Enum)">
            <summary>
            Enum을 Int32 형식으로 변환합니다.
            (A = 3 이면, 3을 반환합니다)
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToInt32String(System.Enum)">
            <summary>
            Enum을 Int32 형식의 문자열 형식으로 변환합니다.<br/>
            (A = 3 이면, "3"을 반환합니다)
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.Flatten(System.Collections.IEnumerable,System.String)">
            <summary>
            IEnumerable 배열 데이터를 평문화하여 반환합니다.<br/>
            <code>
            (new byte[] {1,2,3}).Flatten(", ");
            </code>
            </summary>
            <param name="elems"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.Combine(System.Byte[],System.Byte[])">
            <summary>
            [0x30][0x31] + [0x32][0x33] => [0x30][0x31][0x32][0x33]
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.Combine(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            [0x30][0x31] + [0x32] + [0x33] => [0x30][0x31][0x32][0x33]
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.Combine(System.Byte[],System.Byte[][])">
            <summary>
            [0x30][0x31] + [0x32][0x33] => [0x30][0x31][0x32][0x33]
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToUShortArray(System.Byte[])">
            <summary>
            byte 배열을 ushort 배열로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToAsciiString(System.Byte[])">
            <summary>
            [0x31][0x32][0x33] -> "123"
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToHexString(System.Byte[],System.String)">
            <summary>
            [0x31][0x32][0x33] -> "313233"<br/>
            separator = " " 라면,<br/>
            [0x31][0x32][0x33] -> "31 32 33"
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToHexString_BitConverter(System.Byte[],System.String)">
            <summary>
            [0x31][0x32][0x33] -> "313233"
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToHexString_X2(System.Byte[],System.String)">
            <summary>
            [0x31][0x32][0x33] -> "313233"
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToHexString_0x37(System.Byte[])">
            <summary>
            [0x31][0x32][0x33] -> "313233"
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToHexString_0x37(System.Byte[],System.Char)">
            <summary>
            [0x31][0x32][0x33] -> "31 32 33"
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.AppendBytes(System.Byte[],System.Byte[])">
            <summary>
            [0x30][0x31] + [0x32][0x33] => [0x30][0x31][0x32][0x33]
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.IndexOf(System.Byte[],System.Byte)">
            <summary>
            [0x31][0x32][0x32][0x33]에서 [0x32] 검색시 1 리턴. 못 찾으면 -1 리턴.
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.LastIndexOf(System.Byte[],System.Byte)">
            <summary>
            [0x31][0x32][0x32][0x33]에서 [0x32] 검색시 2 리턴. 못 찾으면 -1 리턴.
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.IndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            [0x31][0x32][0x32][0x32][0x33]에서 [0x32][0x32] 검색시 1 리턴. 못 찾으면 -1 리턴.<br/>
            searchOffset은 특정 구간이후부터 검색하기 위한 용도이며, 결과값은 offset부터가 아닌 시작부터의 인덱스 값입니다.<br/><br/>
            [0x31][0x32][0x30][0x31][0x32]에서, [0x31][0x32] 검색시<br/>
            searchOffset = 0이면, 찾은 결과값 0 반환<br/>
            searchOffset = 2이면, 찾은 결과값 3 반환<br/>
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.LastIndexOf(System.Byte[],System.Byte[])">
            <summary>
            [0x31][0x32][0x32][0x32][0x33]에서 [0x32][0x32] 검색시 2 리턴. 못 찾으면 -1 리턴.
            </summary>
        </member>
        <member name="M:_INNO.InnoExtensions.ToShort(System.UInt16)">
            <summary>
            ushort을 short 형식으로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToHex(System.Byte)">
            <summary>
            문자를 헥스 문자로 리턴.
            ex) "0" => "31"
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.ToString``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            List를 문자열로 변환하여 리턴합니다.
            </summary>
            <param name="list"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoExtensions.SafeEncoding(System.Text.Encoding,System.Text.Encoding)">
            <summary>
            안전한 인코딩을 반환합니다. (defaultEncoding이 null인 경우, 기본으로 Encoding.UTF8을 반환합니다.)
            </summary>
            <param name="encoding"></param>
            <param name="defaultEncoding">기본: Encoding.UTF8 (한글지원)</param>
            <returns></returns>
        </member>
        <member name="T:_INNO.InnoControlExtensions">
            <summary>
            InnoControlExtensions 컨트롤 확장 클래스입니다. InnoUI 로 들어가야하지 않을까?
            </summary>
        </member>
        <member name="M:_INNO.InnoControlExtensions.DoubleBuffered(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            컨트롤의 더블 버퍼 여부를 설정합니다.
            </summary>
            <param name="control"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:_INNO.InnoControlExtensions.GetFormBounceLocation(System.Windows.Forms.Form)">
            <summary>
            Form의 Bounce되는 Location을 알려줍니다.
            </summary>
            <param name="frm"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoControlExtensions.GetFormBounceLocation(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
            부모 폼에 Form이 Bounce되는 Location을 알려줍니다.
            </summary>
            <param name="parentForm"></param>
            <param name="newForm"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Crypt._InnoCrypt">
            <summary>
            암호화/복호화 지원 정적 클래스입니다.
            </summary>
        </member>
        <member name="T:_INNO._Crypt._InnoCrypt.DES">
            <summary>
            DES 기반의 대칭 키 암호화/복호화를 지원합니다.
            </summary>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.DES._Encrypt(System.String,System.String)">
            <summary>
            암호화 합니다.<br/>
            - 정확히 8자리의 password가 필요하며, 작거나 큰경우 내부적으로 8자리 처리를 합니다.
            </summary>
            <param name="plainText"></param>
            <param name="password">정확히 8자리여야 합니다.</param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.DES._Decrypt(System.String,System.String)">
            <summary>
            복호화 합니다.<br/>
            - 정확히 8자리의 passwor가 필요하며, 작거나 큰경우 내부적으로 8자리 처리를 합니다.
            </summary>
            <param name="encryptedText"></param>
            <param name="password">정확히 8자리여야 합니다.</param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Crypt._InnoCrypt.AES128">
            <summary>
            AES128 기반의 대칭키 암호화/복호화를 지원합니다.
            </summary>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.AES128._EncryptSalt(System.String,System.String)">
            <summary>
            Salt를 이용하여 암호화합니다.<br/>
            - 매번 다른 암호문을 생성합니다.
            </summary>
            <param name="plainText"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.AES128._DecryptSalt(System.String,System.String)">
            <summary>
            Salt를 이용하여 복호화합니다.
            </summary>
            <param name="encryptedText"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.AES128._Encrypt(System.String,System.String)">
            <summary>
            암호화합니다.
            </summary>
            <param name="plainText"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.AES128._Decrypt(System.String,System.String)">
            <summary>
            복호화합니다.
            </summary>
            <param name="encryptedText"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Crypt._InnoCrypt.RSA">
            <summary>
            RSA 기반의 비대칭 키 암호화/복호화를 지원합니다.
            </summary>
        </member>
        <member name="T:_INNO._Crypt._InnoCrypt.HASH">
            <summary>
            해시를 지원합니다.
            <list type="number">
            <item>해시란 임의의 길이의 데이터를 고정된 길이의 데이터로 매핑하는 것을 의미합니다.</item>
            <item>단방향으로의 변환만 지원되기에, 원래 입력값을 알 수 없습니다.</item>
                <list type="bullet">
                <item>이러한 특성때문에 데이터 무결성 검증(파일이나 메시지 전송)이나 비밀번호 저장에 사용되고 있습니다.</item>
                </list>
            <item>MD5, SHA-1: 보안상 취약점이 발견되었기에 덜 중요한 문자열 변환에만 사용하십시오.</item>
            <item>SHA-256: 중요한 문자열 변환에 사용하십시오.</item>
            </list>
            </summary>
        </member>
        <member name="T:_INNO._Crypt._InnoCrypt.HASH.MD5">
            <summary>
            MD5 기반의 해시를 지원합니다.
            </summary>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.HASH.MD5._GetHash(System.String)">
            <summary>
            해시를 반환합니다.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Crypt._InnoCrypt.HASH.SHA256">
            <summary>
            SHA-256 기반의 해시를 지원합니다.
            </summary>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.HASH.SHA256._GetHash(System.String)">
            <summary>
            해시를 반환합니다.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Crypt._InnoCrypt.Morse">
            <summary>
            모스부호 변환을 지원합니다.<br/>
            - 영문 알파벳, 숫자, 특수문자 5개만 지원됩니다. 특수문자 5개 = . , ( ) ?
            </summary>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.Morse._Encoding(System.String,System.String)">
            <summary>
            암호화합니다.<br/>
            - 영문 알파벳, 숫자, 특수문자 5개만 지원됩니다. 특수문자 5개 = . , ( ) ?<br/>
            - 띄어쓰기는 / 로 변환됩니다.<br/>
            - 한 문자당 separator로 구분하여 반환합니다.<br/>
            </summary>
            <param name="plainText"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.Morse._Decoding(System.String,System.Char)">
            <summary>
            복호화합니다.
            </summary>
            <param name="morseText"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Crypt._InnoCrypt.Morse._BeepPlay(System.String,System.Int32)">
            <summary>
            모스부호를 비프음으로 재생합니다.
            </summary>
            <param name="morseText"></param>
            <param name="beepFreq">37~32767</param>
        </member>
        <member name="T:_INNO._Data.IInnoBrief">
            <summary>
            IInnoBrief : 브리프 기능 인터페이스
            </summary>
        </member>
        <member name="M:_INNO._Data.IInnoBrief.SetBriefStartText(System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 의 시작 문자열 설정
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:_INNO._Data.IInnoBrief.AddBrief(System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 추가
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:_INNO._Data.IInnoBrief.UpdateBrief(System.Int32,System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 수정
            </summary>
            <param name="line"></param>
            <param name="text"></param>
        </member>
        <member name="M:_INNO._Data.IInnoBrief.RemoveBrief(System.Int32)">
            <summary>
            브리프(상단 `로 시작하는 설명) 한줄 삭제
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:_INNO._Data.IInnoBrief.ClearBrief">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 모두 삭제
            </summary>
        </member>
        <member name="M:_INNO._Data.IInnoBrief.BriefSmartTag(System.String,System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명)내 문자열 대체 기능
            Ex) SmartBrief("{TEST}", "HELLO"); // "{TEST}" 문자열을 "HELLO"로 교체
            </summary>
            <param name="originText"></param>
            <param name="replaceText"></param>
        </member>
        <member name="T:_INNO._Data.InnoCodeManager">
            <summary>
            InnoCodeManager 클래스 (Unique Code 기반의 파일명으로 관리)
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.GetTodayFolder">
            <summary>
            오늘 날짜 폴더를 가져옵니다.<br/>
            예시 : [ROOT]/년/년월/년월일/[SubFolder]
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.GetFolder(System.DateTime)">
            <summary>
            지정된 날짜 폴더를 가져옵니다.<br/>
            예시 : [ROOT]/년/년월/년월일/[SubFolder]
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.SetFileExtension(System.String)">
            <summary>
            Code 파일의 확장자를 설정합니다.
            </summary>
            <param name="fileExt"></param>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.SetRootFolder(System.String)">
            <summary>
            Root 폴더를 설정합니다. (기본 : .\CodeManager)<br/>
            예제 : SetRootFolder(@"D:\CodeManager");
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.GetRootFolder">
            <summary>
            설정된 Root 폴더 위치를 가져옵니다. (기본 : .\CodeManager)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.SetSubFolder(System.String)">
            <summary>
            하위 폴더를 설정합니다.<br/>
            예제 : SetSubFolder("TEST"); 호출하면, [ROOT]/년/년월/년월일/TEST 로 설정됩니다.<br/>
            예제 : SetSubFolder(""); 빈문자열을 호출하면, [ROOT]/년/년월/년월일 로 재설정됩니다.<br/>
            </summary>
            <param name="subFolder">예) D:\CodeManager</param>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.GetCleanCode(System.String)">
            <summary>
            앞뒤 공백 제거한 코드를 리턴합니다.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.SetFindPastDays(System.Int32)">
            <summary>
            과거 Code 까지 검색할 수 있도록 며칠 전을 설정합니다. (기본 : 7일 전까지 검색)<br/>
            0일을 설정하여도 오늘날짜 폴더는 검색합니다.
            </summary>
            <param name="days">며칠 전</param>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.FindPastCodeFile(System.String)">
            <summary>
            CodeManager 폴더에서 오늘부터 과거까지 Code.txt 파일을 찾아 전체 경로를 리턴합니다.<br/>
            못찾은 경우 null을 리턴합니다.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.GetCodeFile(System.String)">
            <summary>
            [ROOT]/년/년월/년월일/[SubFolder]/Code.txt 파일의 전체 경로를 찾아오거나 자동 생성하여 리턴합니다.<br/>
            1) 코드가 빈 문자열인 에러인 경우, null을 리턴합니다.<br/>
            2) 해당 Code.txt 존재하지 않는 경우, 오늘 날짜의 [ROOT]/년/년월/년월일/[SubFolder]/Code.txt 경로를 자동 생성하여 리턴합니다.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoCodeManager.IsCodeFileExists(System.String)">
            <summary>
            [ROOT]/년/년월/년월일/[SubFolder]/Code.txt 파일 존재여부를 리턴합니다.<br/>
            오늘 날짜 폴더부터 지정된 과거 날짜까지 모두 검색합니다.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoCodeManagerIni.SetFileExtension(System.String)">
            <summary>
            Code 파일의 확장자를 설정합니다.
            </summary>
            <param name="fileExt"></param>
        </member>
        <member name="T:_INNO._Data.InnoNode">
            <summary>
            데이터를 노드 형태로의 접근을 지원하는 클래스입니다.<br/>
            트리 구조 등 다차원 구조의 데이터를 처리하고자 할 때 사용하십시오.<br/>
            섹션/키/값 과 같이 깊이가 정해진 구조에서는 InnoData가 좀더 유연합니다.<br/>
            <list type="number">
            <item>다음과 같은 특징이 있습니다.</item>
                <list type="bullet">
                <item>멀티스레드 환경에서 안전하게 동작할 수 있도록 구현되어 있습니다.</item>
                <item>노드에는 하위 노드를 추가하여 관리할 수 있습니다.</item>
                <item>노드에는 키/값 쌍의 엔트리를 추가하여 관리할 수 있습니다.</item>
                <item>추가하는 순서 기준으로 관리가 이루어집니다.</item>
                <item>노드 하위에 추가하는 순서 기준으로 하위 노드 관리가 이루어집니다.</item>
                    <list type="bullet">
                    <item>InnoNode[노드][하위노드][하위노드] 형태로로 하위노드에 대한 접근이 가능합니다.</item>
                    <item>InnoNode[노드][하위노드][하위노드].Value(키) 로 값에 대한 접근이 가능합니다.</item>
                    <item>InnoNode[노드인덱스][하위노드인덱스][하위노드인덱스] 형태로 하위노드에 대한 접근이 가능합니다.</item>
                    <item>InnoNode[노드인덱스][하위노드인덱스][하위노드인덱스].Value(키) 로 값에 대한 접근이 가능합니다.</item>
                    </list>
                </list>
            <item>키는 대소문자를 구분합니다.</item>
            </list>
            </summary>
        </member>
        <member name="F:_INNO._Data.InnoNode.node">
            <summary>
            Node 이름
            </summary>
        </member>
        <member name="F:_INNO._Data.InnoNode.briefDic">
            <summary>
            Brief에 접근 개체
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoNode.#ctor(System.Boolean)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoNode.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoNode.#ctor(System.String)">
            <summary>
            생성자
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:_INNO._Data.InnoNode.Item(System.Object)">
            <summary>
            지정한 노드의 하위노드를 가져오거나 설정합니다.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:_INNO._Data.InnoNode.Item(System.Int32)">
            <summary>
            지정한 인덱스가 있는 노드의 하위노드를 가져오거나 설정합니다.
            </summary>
            <param name="nodeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoNode.IsNodeExists(System.Object)">
            <summary>
            노드가 존재하는지 여부를 가져옵니다.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoNode.AddNode(System.Object)">
            <summary>
            노드를 추가합니다.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoNode.AddNode(System.Object,_INNO._Data.InnoNode)">
            <summary>
            노드를 추가합니다.
            </summary>
            <param name="node"></param>
            <param name="innoNode"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoNode.UpdateNode(System.Object,_INNO._Data.InnoNode)">
            <summary>
            노드를 변경합니다.
            </summary>
            <param name="node"></param>
            <param name="innoNode"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoNode.DeleteNode(System.Object)">
            <summary>
            노드를 삭제합니다.
            </summary>
            <remarks>모든 하위노드가 삭제됩니다.</remarks>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoNode.Clear">
            <summary>
            모든 노드와 키/값/ 엔트리를 삭제합니다. 모든 하위가 따라서 지워지는지 테스트 필요!!!!!
            </summary>
            <remarks>모든 노드와 키/값 엔트리가 삭제됩니다.</remarks>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoNode.Node(System.Object)">
            <summary>
            지정된 이름의 노드를 반환합니다.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoNode.Node(System.Int32)">
            <summary>
            지정된 인덱스의 노드를 가져옵니다.
            </summary>
            <param name="nodeIndex"></param>
            <returns></returns>
        </member>
        <member name="P:_INNO._Data.InnoNode.NodeCount">
            <summary>
            노드의 개수를 반환합니다.
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoNode.SetBriefStartText(System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 의 시작 문자열 설정
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:_INNO._Data.InnoNode.AddBrief(System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 추가
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._Data.InnoNode.UpdateBrief(System.Int32,System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 수정
            </summary>
            <param name="iLine"></param>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._Data.InnoNode.RemoveBrief(System.Int32)">
            <summary>
            파일에 대한 브리프(상단 ;로 시작하는 설명) 한줄 삭제
            </summary>
            <param name="iLine"></param>
        </member>
        <member name="M:_INNO._Data.InnoNode.ClearBrief">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 삭제
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoNode.BriefSmartTag(System.String,System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 문자열 대체 기능
            Ex) SmartBrief("{TEST}", "HELLO"); // "{TEST}" 문자열을 "HELLO"로 교체
            </summary>
            <param name="originText"></param>
            <param name="replaceText"></param>
        </member>
        <member name="T:_INNO._Data._InnoData">
            <summary>
            데이터 지원 정적 클래스입니다.
            </summary>
        </member>
        <member name="M:_INNO._Data._InnoData._GetAscii(System.Int32,System.Int32)">
            <summary>
            설정한 Ascii 문자열을 리턴합니다.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data._InnoData._CombineBytes(System.Byte[],System.Byte[])">
            <summary>
            [0x30][0x31] + [0x32][0x33] => [0x30][0x31][0x32][0x33]
            </summary>
        </member>
        <member name="M:_INNO._Data._InnoData._Combine(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            [0x30][0x31] + [0x32] + [0x33] => [0x30][0x31][0x32][0x33]
            </summary>
        </member>
        <member name="M:_INNO._Data._InnoData._Combine(System.Byte[][])">
            <summary>
            [0x30][0x31] + [0x32][0x33] => [0x30][0x31][0x32][0x33]
            </summary>
        </member>
        <member name="M:_INNO._Data._InnoData._ConvertEncodingAsciiToUnicode(System.Byte[])">
            <summary>
            Ascii Byte 배열을 Unicode Byte 배열로 변환합니다.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data._InnoData._ConvertEncodingAsciiToUnicode(System.String)">
            <summary>
            Ascii Byte 문자열을 Unicode Byte 문자열로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data._InnoData._ConvertEncodingUnicodeToAscii(System.Byte[])">
            <summary>
            Unicode Byte 배열을 Ascii Byte 배열로 변환합니다.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data._InnoData._ConvertEncodingUnicodeToAscii(System.String)">
            <summary>
            Unicode 문자열을 Ascii 문자열로 변환합니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data._InnoData._CalculateChecksumBccTwoBytes(System.Byte[])">
            <summary>
            BCC 기반의 Checksum을 계산합니다.
            Ex) 30 + 31 + 57 + 5A + 45 + 52 = 1A9 => 백자리 무시하고 A9를 리턴합니다.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Data.InnoDictionary">
            <summary>
            InnoDictionary 클래스<br/>
            <list type="number">
            <item>기본 Dictionary들과 다음과 같은 차이가 있습니다.</item>
                <list type="bullet">
                <item>멀티스레드 환경에서 안전하게 동작할 수 있도록 구현되어 있습니다.</item>
                <item>추가하는 순서 기준으로 키 관리가 이루어집니다.</item>
                    <list type="bullet">
                    <item>InnoDic[키]로 접근이 가능합니다.</item>
                    <item>InnoDic[키인덱스]로 접근이 가능합니다.</item>
                    </list>
                </list>
            <item>InnoDic[키] = 값; 방식으로 데이터를 직접 추가하거나 읽어올 수 있습니다.</item>
            <item>키와 값은 각각 object type으로 다양한 구조가 가능합니다.</item>
                <list type="bullet">
                <item>예를 들어, 키를 2개 가지는 구조의 클래스를 키로 사용하여 2개의 키로 구동하는 Dictionary를 제작할 수 있습니다.</item>
                </list>
            <item>string value = InnoDic[키].ToString(); 사용할 때에는 입력한 타입 기준으로 변환하여 사용합니다.</item>
            <item>키는 대소문자를 구분합니다.</item>
            </list>
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.#ctor(System.String)">
            <summary>
            이름있는 생성자
            </summary>
        </member>
        <member name="P:_INNO._Data.InnoDictionary.Name">
            <summary>
            이름을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._Data.InnoDictionary.Item(System.Object)">
            <summary>
            지정한 키가 있는 값을 가져오거나 설정합니다.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:_INNO._Data.InnoDictionary.Item(System.Int32)">
            <summary>
            지정한 인덱스가 있는 값을 가져오거나 설정합니다.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Add(System.Object,System.Object,System.Boolean)">
            <summary>
            키/값 엔트리를 추가합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="key"></param>
            <param name="value"></param>
            <param name="saveLog"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Add(System.Object,System.Object)">
            <summary>
            키/값 엔트리를 추가합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Update(System.Object,System.Object,System.Boolean)">
            <summary>
            지정한 키가 있는 엔트리의 값을 변경합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <param name="value"></param>
            <param name="saveLog"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Update(System.Object,System.Object)">
            <summary>
            지정한 키가 있는 엔트리의 값을 변경합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Insert(System.Int32,System.Object,System.Object)">
            <summary>
            인덱스 위치에 키/값 엔트리를 삽입합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Insert(System.Object,System.Object,System.Object)">
            <summary>
            beforeKey 앞에 키/값 엔트리를 삽입합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="beforeKey"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Remove(System.Object)">
            <summary>
            지정한 키가 있는 엔트리를 삭제합니다.<br/>
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.RemoveAt(System.Int32)">
            <summary>
            지정한 인덱스에 있는 엔트리를 삭제합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Clear">
            <summary>
            키/값 쌍 엔트리를 모두 삭제합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="P:_INNO._Data.InnoDictionary.Count">
            <summary>
            키/값 쌍의 수를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.NewGuid">
            <summary>
            GUID(Global Unique Identifier)를 생성하여 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.IsKeyExists(System.Object)">
            <summary>
            특정 키가 포함되어 있는지 여부를 확인합니다.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Contains(System.Object)">
            <summary>
            특정 키가 포함되어 있는지 여부를 확인합니다.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Key(System.Int32)">
            <summary>
            지정된 인덱스의 키를 가져옵니다.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <returns>키 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.KeyIndex(System.Object)">
            <summary>
            지정한 키의 인덱스를 반환합니다.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <returns>키 object를 반환합니다. 없으면 -1을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.UpdateKey(System.Object,System.Object)">
            <summary>
            키에 해당하는 엔트리의 키를 새로운 키로 변경합니다. (값은 유지됩니다.)
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <param name="newKey"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.KeyByValue(System.Object)">
            <summary>
            지정된 값의 첫번째 찾은 키를 반환합니다.
            </summary>
            <param name="value"></param>
            <returns>키 object를 반환합니다. 못 찾으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Value(System.Object,System.Boolean)">
            <summary>
            지정된 키에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <param name="saveLog"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Value(System.Object)">
            <summary>
            지정된 키에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Value(System.Int32,System.Boolean)">
            <summary>
            지정된 인덱스에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <param name="saveLog"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Value(System.Int32)">
            <summary>
            지정된 인덱스에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Object(System.Object)">
            <summary>
            지정된 키에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.Object(System.Int32)">
            <summary>
            지정된 인덱스에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.DeepCopy">
            <summary>
            InnoDictionary 개체를 복사하여 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.ToDictionary">
            <summary>
            InnoDictionary 개체를 Dictionary&lt;string, string&gt; 개체로 변환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionary.FromDictionary(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Dictionary&lt;string, string&gt; 개체를 InnoDictionary 개체로 변환합니다.<br/>
            기존 정보를 유지하며 추가합니다.<br/>
            기존 정보를 삭제하려면 Clear()를 호출하십시오.
            </summary>
            <param name="dic">변환할 Dictionary&lt;string, string&gt; 개체</param>
        </member>
        <member name="T:_INNO._Data.InnoDictionaryFile">
            <summary>
            InnoDataDictionary 구조를 파일 저장/불러오기 할 수 있는 클래스
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.Open(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            파일 열기
            </summary>
            <param name="pathFileNameExt"></param>
            <param name="encoding"></param>
            <param name="ignoreBlankLine"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.IsOpened">
            <summary>
            파일이 한번 이상 열려서 Path가 설정되었는지 여부. (파일이 정상 열렸었음을 체크)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.Open(System.String,System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            파일 열기...
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="fileExt"></param>
            <param name="encoding"></param>
            <param name="ignoreBlankLine"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.OpenNew(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            파일 새로 열기...
            </summary>
            <param name="pathFileNameExt"></param>
            <param name="encoding"></param>
            <param name="ignoreBlankLine"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.OpenNew(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            파일 새로 열기...
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="fileExt"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.Close">
            <summary>
            닫기. (경로 초기화 및 Data가 초기화 됩니다.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.Save(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            파일 저장.
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="fileExt"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.SaveAs(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            파일 새로 저장...
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="fileExt"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.SaveAs(System.String,System.Text.Encoding)">
            <summary>
            파일 새로 저장...
            </summary>
            <param name="pathFileNameExt"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.GetPathFileNameExt">
            <summary>
            설정된 "경로/파일명.확장자" 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.GetFileNameExt">
            <summary>
            파일명.확장자 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.ClearBrief">
            <summary>
            파일에 대한 브리프(상단 ;로 시작하는 설명) 데이터 삭제
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.AddBrief(System.String)">
            <summary>
            파일에 대한 브리프(상단 ;로 시작하는 설명) 데이터 추가
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.UpdateBrief(System.Int32,System.String)">
            <summary>
            파일에 대한 브리프(상단 ;로 시작하는 설명) 데이터 수정
            </summary>
            <param name="iLine"></param>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.RemoveBrief(System.Int32)">
            <summary>
            파일에 대한 브리프(상단 ;로 시작하는 설명) 한줄 삭제
            </summary>
            <param name="iLine"></param>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.SmartBrief(System.String,System.String)">
            <summary>
            파일에 대한 브리프(상단 ;로 시작하는 설명) 문자열 대체 기능
            Ex) SmartBrief("{TEST}", "HELLO"); // "{TEST}" 문자열을 "HELLO"로 교체
            </summary>
            <param name="originText"></param>
            <param name="replaceText"></param>
        </member>
        <member name="M:_INNO._Data.InnoDictionaryFile.DeepCopy">
            <summary>
            InnoDictionaryFile 개체를 복사하여 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._Data.InnoDictionarySimple">
            <summary>
            InnoDictionarySimple 클래스<br/>
            InnoDictionarySimple은 간단한 데이터 처리에서 사용하십시오. InnoDictionary의 사용을 권장합니다.<br/>
            <list type="number">
            <item>기본 Dictionary들과 다음과 같은 차이가 있습니다.</item>
                <list type="bullet">
                <item>추가하는 순서 기준으로 키 관리가 이루어집니다.</item>
                    <list type="bullet">
                    <item>InnoDic[키]로 접근이 가능합니다.</item>
                    <item>InnoDic[키인덱스]로 접근이 가능합니다.</item>
                    </list>
                </list>
            <item>InnoDic[키] = 값; 방식으로 데이터를 직접 추가하거나 읽어올 수 있습니다.</item>
            <item>키와 값은 각각 object type으로 다양한 구조가 가능합니다.</item>
                <list type="bullet">
                <item>예를 들어, 키를 2개 가지는 구조의 클래스를 키로 사용하여 2개의 키로 구동하는 Dictionary를 제작할 수 있습니다.</item>
                </list>
            <item>string value = InnoDic[키].ToString(); 사용할 때에는 입력한 타입 기준으로 변환하여 사용합니다.</item>
            <item>키는 대소문자를 구분합니다.</item>
            </list>
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="P:_INNO._Data.InnoDictionarySimple.Item(System.Object)">
            <summary>
            지정한 키가 있는 값을 가져오거나 설정합니다.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:_INNO._Data.InnoDictionarySimple.Item(System.Int32)">
            <summary>
            지정한 인덱스가 있는 값을 가져오거나 설정합니다.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Add(System.Object,System.Object)">
            <summary>
            키/값 엔트리를 추가합니다.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Update(System.Object,System.Object)">
            <summary>
            지정한 키가 있는 엔트리의 값을 변경합니다.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Insert(System.Int32,System.Object,System.Object)">
            <summary>
            인덱스 위치에 키/값 엔트리를 삽입합니다.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Insert(System.Object,System.Object,System.Object)">
            <summary>
            beforeKey 앞에 키/값 엔트리를 삽입합니다.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="beforeKey"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Remove(System.Object)">
            <summary>
            지정한 키가 있는 엔트리를 삭제합니다.<br/>
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.RemoveAt(System.Int32)">
            <summary>
            지정한 인덱스에 있는 엔트리를 삭제합니다.
            </summary>
            /// <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Clear">
            <summary>
            키/값 쌍 엔트리를 모두 삭제합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:_INNO._Data.InnoDictionarySimple.Count">
            <summary>
            키/값 쌍의 수를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.NewGuid">
            <summary>
            GUID(Global Unique Identifier)를 생성하여 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.IsKeyExists(System.Object)">
            <summary>
            특정 키가 포함되어 있는지 여부를 확인합니다.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Contains(System.Object)">
            <summary>
            특정 키가 포함되어 있는지 여부를 확인합니다.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Key(System.Int32)">
            <summary>
            지정된 인덱스의 키를 가져옵니다.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <returns>키 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.KeyIndex(System.Object)">
            <summary>
            지정한 키의 인덱스를 반환합니다.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <returns>키 object를 반환합니다. 없으면 -1을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Value(System.Object)">
            <summary>
            지정된 키에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Value(System.Int32)">
            <summary>
            지정된 인덱스에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Object(System.Object)">
            <summary>
            지정된 키에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <param name="key"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.Object(System.Int32)">
            <summary>
            지정된 인덱스에 해당하는 엔트리에서 값을 가져옵니다.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index"></param>
            <returns>값 object를 반환합니다. 없으면 null을 반환합니다.</returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.DeepCopy">
            <summary>
            InnoDataDictionarySimple 개체를 복사하여 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.ToDictionary">
            <summary>
            InnoDictionary 개체를 Dictionary&lt;string, string&gt; 개체로 변환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDictionarySimple.FromDictionary(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Dictionary&lt;string, string&gt; 개체를 InnoDictionarySimple 개체로 변환합니다.<br/>
            기존 정보를 유지하며 추가합니다.<br/>
            기존 정보를 삭제하려면 Clear()를 호출하십시오.
            </summary>
            <param name="dic">변환할 Dictionary&lt;string, string&gt; 개체</param>
        </member>
        <member name="M:_INNO._Data.InnoSharedMemory.Write``1(System.String,System.Int64,System.Int64,``0)">
            <summary>
            쓰기
            </summary>
            <typeparam name="T">구조체 타입</typeparam>
            <param name="mapName">맵 명칭</param>
            <param name="mapSize">맵 크기</param>
            <param name="offset">위치</param>
            <param name="source">소스</param>
        </member>
        <member name="M:_INNO._Data.InnoSharedMemory.Read``1(System.String,System.Int64)">
            <summary>
            읽기
            </summary>
            <typeparam name="T">구조체 타입</typeparam>
            <param name="mapName">맵 명칭</param>
            <param name="offset">오프셋</param>
            <returns>구조체</returns>
        </member>
        <member name="T:_INNO._Data.StructureHelper">
            <summary>
            구조체 헬퍼
            </summary>
        </member>
        <member name="F:_INNO._Data.StructureHelper._typeDictionary">
            <summary>
            타입 딕셔너리
            </summary>
        </member>
        <member name="M:_INNO._Data.StructureHelper.SizeOf(System.Type)">
            <summary>
            크기 구하기
            </summary>
            <param name="type">타입</param>
            <returns>크기</returns>
        </member>
        <member name="M:_INNO._Data.StructureHelper.GetSize(System.Type)">
            <summary>
            크기 구하기
            </summary>
            <param name="type">타입</param>
            <returns>크기</returns>
        </member>
        <member name="T:_INNO._Data.InnoStack`1">
            <summary>
            정해진 크기의 사이즈로 구동되는 Stack 클래스입니다.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:_INNO._Data.InnoStack`1.#ctor(System.Int32)">
            <summary>
            생성자 (maxSize = -1 무한대)
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="P:_INNO._Data.InnoStack`1.Count">
            <summary>
            Stack의 개수를 가져옵니다.<br/>
            - for() 루프 등에서 Pop() 호출시 같이 크기가 줄기 때문에 루프 등에서 사용시 주의하십시오.
            </summary>
        </member>
        <member name="P:_INNO._Data.InnoStack`1.MaxSize">
            <summary>
            Stack에 설정된 최대 크기를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoStack`1.SetDeleteLast(System.Boolean)">
            <summary>
            Stack 최대 크기가 넘은 경우 Stack의 마지막 데이터 삭제 여부를 설정합니다.<br/>
            deleteOld = true 이면, Push() 호출시 Stack의 마지막 데이터를 삭제하고 Stack의 마지막에 데이터를 추가합니다.<br/>
            deleteOld = false 이면, Push() 호출시 Stack의 변화는 없습니다.<br/>
            </summary>
            <param name="deleteLast"></param>
        </member>
        <member name="M:_INNO._Data.InnoStack`1.Push(`0)">
            <summary>
            Stack에 element를 추가합니다.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:_INNO._Data.InnoStack`1.Pop">
            <summary>
            Stack에서 element를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoStack`1.Clear">
            <summary>
            Stack의 모든 element를 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoStack`1._ExampleShow">
            <summary>
            예제 코드를 보여줍니다.
            </summary>
        </member>
        <member name="T:_INNO._Data.InnoQueue`1">
            <summary>
            정해진 크기의 사이즈로 구동되는 Queue 클래스입니다.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:_INNO._Data.InnoQueue`1.#ctor(System.Int32)">
            <summary>
            생성자 (기본 Queue 크기 무한대 -1)
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="P:_INNO._Data.InnoQueue`1.Count">
            <summary>
            Queue의 개수를 가져옵니다.<br/>
            - for() 루프 등에서 Pop() 호출시 같이 크기가 줄기 때문에 루프 등에서 사용시 주의하십시오.
            </summary>
        </member>
        <member name="P:_INNO._Data.InnoQueue`1.MaxSize">
            <summary>
            Queue에 설정된 최대 크기를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoQueue`1.SetDeleteOld(System.Boolean)">
            <summary>
            Queue 최대 크기가 넘은 경우 Queue의 첫 데이터 삭제 여부를 설정합니다.<br/>
            deleteOld = true 이면, Enqueue() 호출시 Queue의 첫 데이터를 삭제하고 Queue의 마지막에 데이터를 추가합니다.<br/>
            deleteOld = false 이면, Enqueue() 호출시 Queue의 변화는 없습니다.<br/>
            </summary>
            <param name="deleteOld"></param>
        </member>
        <member name="M:_INNO._Data.InnoQueue`1.Push(`0)">
            <summary>
            Queue에 element를 추가합니다.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoQueue`1.Enqueue(`0)">
            <summary>
            Queue에 element를 추가합니다.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoQueue`1.Pop">
            <summary>
            Queue에서 element를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoQueue`1.Dequeue">
            <summary>
            Queue에서 element를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoQueue`1.Clear">
            <summary>
            Queue의 모든 element를 삭제합니다.
            </summary>
        </member>
        <member name="T:_INNO._Data.InnoDataCsv">
            <summary>
            InnoDataCsv 클래스
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.#ctor(System.Boolean)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.#ctor(System.String,System.Boolean)">
            <summary>
            생성자
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.#ctor(System.String)">
            <summary>
            생성자
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.SetSaveInformation(System.Boolean)">
            <summary>
            파일 상단 정보 저장 여부를 설정합니다.
            </summary>
            <param name="save"></param>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.SetIgnoreLine(System.String,System.Boolean)">
            <summary>
            무시 기능을 설정합니다.
            <code>
            ignoreLineStartString: 라인 무시 문자열 설정 (null이면 무시라인 없음)
            ignoreBlankLine: 빈 문자열 무시 여부 설정
            </code>
            </summary>
            <param name="ignoreLineStartString">라인 무시 문자열 설정</param>
            <param name="ignoreBlankLine">빈 문자열 무시 여부 설정</param>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.SetSplitter(System.Char)">
            <summary>
            데이터를 구분하는 구분자를 설정합니다.
            </summary>
            <param name="spitter"></param>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.GetSplitter">
            <summary>
            설정된 데이터 구분자를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.Open(System.String,System.Text.Encoding)">
            <summary>
            파일을 열어 현재 InnoDataCsv에 데이터를 추가합니다.<br/>
            기존 데이터가 삭제되지 않습니다. 기존 데이터를 삭제하고 열려면 OpenNew()를 사용하십시오.
            <code>
            InnoDataCsv idc = new InnoDataCsv();
            idc.Open("file1.csv"); // file1.csv의 데이터 추가
            idc.Open("file2.csv"); // file2.csv의 데이터 추가
            idc.Save(); // 마지막 설정된 file2.csv에 file1.csv과 file2.csv의 내용이 같이 저장됩니다.
            idc.SaveAs("file3.csv"); // file3.csv에 저장합니다.
            </code>
            </summary>
            <param name="fullPath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.OpenNew(System.String,System.Text.Encoding)">
            <summary>
            파일 새로 열기 (기존 정보를 삭제하고 새로 엽니다.)
            </summary>
            <param name="fullPath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.Close">
            <summary>
            파일 닫기 (파일을 열었던 경로를 삭제하고, 데이터를 삭제합니다.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.Save(System.Text.Encoding)">
            <summary>
            파일 저장
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.SaveAs(System.String,System.Text.Encoding)">
            <summary>
            다른 이름으로 저장
            </summary>
            <param name="fullPath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataCsv.GetFullPath">
            <summary>
            설정되어 있는 "경로/파일명.확장자" 반환
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._Data.InnoDataIni">
            <summary>
            InnoDataIni 클래스
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.#ctor(System.Boolean)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.#ctor(System.String,System.Boolean)">
            <summary>
            생성자
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.#ctor(System.String)">
            <summary>
            생성자
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.SetSaveInformation(System.Boolean)">
            <summary>
            파일 상단 정보 저장 여부를 설정합니다.
            </summary>
            <param name="save"></param>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.Open(System.String,System.Text.Encoding)">
            <summary>
            파일 열기
            </summary>
            <param name="fullPath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.OpenNew(System.String,System.Text.Encoding)">
            <summary>
            파일 새로 열기 (기존 정보를 삭제하고 새로 엽니다.)
            </summary>
            <param name="fullPath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.Close">
            <summary>
            파일 닫기 (파일을 열었던 경로를 삭제하고, 데이터를 삭제합니다.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.Save(System.Text.Encoding)">
            <summary>
            파일 저장
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.DeleteSection(System.String)">
            <summary>
            섹션을 삭제합니다.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.SaveAs(System.String,System.Text.Encoding)">
            <summary>
            다른 이름으로 저장
            </summary>
            <param name="fullPath"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoDataIni.GetFullPath">
            <summary>
            설정되어 있는 "경로/파일명.확장자" 반환
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._Data.InnoData">
            <summary>
            데이터를 섹션/키/값 형태로의 접근을 지원하는 클래스입니다.<br/>
            섹션/키/값 과 같이 깊이가 정해진 구조에서 사용하십시오.<br/>
            깊이가 다양한 구조에는 InnoNode를 사용하십시오.<br/>
            <list type="number">
            <item>다음과 같은 특징이 있습니다.</item>
                <list type="bullet">
                <item>멀티스레드 환경에서 안전하게 동작할 수 있도록 구현되어 있습니다.</item>
                <item>섹션은 그룹의 개념으로 하위에 키/값 쌍의 엔트리를 추가하여 관리할 수 있습니다.</item>
                <item>추가하는 순서 기준으로 섹션 관리가 이루어집니다.</item>
                <item>섹션 하위에 추가하는 순서 기준으로 키 관리가 이루어집니다.</item>
                    <list type="bullet">
                    <item>InnoData[섹션][키]로 값에 대한 접근이 가능합니다.</item>
                    <item>InnoData[섹션][키인덱스]로 값에 대한 접근이 가능합니다.</item>
                    <item>InnoData[섹션인덱스][키]로 값에 대한 접근이 가능합니다.</item>
                    <item>InnoData[섹션인덱스][키인덱스]로 값에 대한 접근이 가능합니다.</item>
                    </list>
                </list>
            <item>키는 대소문자를 구분합니다.</item>
            </list>
            </summary>
        </member>
        <member name="P:_INNO._Data.InnoData.Name">
            <summary>
            InnoData 이름
            </summary>
        </member>
        <member name="F:_INNO._Data.InnoData.briefDic">
            <summary>
            Brief에 접근 개체
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoData.#ctor(System.Boolean)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoData.#ctor(System.String,System.Boolean)">
            <summary>
            생성자
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:_INNO._Data.InnoData.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoData.#ctor(System.String)">
            <summary>
            생성자
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:_INNO._Data.InnoData.Item(System.String)">
            <summary>
            지정한 섹션이 있는 키/값 엔트리를 가져옵니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="P:_INNO._Data.InnoData.Item(System.Int32)">
            <summary>
            지정한 인덱스가 있는 키/값 엔트리를 가져옵니다.
            </summary>
            <param name="sectionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoData.IsSectionExists(System.String)">
            <summary>
            섹션이 존재하는지 여부를 가져옵니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoData.AddSection(System.String)">
            <summary>
            섹션을 추가합니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoData.AddSection(System.String,_INNO._Data.InnoDictionary)">
            <summary>
            섹션을 추가합니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoData.UpdateSection(System.String,_INNO._Data.InnoDictionary)">
            <summary>
            섹션을 변경합니다. 필요한가???
            </summary>
            <param name="section"></param>
            <param name="innoDic"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoData.DeleteSection(System.String)">
            <summary>
            섹션을 삭제합니다.<br/>
            </summary>
            <remarks>하위 모든 키/값 엔트리가 삭제됩니다.</remarks>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoData.Clear">
            <summary>
            모든 섹션과 키/값/ 엔트리를 삭제합니다.
            </summary>
            <remarks>모든 섹션과 키/값 엔트리가 삭제됩니다.</remarks>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoData.Section(System.String)">
            <summary>
            지정된 이름의 섹션을 반환합니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Data.InnoData.Section(System.Int32)">
            <summary>
            지정된 인덱스의 섹션을 가져옵니다.
            </summary>
            <param name="sectionIndex"></param>
            <returns></returns>
        </member>
        <member name="P:_INNO._Data.InnoData.Count">
            <summary>
            섹션의 개수를 반환합니다.
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoData.SetBriefStartText(System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 의 시작 문자열 설정
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:_INNO._Data.InnoData.AddBrief(System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 추가
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._Data.InnoData.UpdateBrief(System.Int32,System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 수정
            </summary>
            <param name="iLine"></param>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._Data.InnoData.RemoveBrief(System.Int32)">
            <summary>
            파일에 대한 브리프(상단 ;로 시작하는 설명) 한줄 삭제
            </summary>
            <param name="iLine"></param>
        </member>
        <member name="M:_INNO._Data.InnoData.ClearBrief">
            <summary>
            브리프(상단 `로 시작하는 설명) 데이터 삭제
            </summary>
        </member>
        <member name="M:_INNO._Data.InnoData.BriefSmartTag(System.String,System.String)">
            <summary>
            브리프(상단 `로 시작하는 설명) 문자열 대체 기능
            Ex) SmartBrief("{TEST}", "HELLO"); // "{TEST}" 문자열을 "HELLO"로 교체
            </summary>
            <param name="originText"></param>
            <param name="replaceText"></param>
        </member>
        <member name="T:_INNO.InnoClassFieldInfo">
            <summary>
            InnoClassFieldInfo 클래스
            <list type="bullet">
            <item>Reflection을 활용하여 동적으로 클래스의 필드 이름으로 값을 읽고 쓰는 기능을 제공합니다.</item>
            </list>
            </summary>
        </member>
        <member name="M:_INNO.InnoClassFieldInfo._GetFieldInfo(System.Type,System.String)">
            <summary>
            클래스명과 필드 이름을 지정하여 필드 정보를 가져옵니다.<br/>
            <code>
            FieldInfo fi = InnoClassFieldInfo._GetFieldInfo(typeof(클래스명), 필드명);
            </code>
            </summary>
            <param name="tp"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoClassFieldInfo._GetFieldInfo(System.Object,System.String)">
            <summary>
            클래스 객체와 필드 이름을 지정하여 필드 정보를 가져옵니다.
            <code>
            FieldInfo fi = InnoClassFieldInfo._GetFieldInfo(클래스객체, 필드명);
            </code>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoClassFieldInfo._GetFieldInfos(System.Type)">
            <summary>
            클래스명을 지정하여 모든 필드 정보를 가져옵니다.<br/>
            <code>[예제]
            FieldInfo[] fis = InnoClassFieldInfo.GetFieldInfos(typeof(클래스명));
            </code>
            </summary>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoClassFieldInfo._GetFieldInfos(System.Object)">
            <summary>
            클래스 객체를 지정하여 모든 필드 정보를 가져옵니다.<br/>
            <code>[예제]
            FieldInfo[] fis = InnoClassFieldInfo.GetFieldInfos(클래스객체);
            </code>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoClassFieldInfo._GetValue(System.Object,System.String)">
            <summary>
            클래스 객체와 필드 이름을 지정하여 필드 값을 가져옵니다.<br/>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.InnoClassFieldInfo._SetValue(System.Object,System.String,System.Object)">
            <summary>
            클래스 객체와 필드 이름을 지정하여 필드 값을 설정합니다.<br/>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="T:_INNO._File.InnoFileAbstract">
            <summary>
            InnoFileAbstract 클래스
            </summary>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetFileSave(System.Boolean)">
            <summary>
            파일 저장 사용여부 설정 (기본 : true)
            </summary>
            <param name="save"></param>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.IsFileSave">
            <summary>
            파일 저장 사용여부 반환.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetSaveInformation(System.Boolean)">
            <summary>
            파일 상단 정보 저장 여부를 설정합니다.
            </summary>
            <param name="save"></param>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.Read">
            <summary>
            설정된 경로의 파일 내용을 모두 읽어서 string[]로 반환.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.Write(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            설정된 경로의 파일에 내용 쓰기<br/>
            saveDateTime=true 인 경우, "yyyy-MM-dd HH:mm:ss.fff txt" 방식으로 저장됨.
            </summary>
            <param name="txt"></param>
            <param name="prefixNewLine"></param>
            <param name="postfixNewLine"></param>
            <param name="saveDateTime"></param>
            <param name="dateTimeFormat"></param>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.Writeln(System.String,System.Boolean,System.String)">
            <summary>
            파일에 내용 쓰고 새 줄(New Line, "\r\n") 생성.
            </summary>
            <param name="txt"></param>
            <param name="saveDataTime"></param>
            <param name="dateTimeFormat"></param>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetEncodingRead(System.Text.Encoding)">
            <summary>
            문서 읽기할 때의 인코딩 정보를 설정
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetEncodingRead">
            <summary>
            문서 읽기할 때의 인코딩 정보 반환
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetEncodingWrite(System.Text.Encoding)">
            <summary>
            문서 쓰기할 때의 인코딩 정보 설정
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetEncodingWrite">
            <summary>
            문서 쓰기할 때의 인코딩 정보 반환
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetUseCustomInformation(System.Boolean)">
            <summary>
            파일 처음 생성시 파일 상단에 추가될 커스텀 정보의 사용 여부를 설정합니다. (미사용시 (주)북스 시스템 정보가 표시됩니다.)
            </summary>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetCustomInformation(System.String)">
            <summary>
            파일의 처음 생성시 파일 상단에 추가될 정보를 설정합니다.
            SetUseCustomInformation(true); SetCustomInformation(""); 설정시 파일 상단 Information 정보가 추가되지 않습니다.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SaveInformation">
            <summary>
            파일 상단에 문서 정보 남기기
            </summary>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.MakeFullPath">
            <summary>
            전체 "경로\파일명.확장자" 만들기. 전체 "경로\파일명.확장자" 존재하는 경우 리턴값 true 반환.
            반환값과 무관하게 전체 경로 변수는 설정됩니다.
            </summary>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetPath(System.String,System.Boolean)">
            <summary>
            경로 설정. 경로가 정상 생성된 경우에 리턴값 true 반환.
            (예제) SatPath("D:\Path");
            리턴값과 무관하게 파일명, 경로 변수값은 설정됩니다.
            </summary>
            <param name="path"></param>
            <param name="createPath"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetFileName(System.String)">
            <summary>
            파일명 설정
            리턴값과 무관하게 파일명 변수값은 설정됩니다.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetFileExt(System.String)">
            <summary>
            파일 확장자 설정.
            리턴값과 무관하게 확장자 변수값은 설정됩니다.
            </summary>
            <param name="fileExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetFileNameExt(System.String,System.String)">
            <summary>
            파일명, 파일 확장자 설정.
            리턴값과 무관하게 파일명, 확장자 변수값은 설정됩니다.
            </summary>
            <param name="fileName"></param>
            <param name="fileExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetFileNameExt(System.String)">
            <summary>
            파일명, 파일 확장자 설정.
            리턴값과 무관하게 파일명, 확장자 변수값은 설정됩니다.
            </summary>
            <param name="fileName"></param>
            <param name="fileExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetPathFileNameExt(System.String,System.String,System.String)">
            <summary>
            전체 경로 설정 (경로\파일명.확장자)
            리턴값과 무관하게 파일명, 확장자 변수값은 설정됩니다.
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="fileExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetPathFileNameExt(System.String)">
            <summary>
            전체 경로 설정
            (예제) SetPathFileNameExt("D:\Path\FileName.txt");
            리턴값과 무관하게 파일명, 확장자 변수값은 설정됩니다.
            </summary>
            <param name="pathFileNameExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetFullPath(System.String,System.String,System.String)">
            <summary>
            전체 경로 설정 (경로\파일명.확장자)
            리턴값과 무관하게 파일명, 확장자 변수값은 설정됩니다.
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="fileExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.SetFullPath(System.String)">
            <summary>
            전체 경로 설정
            (예제) SetFullPath("D:\Path\FileName.txt");
            리턴값과 무관하게 파일명, 확장자 변수값은 설정됩니다.
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.Close">
            <summary>
            전체 경로 설정
            (예제) SetFullPathFile("D:\Path\FileName.txt");
            리턴값과 무관하게 파일명, 확장자 변수값은 설정됩니다.
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetPathFileNameExtArray(System.String)">
            <summary>
            설정되어 있는 "경로/파일명.확장자"를 string[] "문자열 배열"로 반환.
            Return[0] = 경로, Return[1] = 파일명, Return[2] = 파일확장자
            (예제) GetPathFileNameExtArray(); // SetFullPathFile() 등으로 설정된 경로를 파싱.
            (예제) GetPathFileNameExtArray("D:\Path\FileName.txt"); // 전달된 경로를 파싱.
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetPathFileNameExt">
            <summary>
            설정되어 있는 전체 경로 "경로/파일명.확장자" 반환.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetFullPath">
            <summary>
            설정되어 있는 전체 경로 "경로/파일명.확장자" 반환.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetPathFileName">
            <summary>
            설정되어 있는 전체 경로 "경로/파일명" 반환. (확장자 미포함)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetPath">
            <summary>
            설정되어 있는 "경로"만 반환.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetFileNameExt">
            <summary>
            설정되어 있는 "파일명.확장자" 반환.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetFileName">
            <summary>
            설정되어 있는 "파일명"만 반환.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.GetFileExt">
            <summary>
            설정되어 있는 "파일확장자"만 반환
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.CreatePath(System.String)">
            <summary>
            경로 생성.
            (예제) CreatePath(); // SetPath() 등으로 설정된 경로를 생성.
            (예제) CreatePath("D:\Path"); // 전달된 경로를 생성.
            경로가 정상 생성된 경우에 리턴값 true 반환.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.DeletePath(System.String)">
            <summary>
            경로 삭제. (빈 폴더만 삭제됨)
            (예제) DeletePath(); // SetPath() 등으로 설정된 경로를 삭제.
            (예제) DeletePath("D:\Path"); // 전달된 경로를 삭제.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.DeleteFile(System.String)">
            <summary>
            파일 삭제
            (예제) DeleteFile(); // SetFullPathFile() 등으로 설정된 파일을 삭제.
            (예제) DeleteFile("D:\Path\FileName.txt"); // 전달된 경로의 파일을 삭제.
            </summary>
            <param name="pathFileNameExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.Exists(System.String)">
            <summary>
            파일 존재여부
            (예제) Exists("D:\Path\FileName.txt"); // 전달된 경로 파일의 존재여부를 리턴.
            </summary>
            <param name="pathFileNameExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.Exists">
            <summary>
            파일 존재여부
            (예제) Exists(); // SetFullPathFile() 등으로 설정된 파일 존재여부를 리턴.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.IsExists(System.String)">
            <summary>
            파일 존재여부
            (예제) IsExists("D:\Path\FileName.txt"); // 전달된 경로 파일의 존재여부를 리턴.
            </summary>
            <param name="pathFileNameExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.IsExists">
            <summary>
            파일 존재여부
            (예제) IsExists(); // SetFullPathFile() 등으로 설정된 파일 존재여부를 리턴.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoFileAbstract.DeleteRecursively(System.IO.DirectoryInfo)">
            <summary>
            전달된 경로의 모든 폴더 및 파일 삭제
            (예제) DeleteRecursively(new DirectoryInfo("D:\Path"));
            </summary>
            <param name="baseDir"></param>
        </member>
        <member name="T:_INNO._File.InnoCsv">
            <summary>
            InnoFileCsv 클래스
            </summary>
        </member>
        <member name="M:_INNO._File.InnoCsv.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoCsv.#ctor(System.String)">
            <summary>
            생성자
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoCsv.SetIgnoreStartString(System.String)">
            <summary>
            무시할 문자열의 시작 문자열을 설정합니다.
            </summary>
            <param name="ignoreStartString"></param>
        </member>
        <member name="M:_INNO._File.InnoCsv.GetIgnoreStartString">
            <summary>
            설정된 무시할 문자열의 시작 문자열을 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoCsv.ReadSpecificLine(System.Int32)">
            <summary>
            지정된 라인 번호의 문자열을 가져옵니다. ("데이터,데이터,데이터")
            </summary>
            <param name="specificLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoCsv.ReadSpecificLine(System.Int32,System.Char)">
            <summary>
            지정된 라인 번호의 문자열을 구분자로 나눈 문자열 배열을 가져옵니다. (["데이터"],["데이터"],["데이터"])
            </summary>
            <param name="specificLineNumber"></param>
            <param name="splitter"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoCsv.ReadArrays(System.Char)">
            <summary>
            파일을 모두 읽어 문자열 배열로 가져옵니다.
            </summary>
            <param name="splitter"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoCsv.Read(System.String)">
            <summary>
            파일을 모두 읽어 문자열 배열로 가져옵니다.
            </summary>
            <param name="splitter"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoCsv.Write(System.String[0:,0:],System.Char)">
            <summary>
            문자열 배열을 파일에 씁니다.
            </summary>
            <param name="splitter"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._File.InnoFile">
            <summary>
            InnoFile 클래스
            </summary>
        </member>
        <member name="M:_INNO._File.InnoFile.Writeln_YmdFolder(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            현재 날짜 기준 정해진 포맷 폴더(/년/년월)에 문자열을 씁니다.
            예시) {PATH}/{yyyy/yyyyMM}/{PREFIX}{FILENAME}{_yyyyMMdd_HH}.{FILEEXT} 파일에 {yyyy-MM-dd HH:mm:ss.fff}{separator}{txt} 내용을 추가하여 저장합니다.
            </summary>
        </member>
        <member name="T:_INNO._File.InnoIni">
            <summary>
            InnoFileIni 클래스
            </summary>
        </member>
        <member name="M:_INNO._File.InnoIni.#ctor(System.Boolean)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoIni.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoIni.#ctor(System.String)">
            <summary>
            생성자
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.SetCommentSeparator(System.String)">
            <summary>
            "Key=Value`Comment" 조합에서 주석 시작 구분자를 설정합니다. (기본 = `)
            </summary>
            <param name="commentSeparator"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.GetCommentSeparator">
            <summary>
            "Key=Value`Comment" 조합에서 현재 설정된 주석 시작 구분자를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._File.InnoIni.Key">
            <summary>
            InnoIni의 키 접근 클래스.
            </summary>
        </member>
        <member name="M:_INNO._File.InnoIni.Key.#ctor(System.String)">
            <summary>
            생성자
            </summary>
            <param name="section"></param>
        </member>
        <member name="P:_INNO._File.InnoIni.Key.Item(System.String)">
            <summary>
            지정한 키가 있는 엔트리의 값을 가져옵니다.<br/>
            <code>
            InnoIni["SEC"]["KEY"] = 3.3; 과 같이 object 타입으로 다양한 타입의 값을 쓸 수 있으며<br/>
            double d = InnoIni["SEC"]["KEY"].ToDouble(); 와 같이 값을 가져올 수 있습니다.
            </code>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:_INNO._File.InnoIni.Key.Item(System.Int32)">
            <summary>
            지정한 인덱스가 있는 엔트리의 값을 가져옵니다.
            </summary>
            <param name="keyIndex"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.Key.ReadComment(System.String)">
            <summary>
            주석을 읽습니다.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.Key.WriteComment(System.String,System.String)">
            <summary>
            주석을 씁니다.
            </summary>
            <param name="key"></param>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.Key.GetKeyCount">
            <summary>
            키의 개수를 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:_INNO._File.InnoIni.Item(System.String)">
            <summary>
            지정한 섹션 있는 엔트리의 Key 오브젝트를 가져옵니다.<br/>
            <code>
            InnoIni["SEC"]["KEY"] = 3.3; 과 같이 object 타입으로 다양한 타입의 값을 쓸 수 있으며<br/>
            double d = InnoIni["SEC"]["KEY"].ToDouble(); 와 같이 값을 가져올 수 있습니다.
            </code>
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="P:_INNO._File.InnoIni.Item(System.Int32)">
            <summary>
            지정한 인덱스가 있는 섹션의 Key 오브젝트를 가져옵니다.
            </summary>
            <param name="keyIndex"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.ReadFullString(System.String,System.String,System.String)">
            <summary>
            Section, Key에 해당하는 전체문자열(Value`Comment) 정보를 반환합니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns>
            값이 있으면, "Key=Value`Comment"에서 "Value`Comment" 문자열<br/>
            값이 없으면, 빈 문자열
            </returns>
        </member>
        <member name="M:_INNO._File.InnoIni.ReadString(System.String,System.String,System.String)">
            <summary>
            문자열 정보를 가져옵니다. ("Key=Value`Comment"의 경우 "Value"를 반환합니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.ReadComment(System.String,System.String,System.String)">
            <summary>
            코멘트를 가져옵니다. ("Key=Value`Comment"의 경우 "Comment"를 반환합니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.ReadInt32(System.String,System.String,System.Int32)">
            <summary>
            정보를 Int32 형태로 가져옵니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.ReadDouble(System.String,System.String,System.Double,System.String)">
            <summary>
            정보를 double 형태로 가져옵니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.ReadBool(System.String,System.String,System.Boolean)">
            <summary>
            정보를 bool 형태로 가져옵니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteFullString(System.String,System.String,System.String)">
            <summary>
            문자열 전체 정보를 그대로 저장합니다. (Comment 정보 자체가 삭제됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteString(System.String,System.String,System.String)">
            <summary>
            문자열 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteString(System.String,System.String,System.String,System.String)">
            <summary>
            문자열 정보를 저장합니다. ("Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="comment"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteComment(System.String,System.String,System.String)">
            <summary>
            코멘트 정보를 저장합니다. (Value 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="comment"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteDouble(System.String,System.String,System.Double,System.String)">
            <summary>
            double 형태의 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="fullPath"></param>
            <param name="format"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteDouble(System.String,System.String,System.Double,System.String,System.String)">
            <summary>
            double 형태의 정보를 저장합니다. ("Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="comment"></param>
            <param name="format"></param>
            <param name="comment"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteInt32(System.String,System.String,System.Int32)">
            <summary>
            Int32 형태의 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteInt32(System.String,System.String,System.Int32,System.String)">
            <summary>
            Int32 형태의 정보를 저장합니다. ("Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="comment"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteBool(System.String,System.String,System.Boolean)">
            <summary>
            bool 형태의 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteBool(System.String,System.String,System.Boolean,System.String)">
            <summary>
            bool 형태의 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="comment"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.ReadSectionList">
            <summary>
            모든 섹션 목록을 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.GetSectionIndex(System.String)">
            <summary>
            섹션 이름이 위치하는 섹션의 인덱스를 반환합니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.GetSection(System.Int32)">
            <summary>
            지정한 섹션 인덱스 위치의 섹션명을 반환합니다.
            </summary>
            <param name="sectionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.GetSectionCount">
            <summary>
            섹션의 개수를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.WriteSection(System.String)">
            <summary>
            섹션 정보를 저장합니다.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.DeleteSection(System.String)">
            <summary>
            섹션을 삭제합니다. (섹션 내 정보 모두 삭제됩니다.)
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.DeleteAllSections">
            <summary>
            모든 섹션을 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._File.InnoIni.CopySection(System.String,System.String)">
            <summary>
            섹션을 복사합니다. (기존 정보 존재하면 기존 내용이 모두 삭제되고 새로 생성됩니다.)
            </summary>
            <param name="section"></param>
            <param name="newSection"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.RenameSection(System.String,System.String)">
            <summary>
            섹션명을 변경합니다.
            </summary>
            <param name="oldSection"></param>
            <param name="newSection"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.IsSectionExists(System.String)">
            <summary>
            섹션의 존재여부를 가져옵니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.ReadKeyList(System.String)">
            <summary>
            특정 섹션의 모든 키 목록을 리턴합니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.GetKeyIndex(System.String,System.String)">
            <summary>
            키 이름이 위치하는 키의 인덱스를 반환합니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.GetKey(System.String,System.Int32)">
            <summary>
            지정한 키 인덱스 위치의 키 명을 반환합니다.
            </summary>
            <param name="section"></param>
            <param name="keyIndex"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.GetKeyCount(System.String)">
            <summary>
            특정 섹션의 Key 개수를 가져옵니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni.DeleteKey(System.String,System.String)">
            <summary>
            키를 삭제합니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.DeleteAllKeys(System.String)">
            <summary>
            모든 키를 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._File.InnoIni.CopyKey(System.String,System.String,System.String,System.String)">
            <summary>
            키를 복사합니다. (기존 정보 존재하면 기존 내용이 모두 삭제되고 새로 생성됩니다.)
            </summary>
            <param name="section"></param>
            <param name="newSection"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.RenameKey(System.String,System.String,System.String)">
            <summary>
            키를 변경합니다.
            </summary>
            <param name="section"></param>
            <param name="oldKey"></param>
            <param name="newKey"></param>
        </member>
        <member name="M:_INNO._File.InnoIni.IsKeyExists(System.String,System.String)">
            <summary>
            키의 존재여부를 가져옵니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._SetCommentSeparator(System.String)">
            <summary>
            (_정적) "Key=Value`Comment" 조합에서 주석 시작 구분자를 설정합니다. (기본 = `)
            </summary>
            <param name="commentSeparator"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._GetCommentSeparator">
            <summary>
            (_정적) "Key=Value`Comment" 조합에서 현재 설정된 주석 시작 구분자를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadFullString(System.String,System.String,System.String,System.String)">
            <summary>
            (_정적) 문자열 정보 전체를 가져옵니다. ("Key=Value`Comment"의 경우 "Value`Comment" 전체를 반환합니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="fullPath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadString(System.String,System.String,System.String,System.String)">
            <summary>
            (_정적) 문자열 정보를 가져옵니다. ("Key=Value`Comment"의 경우 "Value"를 반환합니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="fullPath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadComment(System.String,System.String,System.String,System.String)">
            <summary>
            (_정적) 코멘트를 가져옵니다. ("Key=Value`Comment"의 경우 "Comment"를 반환합니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="fullPath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadInt32(System.String,System.String,System.String,System.Int32)">
            <summary>
            (_정적) 정보를 Int32 형태로 가져옵니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="fullPath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadDouble(System.String,System.String,System.String,System.Double,System.String)">
            <summary>
            (_정적) 정보를 double 형태로 가져옵니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="fullPath"></param>
            <param name="defaultValue"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadBool(System.String,System.String,System.String,System.Boolean)">
            <summary>
            정보를 bool 형태로 가져옵니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="fullPath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteFullString(System.String,System.String,System.String,System.String)">
            <summary>
            (_정적) 문자열 전체 정보를 그대로 저장합니다. (Comment 정보 자체가 삭제됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteString(System.String,System.String,System.String,System.String)">
            <summary>
            (_정적) 문자열 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            (_정적) 문자열 정보를 저장합니다. ("Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="comment"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteComment(System.String,System.String,System.String,System.String)">
            <summary>
            (_정적) 코멘트 정보를 저장합니다. (Value 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="comment"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteDouble(System.String,System.String,System.Double,System.String,System.String)">
            <summary>
            (_정적) double 형태의 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="fullPath"></param>
            <param name="format"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteDouble(System.String,System.String,System.Double,System.String,System.String,System.String)">
            <summary>
            (_정적) double 형태의 정보를 저장합니다. ("Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="comment"></param>
            <param name="fullPath"></param>
            <param name="format"></param>
            <param name="comment"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteInt32(System.String,System.String,System.Int32,System.String)">
            <summary>
            (_정적) Int32 형태의 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteInt32(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            (_정적) Int32 형태의 정보를 저장합니다. ("Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="fullPath"></param>
            <param name="comment"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteBool(System.String,System.String,System.Boolean,System.String)">
            <summary>
            (_정적) bool 형태의 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteBool(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            (_정적) bool 형태의 정보를 저장합니다. (Comment 정보가 유지된 상태로 "Value`Comment"로 저장됩니다.)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="comment"></param>
            <param name="fullPath"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadSectionList(System.String)">
            <summary>
            모든 섹션 목록을 반환합니다.
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadSectionList(System.String[]@,System.String)">
            <summary>
            모든 섹션 정보를 가져오며, 섹션의 개수를 리턴합니다.
            </summary>
            <param name="sections"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._GetSectionCount(System.String)">
            <summary>
            섹션의 개수를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._WriteSection(System.String,System.String)">
            <summary>
            섹션 정보를 저장합니다.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._DeleteSection(System.String,System.String)">
            <summary>
            섹션을 삭제합니다. (섹션 내 정보 모두 삭제됩니다.)
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._DeleteAllSections(System.String)">
            <summary>
            모든 정보를 포함한 모든 섹션을 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._File.InnoIni._CopySection(System.String,System.String,System.String)">
            <summary>
            섹션을 복사합니다. (기존 정보 존재하면 기존 내용이 모두 삭제되고 새로 생성됩니다.)
            </summary>
            <param name="section"></param>
            <param name="newSection"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._RenameSection(System.String,System.String,System.String)">
            <summary>
            섹션명을 변경합니다.
            </summary>
            <param name="oldSection"></param>
            <param name="newSection"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._IsSectionExists(System.String,System.String)">
            <summary>
            섹션의 존재여부를 가져옵니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadKeyList(System.String,System.String)">
            <summary>
            특정 섹션의 모든 키 목록을 리턴합니다.
            </summary>
            <param name="fullPath"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._ReadKeyList(System.String,System.String[]@,System.String)">
            <summary>
            특정 섹션의 모든 키 정보를 가져오며, 키의 개수를 리턴합니다.
            </summary>
            <param name="section"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._GetKeyCount(System.String,System.String)">
            <summary>
            특정 섹션의 Key 개수를 가져옵니다.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoIni._DeleteKey(System.String,System.String,System.String)">
            <summary>
            키를 삭제합니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._DeleteAllKeys(System.String,System.String)">
            <summary>
            모든 키를 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._File.InnoIni._CopyKey(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            키를 복사합니다. (기존 정보 존재하면 기존 내용이 모두 삭제되고 새로 생성됩니다.)
            </summary>
            <param name="section"></param>
            <param name="newSection"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._RenameKey(System.String,System.String,System.String,System.String)">
            <summary>
            키를 변경합니다.
            </summary>
            <param name="section"></param>
            <param name="oldKey"></param>
            <param name="newKey"></param>
        </member>
        <member name="M:_INNO._File.InnoIni._IsKeyExists(System.String,System.String,System.String)">
            <summary>
            키의 존재여부를 가져옵니다.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._File.InnoLog">
            <summary>
            로그 지원 클래스입니다.<br/>
            <code>
            private void Form_Load(object sender, EventArgs e)
            {
                InnoLog innoLog = new InnoLog();
                innoLog.Add("로그 내용");
                innoLog.Init();
                innoLog.SetWriteFinishedCallback(WriteFinished);
                innoLog.AddQueue("큐에 로그 추가");
                innoLog.Deinit();
            }
            private void WriteFinished(object obj)
            {
                string log = obj as string; // 최종 로그에 기록된 내용
            }
            </code>
            ##############################<br/>
            # [클래스 선택 가이드]<br/>
            ##############################<br/>
            <list type="number">
            <item>InnoLog : 대부분의 상황에서 사용합니다.</item>
                <list type="bullet">
                <item>Init() 호출하면, 로그 쓰기를 QueueThread 기반으로 구동합니다.</item>
                <item>Init() 호출하지 않으면, 바로 로그 파일에 쓰기 방식으로 구동합니다. </item>
                </list>
            <item> InnoLogManager : InnoLog 기반이며 날짜별 폴더 관리가 필요 또는 LixBox LogControl 연동이 필요한 상황에서 사용합니다.</item>
            <item> InnoLogThread : Log()가 빈번히 호출되어야 하는 상황이거나, 로그의 내용이 커서 추가 시간이 오래 걸리는 경우 사용합니다.</item>
                <list type="bullet">
                    <item>InnoLogThread는 로그 추가시 QueueThread => 로그 쓰기시 QueueThread 기반으로 동작합니다.</item>
                </list>
            </list>
            </summary>
        </member>
        <member name="T:_INNO._File.InnoLog.WriteFinishedCallbackObject">
            <summary>
            Object 콜백 이벤트
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:_INNO._File.InnoLog.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLog.Init(System.Boolean)">
            <summary>
            초기화
            </summary>
            <param name="useQueueThread"></param>
        </member>
        <member name="M:_INNO._File.InnoLog.Deinit">
            <summary>
            초기화 해제
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLog.SetWriteFinishedCallback(_INNO._File.InnoLog.WriteFinishedCallbackObject,System.Object)">
            <summary>
            로그 쓰기 루틴이 완료되면 호출되는 콜백 메소드를 설정합니다.
            </summary>
            <param name="deleCallbackObject"></param>
            <param name="obj"></param>
        </member>
        <member name="M:_INNO._File.InnoLog.Add(System.String,System.Boolean)">
            <summary>
            로그 추가<br/>
            addDateTime = true 설정시, 로그 앞에 날짜가 자동 삽입됩니다. {yyyy-MM-dd HH:mm:ss.fff} 
            </summary>
            <param name="log"></param>
            <param name="addDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoLog.AddQueue(System.String,System.Boolean)">
            <summary>
            로그를 Queue에 추가합니다.<br/>
            QueueThread가 설정되지 않은 경우(Init() 미호출), 바로 파일에 로그를 기록합니다.<br/>
            addDateTime = true 설정시, 로그 앞에 날짜가 자동 삽입됩니다. {yyyy-MM-dd HH:mm:ss.fff} 
            </summary>
            <param name="log"></param>
            <param name="addDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._File.OtherExample_Log.OtherExample.InnoSystemFileLogQueueWriter">
            <summary>
            A Logging class implementing the Singleton pattern and an internal Queue to be flushed perdiodically
            </summary>
        </member>
        <member name="M:_INNO._File.OtherExample_Log.OtherExample.InnoSystemFileLogQueueWriter.#ctor">
            <summary>
            Private constructor to prevent instance creation
            </summary>
        </member>
        <member name="P:_INNO._File.OtherExample_Log.OtherExample.InnoSystemFileLogQueueWriter.Instance">
            <summary>
            An LogWriter instance that exposes a single instance
            </summary>
        </member>
        <member name="M:_INNO._File.OtherExample_Log.OtherExample.InnoSystemFileLogQueueWriter.WriteToLog(System.String)">
            <summary>
            The single instance method that writes to the log file
            </summary>
            <param name="message">The message to write to the log</param>
        </member>
        <member name="M:_INNO._File.OtherExample_Log.OtherExample.InnoSystemFileLogQueueWriter.FlushLog">
            <summary>
            Flushes the Queue to the physical log file
            </summary>
        </member>
        <member name="T:_INNO._File.OtherExample_Log.OtherExample.InnoSystemFileLogQueueElement">
            <summary>
            A Log class to store the message and the Date and Time the log entry was created
            </summary>
        </member>
        <member name="T:_INNO._File.InnoLogManager">
            <summary>
            InnoLog의 확장 클래스입니다.<br/>
            1) 년/월/일 폴더 자동 연동 기능<br/>
            2) 특정 시간동안 미호출시 빈칸 추가 기능<br/>
            3) ListBox 컨트롤을 추가하여 자동 연동 기능<br/>
            <br/>
            ##############################<br/>
            # [클래스 선택 가이드]<br/>
            ##############################<br/>
            <list type="number">
            <item>InnoLog : 대부분의 상황에서 사용합니다.</item>
                <list type="bullet">
                <item>Init() 호출하면, 로그 쓰기를 QueueThread 기반으로 구동합니다.</item>
                <item>Init() 호출하지 않으면, 바로 로그 파일에 쓰기 방식으로 구동합니다. </item>
                </list>
            <item> InnoLogManager : InnoLog 기반이며 날짜별 폴더 관리가 필요 또는 LixBox LogControl 연동이 필요한 상황에서 사용합니다.</item>
            <item> InnoLogThread : Log()가 빈번히 호출되어야 하는 상황이거나, 로그의 내용이 커서 추가 시간이 오래 걸리는 경우 사용합니다.</item>
                <list type="bullet">
                    <item>InnoLogThread는 로그 추가시 QueueThread => 로그 쓰기시 QueueThread 기반으로 동작합니다.</item>
                </list>
            </list>
            </summary>
        </member>
        <member name="F:_INNO._File.InnoLogManager.callerMethodDepth">
            <summary>
            0 = GetStackTraceXXX()
            1 = Log()
            2 = Log()를 호출한 Method()
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLogManager.SetAddDataTime(System.Boolean)">
            <summary>
            날짜시간을 줄 앞에 자동 삽입할지 여부를 설정합니다.<br/>
            형식: {yyyy-MM-dd HH:mm:ss.fff} 로그내용
            </summary>
            <param name="addDataTime"></param>
        </member>
        <member name="M:_INNO._File.InnoLogManager.#ctor(System.Boolean)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLogManager.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLogManager.Init(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            초기화
            </summary>
            <param name="logRoot"></param>
            <param name="subFolder"></param>
            <param name="prefix"></param>
            <param name="postfix"></param>
            <param name="fileTimeFormat"></param>
        </member>
        <member name="M:_INNO._File.InnoLogManager.Deinit">
            <summary>
            초기화 해제
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLogManager.AttachLogControl(System.Windows.Forms.ListBox)">
            <summary>
            로그 컨트롤(ListBox)를 붙여줍니다. (로그 추가시 자동 연동)
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._File.InnoLogManager.SetAutoSpace(System.Boolean,System.Double)">
            <summary>
            자동 빈칸 : 특정 시간 간격 이내의 연속된 로그가 아니면 빈칸 추가.
            </summary>
            <param name="useAutoSpace"></param>
            <param name="waitSeconds"></param>
        </member>
        <member name="M:_INNO._File.InnoLogManager.IsAutoSpaceUse">
            <summary>
            자동 빈칸 기능 사용 여부 : 특정 시간 간격 이내의 연속된 로그가 아니면 빈칸 추가 사용여부 리턴.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoLogManager.GetAutoSpaceWaitSeconds">
            <summary>
            자동 빈칸 설정된 시간 간격 리턴.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoLogManager.SetCallerMethodDepth(System.Int32)">
            <summary>
            0 = GetStackTraceXXX()를 의미하므로 사용 의미 없음.<br/>
            1 = Log()를 의미하므로 사용 의미 없음.<br/>
            2 = Log()를 호출한 Method()를 의미. 이걸 남기기 위한 것이니 무조건 디폴트면 되지 않을까???
            </summary>
            <param name="depth"></param>
        </member>
        <member name="M:_INNO._File.InnoLogManager.Log(System.String,System.String)">
            <summary>
            로그를 추가합니다.
            </summary>
            <param name="log"></param>
            <param name="logType">5 글자내 문자열.</param>
        </member>
        <member name="T:_INNO._File.InnoLogThread">
            <summary>
            ##############################<br/>
            # [클래스 선택 가이드]<br/>
            ##############################<br/>
            <list type="number">
            <item>InnoLog : 대부분의 상황에서 사용합니다.</item>
                <list type="bullet">
                <item>Init() 호출하면, 로그 쓰기를 QueueThread 기반으로 구동합니다.</item>
                <item>Init() 호출하지 않으면, 바로 로그 파일에 쓰기 방식으로 구동합니다. </item>
                </list>
            <item> InnoLogManager : InnoLog 기반이며 날짜별 폴더 관리가 필요 또는 LixBox LogControl 연동이 필요한 상황에서 사용합니다.</item>
            <item> InnoLogThread : Log()가 빈번히 호출되어야 하는 상황이거나, 로그의 내용이 커서 추가 시간이 오래 걸리는 경우 사용합니다.</item>
                <list type="bullet">
                    <item>InnoLogThread는 로그 추가시 QueueThread => 로그 쓰기시 QueueThread 기반으로 동작합니다.</item>
                </list>
            </list>
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLogThread.SetAddDataTime(System.Boolean)">
            <summary>
            날짜시간을 줄 앞에 자동 삽입할지 여부를 설정합니다.<br/>
            형식: {yyyy-MM-dd HH:mm:ss.fff} 로그내용
            </summary>
            <param name="addDataTime"></param>
        </member>
        <member name="M:_INNO._File.InnoLogThread.#ctor(System.Boolean)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLogThread.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLogThread.Init(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            초기화
            </summary>
            <param name="logRoot"></param>
            <param name="subFolder"></param>
            <param name="prefix"></param>
            <param name="postfix"></param>
            <param name="fileTimeFormat"></param>
        </member>
        <member name="M:_INNO._File.InnoLogThread.Deinit">
            <summary>
            초기화 해제
            </summary>
        </member>
        <member name="M:_INNO._File.InnoLogThread.AttachLogControl(System.Windows.Forms.ListBox)">
            <summary>
            로그 컨트롤(ListBox)를 붙여줍니다. (로그 추가시 자동 연동)
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._File.InnoLogThread.SetAutoSpace(System.Boolean,System.Double)">
            <summary>
            자동 빈칸 : 특정 시간 간격 이내의 연속된 로그가 아니면 빈칸 추가.
            </summary>
            <param name="useAutoSpace"></param>
            <param name="waitSeconds"></param>
        </member>
        <member name="M:_INNO._File.InnoLogThread.IsAutoSpaceUse">
            <summary>
            자동 빈칸 기능 사용 여부 : 특정 시간 간격 이내의 연속된 로그가 아니면 빈칸 추가 사용여부 리턴.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoLogThread.GetAutoSpaceWaitSeconds">
            <summary>
            자동 빈칸 설정된 시간 간격 리턴.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoLogThread.Log(System.String,System.String)">
            <summary>
            로그를 추가합니다.
            </summary>
            <param name="log"></param>
            <param name="logType">5 글자내 문자열.</param>
        </member>
        <member name="M:_INNO._File.MemoryMappedFileView.WriteSerialize(System.Object)">
            <summary>
            Serializes the data and writes it to the file.
            </summary>
            <param name="data">The data to serialize.</param>
        </member>
        <member name="M:_INNO._File.MemoryMappedFileView.WriteSerialize(System.Object,System.Int32)">
            <summary>
            Serializes the data and writes it to the file.
            </summary>
            <param name="data">The data to serialize.</param>
            <param name="offset">The position in the file to start.</param>
        </member>
        <member name="M:_INNO._File.MemoryMappedFileView.WriteSerialize(System.Object,System.Int32,System.Int32)">
            <summary>
            Serializes the data and writes it to the file.
            </summary>
            <param name="data">The data to serialize.</param>
            <param name="offset">The position in the file to start.</param>
            <param name="length">The buffer size in bytes.</param>
        </member>
        <member name="T:_INNO._File.InnoXml">
            <summary>
            InnoFileXml 클래스
            </summary>
        </member>
        <member name="M:_INNO._File.InnoXml.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._File.InnoXml.#ctor(System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="_xmlPath"></param>
            <param name="_xmlFileName"></param>
        </member>
        <member name="M:_INNO._File.InnoXml._ExampleShow">
            <summary>
            예제 코드를 보여줍니다.
            </summary>
        </member>
        <member name="M:_INNO._File.InnoXml.Open(System.String,System.String)">
            <summary>
            파일 열기
            </summary>
            <param name="_xmlPath"></param>
            <param name="_xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.CreateRoot(System.String)">
            <summary>
            루트를 생성합니다.
            </summary>
            <param name="_rootName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.CreateRoot(System.String,System.String,System.String)">
            <summary>
            루트를 생성합니다.
            </summary>
            <param name="_rootName"></param>
            <param name="_attrId"></param>
            <param name="_attrValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.CreateNode(System.Xml.XmlNode,System.String)">
            <summary>
            노드를 생성합니다.
            </summary>
            <param name="_parentNode"></param>
            <param name="_childNodeName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.CreateNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            노드를 생성합니다.
            </summary>
            <param name="_parentNode"></param>
            <param name="_key"></param>
            <param name="_value"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.CreateNode(System.Xml.XmlNode,System.String,System.String,System.String,System.String)">
            <summary>
            노드를 생성합니다.
            </summary>
            <param name="_parentNode"></param>
            <param name="_key"></param>
            <param name="_value"></param>
            <param name="_attrId"></param>
            <param name="_attrValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.CreateNode(System.Xml.XmlNode,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            노드를 생성합니다.
            </summary>
            <param name="_parentNode"></param>
            <param name="_key"></param>
            <param name="_value"></param>
            <param name="_dicIdValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.EditNode(System.Xml.XmlNode,System.String)">
            <summary>
            노드를 수정합니다.
            </summary>
            <param name="_node"></param>
            <param name="_value"></param>
        </member>
        <member name="M:_INNO._File.InnoXml.EditNode(System.String,System.String,System.String)">
            <summary>
            노드를 수정합니다.
            </summary>
            <param name="_nodePath"></param>
            <param name="_key"></param>
            <param name="_value"></param>
        </member>
        <member name="M:_INNO._File.InnoXml.RemoveAll">
            <summary>
            모든 자식 노드 및 특성을 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._File.InnoXml.RemoveChildNodes(System.Xml.XmlNode)">
            <summary>
            특정 노드의 자식 노드 및 특성을 삭제합니다.
            </summary>
            <param name="_parentNode"></param>
        </member>
        <member name="M:_INNO._File.InnoXml.RemoveChildNodes(System.String)">
            <summary>
            노드 패스(/Root/Parent/ 등)의 자식 노드 및 특성을 삭제합니다.
            </summary>
            <param name="_nodePath"></param>
        </member>
        <member name="M:_INNO._File.InnoXml.RemoveNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            특정 노드의 지정된 자식 노드를 삭제합니다.
            </summary>
            <param name="_parentNode"></param>
            <param name="_node"></param>
        </member>
        <member name="M:_INNO._File.InnoXml.RemoveNode(System.String,System.String)">
            <summary>
            노드 패스(/Root/Parent/ 등)의 지정된 자식 노드를 삭제합니다.
            </summary>
            <param name="_nodePath"></param>
            <param name="_key"></param>
        </member>
        <member name="M:_INNO._File.InnoXml.ReplaceNode(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            특정 노드의 자식 노드를 대체합니다.
            </summary>
            <param name="_parentNode"></param>
            <param name="_oldNode"></param>
            <param name="_newNode"></param>
        </member>
        <member name="M:_INNO._File.InnoXml.Save">
            <summary>
            문서를 지정된 파일에 저장합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.SaveAs(System.String)">
            <summary>
            문서를 다른 이름으로 저장합니다.
            </summary>
            <param name="_newFileName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.Load(System.String)">
            <summary>
            문서를 로드합니다.
            </summary>
            <param name="_xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.GetValue(System.String,System.String,System.String)">
            <summary>
            특정 노드의 Data를 가져옵니다.
            </summary>
            <param name="_nodePath"></param>
            <param name="_key"></param>
            <param name="_defaultReturnValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File.InnoXml.GetKeyValueDict(System.String)">
            <summary>
            특정 노드의 자식 노드들을 Dictionary 형태로 가져옵니다.
            </summary>
            <param name="_nodePath"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._File._InnoFile">
            <summary>
            파일 관련 정적 클래스입니다.
            </summary>
        </member>
        <member name="M:_INNO._File._InnoFile._GetSearchedLineCount(System.String,System.String,System.Text.Encoding)">
            <summary>
            문자열이 포함된 행의 갯수를 반환합니다.
            </summary>
            <param name="fullPath"></param>
            <param name="searchWord"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._GetFileList(System.String,System.String)">
            <summary>
            정해진 경로의 파일 목록을 가져옵니다.
            </summary>
            <param name="path"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._GetIconFromFile(System.String)">
            <summary>
            파일에서 아이콘을 추출합니다.
            </summary>
            <param name="pathFileNameExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._ReadBinaryFile(System.String,System.Int32)">
            <summary>
            이진 코드로 파일을 읽어 바이트 배열을 가져옵니다.
            </summary>
            <param name="pathFileNameExt"></param>
            <param name="readCount"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._WriteBinaryFile(System.String,System.Byte[])">
            <summary>
            바이트 배열을 이진 코드로 파일에 저장합니다.
            </summary>
            <param name="pathFileNameExt"></param>
            <param name="data"></param>
        </member>
        <member name="M:_INNO._File._InnoFile._GetImageFromFile(System.String)">
            <summary>
            파일에서 이미지를 추출합니다.
            </summary>
            <param name="pathFileNameExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._GetImageFromFileResized(System.String,System.Int32,System.Int32)">
            <summary>
            파일에서 리사이즈된 이미지를 추출합니다.
            </summary>
            <param name="pathFileNameExt"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._GetIconFromImage(System.Drawing.Image)">
            <summary>
            이미지에서 아이콘을 추출합니다.
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._SaveIconFileFromImage(System.String,System.Drawing.Image)">
            <summary>
            이미지에서 아이콘을 추출하여 저장합니다.
            </summary>
            <param name="pathFileNameExt"></param>
            <param name="img"></param>
        </member>
        <member name="M:_INNO._File._InnoFile._CreateDirectory(System.String)">
            <summary>
            지정된 경로의 모든 디렉터리와 하위 디렉터리를 만듭니다.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._DeleteDirectory(System.String)">
            <summary>
            경로 삭제. (빈 폴더만 삭제됨)
            (예제) _DeleteDirectory("D:\Path"); // 전달된 경로를 삭제.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._DeleteFile(System.String)">
            <summary>
            파일 삭제
            (예제) _DeleteFile("D:\Path\FileName.txt"); // 전달된 경로의 파일을 삭제.
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._DeleteRecursively(System.IO.DirectoryInfo)">
            <summary>
            전달된 경로의 모든 폴더 및 파일 삭제
            (예제) DeleteRecursively(new DirectoryInfo("D:\Path"));
            </summary>
            <param name="baseDir"></param>
        </member>
        <member name="M:_INNO._File._InnoFile._GetRunningPath">
            <summary>
            실행 파일의 경로(실행 파일 이름 제외)를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._File._InnoFile._GetRunningPathFileName">
            <summary>
            실행 파일의 경로(실행 파일 이름 포함)를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._GetWorkingPath">
            <summary>
            현재 작업 디렉터리를 가져옵니다.
            1) 실행 파일을 바로 실행하는 경우, 실행 파일의 경로를 가져옵니다.
            2) 바로가기 등으로 실행시, 시스템 폴더 경로(C:\Windows\System32 등)를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._File._InnoFile._GetFolderList(System.String,System.String)">
            <summary>
            정해진 경로의 폴더 목록을 가져옵니다.
            </summary>
            <param name="path"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Lang.InnoLangAbstract">
            <summary>
            InnoLangAbstract 클래스
            </summary>
        </member>
        <member name="E:_INNO._Lang.InnoLangAbstract.LangChanged">
            <summary>
            LangChanged 이벤트
            </summary>
        </member>
        <member name="M:_INNO._Lang.InnoLangAbstract.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Lang.InnoLangAbstract.Language">
            <summary>
            현재 설정된 언어를 리턴합니다.
            "Lang"이 비어있으면 "default"를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Lang.InnoLangAbstract.Save(System.String)">
            <summary>
            현재 언어를 설정합니다.
            "lang"이 비어있으면 "default" 언어를 사용합니다.
            </summary>
            <param name="lang"></param>
        </member>
        <member name="M:_INNO._Lang.InnoLangAbstract.Change(System.String)">
            <summary>
            언어를 변경합니다.
            "lang"이 비어있으면 "default" 언어를 사용합니다.
            </summary>
            <param name="lang"></param>
        </member>
        <member name="M:_INNO._Lang.InnoLangAbstract.Apply(System.Windows.Forms.Form,_INNO._Data.InnoDictionary)">
            <summary>
            Form에 다국어 적용.
            </summary>
            <param name="f">다국어 적용할 Form</param>
            <param name="lang">Form마다 다른 언어를 적용하고자 할 경우 사용</param>
        </member>
        <member name="M:_INNO._Lang.InnoLangAbstract.Text(System.String,System.String,System.String,System.String)">
            <summary>
            특정 텍스트의 언어 정보 얻기
            </summary>
            <param name="group"></param>
            <param name="key"></param>
            <param name="defaultText"></param>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Lang.InnoLang">
            <summary>
            InnoLangCsv 클래스
            </summary>
        </member>
        <member name="T:_INNO._Lang.InnoLangXml">
            <summary>
            InnoLangXml 클래스
            </summary>
        </member>
        <member name="M:_INNO._Lang.InnoLangXml.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Lang.InnoLangXml.ApplyFormLanguage(System.Windows.Forms.Control,System.String)">
            <summary>
            다국어 지원 XML 파일을 로드합니다.
            </summary>
            <param name="_c"></param>
            <param name="lang">"ko" = /Language/ko.xml 파일을 사용합니다.</param>
        </member>
        <member name="M:_INNO._Lang.InnoLangXml.GetValue(System.String,System.String,System.String,System.String)">
            <summary>
            키에 해당하는 다국어 문자열을 가져옵니다.
            </summary>
            <param name="formName"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Lang.InnoLangCsv">
            <summary>
            InnoLangCsv 클래스
            </summary>
        </member>
        <member name="M:_INNO._Lang.InnoLangCsv.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Lang.InnoLangCsv.Language">
            <summary>
            현재 설정된 언어를 리턴합니다.
            "Lang"이 비어있으면 "default"를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Lang.InnoLangCsv.Save(System.String)">
            <summary>
            현재 언어를 저장합니다.
            "lang"이 비어있으면 "default" 언어를 사용합니다.
            </summary>
            <param name="lang"></param>
        </member>
        <member name="M:_INNO._Lang.InnoLangCsv.Apply(System.Windows.Forms.Form,System.String)">
            <summary>
            Form에 다국어 적용.
            </summary>
            <param name="f">다국어 적용할 Form</param>
            <param name="lang">Form마다 다른 언어를 적용하고자 할 경우 사용</param>
        </member>
        <member name="M:_INNO._Lang.InnoLangCsv.Text(System.String,System.String,System.String,System.String)">
            <summary>
            특정 텍스트의 언어 정보 얻기
            </summary>
            <param name="group"></param>
            <param name="key"></param>
            <param name="defaultText"></param>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Lang.InnoLangIni">
            <summary>
            InnoLangIni 클래스
            </summary>
        </member>
        <member name="M:_INNO._Lang.InnoLangIni.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Lang.InnoLangIni.GetCurrentLang">
            <summary>
            현재 설정된 언어를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Lang.InnoLangIni.SetCurrentLang(System.String)">
            <summary>
            언어를 설정합니다.
            </summary>
            <param name="lang"></param>
        </member>
        <member name="M:_INNO._Lang.InnoLangIni.ApplyFormLanguage(System.Windows.Forms.Form,System.String)">
            <summary>
            Form에 다국어 적용.
            </summary>
            <param name="f">다국어 적용할 Form</param>
            <param name="lang">Form마다 다른 언어를 적용하고자 할 경우 사용</param>
        </member>
        <member name="M:_INNO._Lang.InnoLangIni.GetLanguageText(System.String,System.String,System.String,System.String)">
            <summary>
            키로 설정된 다국어 문자열을 가져옵니다.
            </summary>
            <param name="group"></param>
            <param name="key"></param>
            <param name="defaultText"></param>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Machine.MachineControl">
            <summary>
            MachineControl 클래스
            </summary>
        </member>
        <member name="T:_INNO._Machine.MachineControl.MachineState">
            <summary>
            머신 상태
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.Unknown">
            <summary>
            알 수 없음
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.NotInitialized">
            <summary>
            초기화 되지 않음
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.Initializing">
            <summary>
            초기화중
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.Initialized">
            <summary>
            초기화 됨
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.Run">
            <summary>
            구동중
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.Pause">
            <summary>
            일시정지
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.Pausing">
            <summary>
            일시정지중
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.Fault">
            <summary>
            에러
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineState.EStop">
            <summary>
            비상 정지
            </summary>
        </member>
        <member name="T:_INNO._Machine.MachineControl.SeqResult">
            <summary>
            시퀀스 결과
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.SeqResult.NG">
            <summary>
            NG
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.SeqResult.Go">
            <summary>
            구동중
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.SeqResult.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.SeqResult.Complete">
            <summary>
            완벽 완료
            </summary>
        </member>
        <member name="T:_INNO._Machine.MachineControl.MachineRunMode">
            <summary>
            머신 구동모드
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineRunMode.Auto">
            <summary>
            자동 런
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineRunMode.Manual">
            <summary>
            수동 런
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl.MachineRunMode.PM">
            <summary>
            PM
            </summary>
        </member>
        <member name="E:_INNO._Machine.MachineControl.MachineStateChanged">
            <summary>
            머신 상태가 변경될 때 호출되는 이벤트
            </summary>
        </member>
        <member name="E:_INNO._Machine.MachineControl.LampBlink">
            <summary>
            블링크 상태일 때 호출되는 이벤트 (500ms 간격으로 호출됩니다)
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineControl._machineState">
            <summary>
            머신 상태
            </summary>
        </member>
        <member name="P:_INNO._Machine.MachineControl.RunMode">
            <summary>
            머신 구동모드
            </summary>
        </member>
        <member name="P:_INNO._Machine.MachineControl.ProcessThreadDelay">
            <summary>
            Process 스레드 딜레이
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.ProcessAlways">
            <summary>
            상시 구동 Process로 사용
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.ProcessPause">
            <summary>
            일시 정지 Process로 사용
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.ProcessInitialization">
            <summary>
            초기화 Process로 사용
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.ProcessAutoRun">
            <summary>
            자동 런 Process로 사용
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.ProcessManualRun">
            <summary>
            수동 런 Process로 사용
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.#ctor">
            <summary>
            MachineControl 생성자
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.Initialize">
            <summary>
            초기화를 진행합니다.
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.Terminate">
            <summary>
            종료합니다.
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineControl.SetMachineState(_INNO._Machine.MachineControl.MachineState)">
            <summary>
            머신 상태를 설정합니다.
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:_INNO._Machine.MachineControl.GetMachineState">
            <summary>
            머신 상태를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineControl.GetErrorQueueCount">
            <summary>
            에러 큐의 갯수를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineControl.EnqueueErrorItem(System.Int32)">
            <summary>
            에러 큐의 끝부분에 에러번호를 추가합니다.
            </summary>
            <param name="errID"></param>
        </member>
        <member name="M:_INNO._Machine.MachineControl.DequeueErrorItem">
            <summary>
            에러 큐의 시작부분에서 에러번호를 제거하며 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineControl.IsAutoRunEnable(_INNO._Machine.MachineControl.SeqResult)">
            <summary>
            자동 런 가능여부를 리턴합니다.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineControl.IsInitializeEnable(_INNO._Machine.MachineControl.SeqResult)">
            <summary>
            초기화 가능여부를 리턴합니다.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineControl.IsPauseEnable(_INNO._Machine.MachineControl.SeqResult)">
            <summary>
            일시정지 가능여부를 리턴합니다.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Machine.MachineUnit">
            <summary>
            MachineUnit 추상화 클래스
            </summary>
        </member>
        <member name="T:_INNO._Machine.MachineUnit.FnStep">
            <summary>
            FnXXX() 함수에서 사용되는 스텝
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.FnStep.Check">
            <summary>
            체크
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.FnStep.Action">
            <summary>
            실행
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.FnStep.ActionWait">
            <summary>
            실행 완료 대기
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.FnStep.Delay">
            <summary>
            지연 대기
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.FnStep.Settling">
            <summary>
            안착중
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.FnStep.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.FnStep.NG">
            <summary>
            NG
            </summary>
        </member>
        <member name="T:_INNO._Machine.MachineUnit.OriginStep">
            <summary>
            축 홈잉 단계
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.OriginStep.Check">
            <summary>
            체크
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.OriginStep.ServoOn">
            <summary>
            서보 ON
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.OriginStep.ServoOnCheck">
            <summary>
            서보 ON 체크
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.OriginStep.Origin">
            <summary>
            홈잉
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.OriginStep.OriginDelay">
            <summary>
            홈잉 지연 대기
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.OriginStep.OriginWait">
            <summary>
            홈잉 완료 대기
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.OriginStep.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit.OriginStep.NG">
            <summary>
            NG
            </summary>
        </member>
        <member name="E:_INNO._Machine.MachineUnit.ErrorRaise">
            <summary>
            ErrorRaiseEvent()로 에러 발생시 호출될 이벤트
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.ErrorRaiseEvent(System.Int32)">
            <summary>
            에러 이벤트를 발생시킵니다.
            </summary>
            <param name="id"></param>
        </member>
        <member name="E:_INNO._Machine.MachineUnit.InitMsgChanged">
            <summary>
            InitMsgChangedEvent()로 초기화 메시지 변경시 호출될 이벤트
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.InitMsgChangedEvent(System.String)">
            <summary>
            초기화 메시지 변경 이벤트를 발생시킵니다.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:_INNO._Machine.MachineUnit.LogDirName">
            <summary>
            로그 저장 폴더
            </summary>
        </member>
        <member name="P:_INNO._Machine.MachineUnit.LogUnitName">
            <summary>
            로그 저장에 사용될 유닛명 (유닛명_yyyyMMdd_HH.log 파일 생성)
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._step">
            <summary>
            SequenceXXX() 함수에서 사용되는 스텝
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._fnStep">
            <summary>
            FnXXX() 함수에서 사용되는 스텝
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._manualStep">
            <summary>
            ManualXXX() 함수에서 사용되는 스텝
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._motorCommandActionWaitTime">
            <summary>
            모터 명령 실행 대기시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._motorHomingWaitTime">
            <summary>
            모터 홈잉 대기시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._motorMovingWaitTime">
            <summary>
            모터 이동 대기시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._cylinderActionWaitTime">
            <summary>
            실린더 구동 대기시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._vacuumActionWaitTime">
            <summary>
            베큠 구동 대기시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._releaseDelayTime">
            <summary>
            해제 지연 시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._vacuumDetectTime">
            <summary>
            베큠 감지 시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._motorSettlingTime">
            <summary>
            모터 안착 시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._cylinderSettlingTime">
            <summary>
            실린더 안착 시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._vacuumSettlingTime">
            <summary>
            베큠 안착 시간
            </summary>
        </member>
        <member name="F:_INNO._Machine.MachineUnit._releaseSettlingTime">
            <summary>
            해제 안착 시간
            </summary>
        </member>
        <member name="P:_INNO._Machine.MachineUnit.Step">
            <summary>
            SequenceXXX() 함수에서 사용되는 스텝 (다른 유닛의 시퀀스 스텝을 확인할 때 사용합니다.)
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.RaiseEmergencyStop">
            <summary>
            비상정지 발생시 호출됩니다.
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.ResetEmergencyStop">
            <summary>
            비상정지 리셋시 호출됩니다.
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.IsInitialized">
            <summary>
            초기화 완료 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.InitializationCanceled">
            <summary>
            초기화 진행 취소시 호출됩니다.
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.ProcessAlways">
            <summary>
            상시 구동 Process로 사용
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.ProcessInitialization">
            <summary>
            초기화 Process로 사용
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.ProcessAutoRun">
            <summary>
            자동 런 Process로 사용
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.ProcessManualRun">
            <summary>
            수동 런 Process로 사용
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.Initialize">
            <summary>
            초기화를 진행합니다. (MachineLogger 스레드 시작)
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.Terminate">
            <summary>
            종료합니다. (MachineLogger 스레드 정지)
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.SetDebugLogPath(System.String)">
            <summary>
            디버그 로그 경로를 설정합니다.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.GetDebugLogPath">
            <summary>
            현재 설정된 디버그 로그 경로를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.DebugLog(System.String)">
            <summary>
            디버그 로그를 기록합니다.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.InitializeLog(System.String)">
            <summary>
            초기화 메시지 로그를 기록합니다.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.GetInitMsg">
            <summary>
            초기화 메시지를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.GetMachineState">
            <summary>
            머신 상태를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.ResetTactTime">
            <summary>
            택타임을 리셋합니다.
            </summary>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.GetTactTime">
            <summary>
            택타임을 리턴합니다. (초 세자리 문자열)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.DelayTime(System.Int32)">
            <summary>
            지연 시간만큼 기다립니다.
            </summary>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Machine.MachineUnit.ResetDelayTime">
            <summary>
            지연 시간을 리셋합니다.
            </summary>
        </member>
        <member name="T:_INNO._Net.InnoHttpBase">
            <summary>
            InnoNetHttpBase 클래스
            </summary>
        </member>
        <member name="M:_INNO._Net.SimpleHTTPServer.#ctor(System.String,System.Int32)">
            <summary>
            Construct server with given port.
            </summary>
            <param name="path">Directory path to serve.</param>
            <param name="port">Port of the server.</param>
        </member>
        <member name="M:_INNO._Net.SimpleHTTPServer.#ctor(System.String)">
            <summary>
            Construct server with suitable port.
            </summary>
            <param name="path">Directory path to serve.</param>
        </member>
        <member name="M:_INNO._Net.SimpleHTTPServer.Stop">
            <summary>
            Stop server and dispose all functions.
            </summary>
        </member>
        <member name="T:_INNO._Net.InnoHttpServer">
            <summary>
            InnoNetHttpServer 클래스
            </summary>
        </member>
        <member name="T:_INNO._Net.InnoTcpBaseByteArray">
            <summary>
            InnoNetTcpBaseByteArray 클래스 (Byte Array 기반 통신)
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBaseByteArray.#ctor">
            <summary>
            생성자 (_ReadQueue, _SendQueue 각 Max 1000개 설정)
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBaseByteArray.#ctor(System.Int32)">
            <summary>
            생성자 (_ReadQueue, _SendQueue의 Size 설정하며 생성
            </summary>
            <param name="queueSize"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBaseByteArray.ReadThread">
            <summary>
            ReadThread()
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBaseByteArray.SendQueue(System.Byte[])">
            <summary>
            바로 Send하지 않고 Queue에 담아 Send 하는 방식.
            OnSendQueueProcess()에서 Send() 호출하여 전송합니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBaseByteArray.Send(System.Byte[])">
            <summary>
            Data를 전송합니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBaseByteArray.SendRaw(System.Byte[])">
            <summary>
            Data를 전송합니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:_INNO._Net.InnoTcpClientSample">
            <summary>
            TcpClient Sample : Sample용으로만 사용하고, 정석적으로는 InnoNetTcpBase를 상속받는 클래스를 생성하여 사용하십시오.
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpClientSample._uiQueue">
            <summary>
            전체 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpClientSample._uiInfoQueue">
            <summary>
            Info 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpClientSample._uiErrorQueue">
            <summary>
            Error 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpClientSample._uiReadQueue">
            <summary>
            Read 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpClientSample._uiSendQueue">
            <summary>
            Send 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpClientSample.Start(System.String,System.Int32)">
            <summary>
            TCP 클라이언트를 시작합니다.
            </summary>
            <param name="ipAddr"></param>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpClientSample.Connect(System.String,System.Int32)">
            <summary>
            TCP 클라이언트를 시작합니다.
            </summary>
            <param name="ipAddr"></param>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpClientSample.Stop">
            <summary>
            TCP 클라이언트를 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpClientSample.SendCommand(System.String)">
            <summary>
            STX, ETX를 자동으로 붙이지 않고 전달된 data를 그대로 전송합니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpClientSample.OnInfo(System.Object,_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs)">
            <summary>
            정보가 변경되면 호출됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpClientSample.OnError(System.Object,_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs)">
            <summary>
            에러가 발생하면 호출됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpClientSample.OnReadQueueProcess(System.Object,System.EventArgs)">
            <summary>
            [STX]FULLDATA[ETX]가 정상적으로 수신되면 호출되는 Thread 함수입니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpClientSample.OnSendQueueProcess(System.Object,System.EventArgs)">
            <summary>
            SendQueue()를 사용하면 호출되는 Thread 함수입니다. (직접 전송하려면 Send()를 사용하세요.)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._Net.InnoTcpServerSample">
            <summary>
            TcpServer Sample : Sample용으로만 사용하고, 정석적으로는 InnoNetTcpBase를 상속받는 클래스를 생성하여 사용하십시오.
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpServerSample._uiQueue">
            <summary>
            전체 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpServerSample._uiInfoQueue">
            <summary>
            Info 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpServerSample._uiErrorQueue">
            <summary>
            Error 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpServerSample._uiReadQueue">
            <summary>
            Read 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpServerSample._uiSendQueue">
            <summary>
            Send 메시지 내용을 포함하는 Queue
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpServerSample.Start(System.Int32)">
            <summary>
            TCP 서버를 시작합니다.
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpServerSample.Stop">
            <summary>
            TCP 서버를 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpServerSample.SendCommand(System.String)">
            <summary>
            STX, ETX를 자동으로 붙이지 않고 전달된 data를 그대로 전송합니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpServerSample.OnInfo(System.Object,_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs)">
            <summary>
            정보가 변경되면 호출됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpServerSample.OnError(System.Object,_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs)">
            <summary>
            에러가 발생하면 호출됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpServerSample.OnReadQueueProcess(System.Object,System.EventArgs)">
            <summary>
            [STX]FULLDATA[ETX]가 정상적으로 수신되면 호출되는 Thread 함수입니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpServerSample.OnSendQueueProcess(System.Object,System.EventArgs)">
            <summary>
            SendQueue()를 사용하면 호출되는 Thread 함수입니다. (직접 전송하려면 Send()를 사용하세요.)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._Net.InnoSMTP">
            <summary>
            InnoNetSMTP 클래스
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoSMTP._SendEmailByGmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            G-Mail 계정을 사용하여 이메일을 발송합니다.
            </summary>
            <param name="from"></param>
            <param name="fromDisplayName"></param>
            <param name="to"></param>
            <param name="toDisplayName"></param>
            <param name="cc"></param>
            <param name="bcc"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
            <param name="userID"></param>
            <param name="userPW"></param>
            <param name="attachments"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoSMTP._SendEmailByNaver(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            네이버 계정을 사용하여 이메일을 발송합니다.
            </summary>
            <param name="from"></param>
            <param name="fromDisplayName"></param>
            <param name="to"></param>
            <param name="toDisplayName"></param>
            <param name="cc"></param>
            <param name="bcc"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
            <param name="userPW"></param>
            <param name="attachments"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoSMTP._SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            이메일을 발송합니다.
            </summary>
            <param name="from"></param>
            <param name="fromDisplayName"></param>
            <param name="to"></param>
            <param name="toDisplayName"></param>
            <param name="cc"></param>
            <param name="bcc"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="isBodyHtml"></param>
            <param name="smtpServer"></param>
            <param name="smtpServerPort"></param>
            <param name="userID"></param>
            <param name="userPW"></param>
            <param name="attachments"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Net._InnoNet">
            <summary>
            InnoNet 클래스
            </summary>
        </member>
        <member name="M:_INNO._Net._InnoNet._GetHostName">
            <summary>
            호스트 이름을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net._InnoNet._GetAllLocalIPv4(System.Net.NetworkInformation.NetworkInterfaceType)">
            <summary>
            모든 Local IPv4 정보를 가져옵니다.
            </summary>
            <param name="_type"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net._InnoNet._GetLocalIP">
            <summary>
            로컬 IP를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net._InnoNet._GetPublicIP">
            <summary>
            외부 IP를 가져옵니다. (인터넷 미접속시 로컬 IP를 가져옵니다.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net._InnoNet._GetMacAddress">
            <summary>
            사용중인 네트워크 어댑터중 첫번째 Mac Address를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net._InnoNet._GetMacAddressLargeUsage">
            <summary>
            사용중인 네트워크 어댑터중 사용량이 많은 네트워크 어댑터의 Mac Address를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net._InnoNet._GetMacAddressList">
            <summary>
            모든 사용중인 네트워크 어댑터의 Mac Address 목록을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net._InnoNet._IsMacAddressExist(System.String)">
            <summary>
            전달된 Mac Address가 모든 사용중인 네트워크 어댑터의 Mac Address에 존재하는지 여부를 체크합니다.
            </summary>
            <param name="macAddress"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Net.InnoTcpBase">
            <summary>
            InnoNetTcpBase 클래스 (ASCII 기반 통신. Unicode 미지원)
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase._ThreadJoinWait">
            <summary>
            Thread 종료 대기 시간
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase._ReadQueue">
            <summary>
            TCP에서 읽은 데이터를 보관하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase._SendQueue">
            <summary>
            TCP에 보낸 데이터를 보관하는 Queue
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase._isConnected">
            <summary>
            TCP 연결되었는지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase._isReadThreadRunning">
            <summary>
            ReadThread가 구동중인지 여부를 설정하거나 가져옵니다.
            Server는 Client 접속이 있는 상태에서 ReadThread()가 구동됩니다.
            Client는 Server로의 접속을 하면 ReadThread()가 구동됩니다.
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase._NetStream">
            <summary>
            Data를 전송하기 위한 NetworkStream 개체입니다.
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.#ctor">
            <summary>
            생성자 (_ReadQueue, _SendQueue 각 Max 1000개 설정)
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SetThreadJoinWait(System.Int32)">
            <summary>
            Thread 종료 대기 시간 설정
            </summary>
            <param name="milliSeconds"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.#ctor(System.Int32)">
            <summary>
            생성자 (_ReadQueue, _SendQueue의 Size 설정하며 생성
            </summary>
            <param name="queueSize"></param>
        </member>
        <member name="T:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs">
            <summary>
            정보 EventArgs
            </summary>
        </member>
        <member name="T:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode">
            <summary>
            정보 Code
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.NotConnected">
            <summary>
            접속되어 있지 않음
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.ServerStarted">
            <summary>
            서버 시작되지 않음
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.ServerStopped">
            <summary>
            서비 정지됨
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.ClientConnected">
            <summary>
            클라이언트 접속됨
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.Disconnected">
            <summary>
            접속 끊어짐
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.ClientStarted">
            <summary>
            클라이언트 시작됨
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.ClientStopped">
            <summary>
            클라이언트 정지됨
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.ReadQueueProcessStarted">
            <summary>
            ReadQueue Process가 시작됨
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.ServerAlreadyStarted">
            <summary>
            Server Already Started
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode.ClientAlreadyStarted">
            <summary>
            Client Already Started
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs.Code">
            <summary>
            정보 Code
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs.Message">
            <summary>
            정보 메시지
            </summary>
        </member>
        <member name="T:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs">
            <summary>
            에러 EventArgs
            </summary>
        </member>
        <member name="T:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode">
            <summary>
            에러 Code
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode.ListenThreadException">
            <summary>
            ListenThread Exception
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode.ConnectFail">
            <summary>
            접속 실패
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode.ReadThreadException">
            <summary>
            ReadThread Exception
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode.ReadQueueProcessThreadException">
            <summary>
            ReadQueueProcessThread Exception
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode.SendQueueProcessThreadException">
            <summary>
            SendQueueProcessThread Exception
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode.ReadDataParsingException">
            <summary>
            ReadDataParsing Exception
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode.SendException">
            <summary>
            Send Exception
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode.SendQueueException">
            <summary>
            Send Queue Exception
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs.Code">
            <summary>
            에러 Code
            </summary>
        </member>
        <member name="F:_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs.Message">
            <summary>
            에러 메시지
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.OnInfo(System.Object,_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs)">
            <summary>
            정보가 변경되면 호출됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.OnError(System.Object,_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs)">
            <summary>
            에러가 발생하면 호출됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.OnReadQueueProcess(System.Object,System.EventArgs)">
            <summary>
            // 전체 프로토콜(ex : [0x02][FULLDATA][0x03])이 정상적으로 수신되면 호출되는 Thread 함수입니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.OnSendQueueProcess(System.Object,System.EventArgs)">
            <summary>
            // SendQueue()를 사용하면 호출되는 Thread 함수입니다. (직접 전송하려면 Send()를 사용하십시오)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SetStartByte(System.Byte)">
            <summary>
            프로토콜의 시작 바이트 설정
            </summary>
            <param name="stx"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SetStartByteUse(System.Boolean)">
            <summary>
            프로토콜의 시작 바이트 사용 유무
            </summary>
            <param name="use"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.GetStartByte">
            <summary>
            프로토콜의 설정된 시작 바이트 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SetEndByte(System.Byte)">
            <summary>
            프로토콜의 끝 바이트 설정
            </summary>
            <param name="etx"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SetEndByteUse(System.Boolean)">
            <summary>
            프로토콜의 끝 바이트 사용 유무
            </summary>
            <param name="use"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.GetEndByte">
            <summary>
            프로토콜의 설정된 끝 바이트 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.Info(_INNO._Net.InnoTcpBase.InnoNetTcpInfoEventArgs._eCode,System.String)">
            <summary>
            OnInfo()를 발생시킵니다.
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.Error(_INNO._Net.InnoTcpBase.InnoNetTcpErrorEventArgs._eCode,System.String)">
            <summary>
            OnError()를 발생시킵니다.
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StartServer(System.Int32)">
            <summary>
            TCP Server 시작
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StartClient(System.String,System.Int32)">
            <summary>
            TCP Client 시작
            </summary>
            <param name="ipAddr"></param>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.CloseClient">
            <summary>
            서버에 접속된 Client 접속 종료
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StopServer">
            <summary>
            TCP Server 종료
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StopClient">
            <summary>
            TCP Client 종료
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StartConnectOnceThread(System.String,System.Int32)">
            <summary>
            _ClientSocket.GetStream() 단계에서 시간이 오래 걸린다. Thread로 구동함.
            </summary>
            <param name="ipAddr"></param>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StartListenThread(System.Int32)">
            <summary>
            ListenThread 시작
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StopListenThread">
            <summary>
            ListenThread 종료
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StartReadThread">
            <summary>
            ReadThread 시작
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StopReadThread">
            <summary>
            ReadThread 종료
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StartReadQueueProcessThread">
            <summary>
            ReadQueueProcessThread 시작
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StopReadQueueProcessThread">
            <summary>
            ReadQueueProcessThread 종료
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.ReadQueueProcessThread">
            <summary>
            OnReadQueueProcess()를 호출하는 Thread
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StartSendQueueProcessThread">
            <summary>
            ReadQueueProcessThread 시작
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.StopSendQueueProcessThread">
            <summary>
            SendQueueProcessThread 종료
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SendQueueProcessThread">
            <summary>
            OnSendQueueProcess()를 호출하는 Thread
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.ListenThread(System.Object)">
            <summary>
            ListenThread
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.ReadThread">
            <summary>
            ReadThread
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.IsReadThreadRunning">
            <summary>
            ReadThread가 구동중인지 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.IsServerRunning">
            <summary>
            ServerThread가 구동중인지 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.IsClientRunning">
            <summary>
            ClientThread가 구동중인지 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.IsRunning">
            <summary>
            Server 또는 Client가 구동중인지 여부를 자동으로 판단하고 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.IsConnected">
            <summary>
            연결 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SendQueue(System.String)">
            <summary>
            바로 Send하지 않고 Queue에 담아 Send 하는 방식.
            OnSendQueueProcess()에서 Send()시 설정된 STX, ETX를 결합하여 전송합니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.Send(System.String)">
            <summary>
            설정된 STX, ETX를 결합하여 전송합니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SendRaw(System.String)">
            <summary>
            STX, ETX를 붙이지 않고 data 날 것 그대로를 전송합니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SetFirstConnectUse(System.Boolean)">
            <summary>
            처음 접속하는 클라이언트의 연결을 유지합니다. (기본)
            SetFirstConnectUse(false)로 설정하면 마지막 접속하는 클라이언트의 연결을 유지하려고 합니다. (기존 접속 종료됩니다)
            </summary>
            <param name="useFirstConnect"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.IsFirstConnectUse">
            <summary>
            처음 접속 클라이언트의 연결 유지 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SetAutoReconnectUse(System.Boolean)">
            <summary>
            클라이언트 -&gt; 서버 : 자동 접속 기능 사용 여부를 설정합니다.
            </summary>
            <param name="use"></param>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.IsAutoReconnectUse">
            <summary>
            클라이언트 -&gt; 서버 : 자동 접속 기능 사용 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoTcpBase.SetAutoReconnectTimerInterval(System.Int32)">
            <summary>
            클라이언트 -&gt; 서버 : 자동 접속 반복 시도 시간을 설정합니다.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="T:_INNO._Net.InnoNetUDPServer">
            <summary>
            InnoNetUDPServer 클래스
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPServer.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPServer.Start">
            <summary>
            UDP 서버 시작합니다.
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPServer.Stop">
            <summary>
            UDP 서버 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPServer.AddSendString(System.String)">
            <summary>
            전송할 메시지 추가합니다.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPServer.GetRecvString">
            <summary>
            수신한 메시지 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPServer.SendingThreadCallback">
            <summary>
            sendQueue의 내용을 전송합니다.
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPServer.RecvingThreadCallback">
            <summary>
            수신된 정보를 recvQueue에 추가합니다.
            </summary>
        </member>
        <member name="T:_INNO._Net.InnoNetUDPClient">
            <summary>
            InnoNetUDPClient 클래스
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPClient.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPClient.Start(System.String,System.Int32)">
            <summary>
            UDP 클라이언트 시작합니다.
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPClient.Stop">
            <summary>
            UDP 클라이언트 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPClient.AddSendString(System.String)">
            <summary>
            전송할 메시지 추가합니다.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPClient.GetRecvString">
            <summary>
            수신된 메시지를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPClient.SendingThreadCallback">
            <summary>
            sendQueue의 Data를 전송합니다.
            </summary>
        </member>
        <member name="M:_INNO._Net.InnoNetUDPClient.RecvingThreadCallback">
            <summary>
            수신된 Data를 recvQueue에 추가합니다.
            </summary>
        </member>
        <member name="T:_INNO._Shape.InnoShapeUIViewer">
            <summary>
            InnoShapeUIViewer 클래스
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.Bm">
            <summary>
            PictureBox에 지정할 그림 그리는 Bitmap입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer._uiPointArray">
            <summary>
            UI에 표시될 Pixel 좌표들의 배열입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.PictureScale">
            <summary>
            확대/축소용 Scale입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer._mouseControllable">
            <summary>
            마우스 컨트롤 여부를 설정합니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer._mouseDown">
            <summary>
            마우스 클릭 다운 여부를 확인합니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer._mouseDownPos">
            <summary>
            마우스 클릭 다운 위치입니다.
            </summary>
        </member>
        <member name="T:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType">
            <summary>
            지원되는 Shape Object입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.NONE">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.DOT">
            <summary>
            점
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.LINE">
            <summary>
            라인
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.RECTANGLE">
            <summary>
            사각형
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.RECTANGLE_FILL">
            <summary>
            채워진 사각형
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.ELLIPSE">
            <summary>
            타원
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.ELLIPSE_FILL">
            <summary>
            채워진 타원
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.CIRCLE">
            <summary>
            원
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.CIRCLE_FILL">
            <summary>
            채워진 원
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObjectType.ARC">
            <summary>
            아크
            </summary>
        </member>
        <member name="T:_INNO._Shape.InnoShapeUIViewer.ShapeObject">
            <summary>
            ShapeObject 클래스
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObject.name">
            <summary>
            ShapeObject 이름입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObject.objType">
            <summary>
            ShapeObject 타입입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObject.pt">
            <summary>
            ShapeObject 위치들입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObject.text">
            <summary>
            ShapeObject 문자열입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObject.rgbPen">
            <summary>
            ShapeObject Pen 색상입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeUIViewer.ShapeObject.rgbBrush">
            <summary>
            ShapeObject Brush 색상입니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.ShapeObject.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.SetViewerBackColor(System.Drawing.Color)">
            <summary>
            뷰어의 배경색을 설정합니다.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.GetViewerBackColor">
            <summary>
            뷰어의 배경색을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.SetScale">
            <summary>
            뷰어의 스케일을 설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.SetScale(System.Single)">
            <summary>
            뷰어의 스케일을 설정합니다.
            </summary>
            <param name="picture_scale"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.Invalidate">
            <summary>
            뷰어를 다시 그립니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.ResetScale">
            <summary>
            뷰어의 스케일을 1:1로 재설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.Clear">
            <summary>
            모든 데이터를 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddData(_INNO._Shape.PointD,_INNO._Shape.PointD)">
            <summary>
            데이터를 추가합니다.
            </summary>
            <param name="pt1Array"></param>
            <param name="pt2Array"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddData(_INNO._Shape.PointD2)">
            <summary>
            데이터를 추가합니다.
            </summary>
            <param name="ptArray"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddData(_INNO._Shape.PointD2[])">
            <summary>
            데이터를 추가합니다.
            </summary>
            <param name="ptArray"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.SetData(_INNO._Shape.PointD2[])">
            <summary>
            데이터 배열을 설정합니다.
            </summary>
            <param name="ptArray"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.DrawAllShapeObjects(System.Drawing.Graphics)">
            <summary>
            모든 ShapeObject를 그립니다.
            </summary>
            <param name="gr"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeObject(_INNO._Shape.InnoShapeUIViewer.ShapeObject)">
            <summary>
            ShapeObject를 추가합니다.
            </summary>
            <param name="eo"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.EditShapeObject(_INNO._Shape.InnoShapeUIViewer.ShapeObject)">
            <summary>
            ShapeObject를 변경합니다.
            </summary>
            <param name="eo"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.GetShapeObject(System.Int32)">
            <summary>
            ShapeObject를 찾습니다.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.FindShapeObject(System.String)">
            <summary>
            ShapeObject를 찾습니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeObject(System.String,_INNO._Shape.InnoShapeUIViewer.ShapeObjectType,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeObject를 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="eoType"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeDot(System.String,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeDot를 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="pt"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeEllipse(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeEllipse를 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeEllipseFill(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeEllipseFill을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeCircle(System.String,_INNO._Shape.PointD,System.Double,System.String,System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeCircle을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptCenter"></param>
            <param name="radius"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeCircleFill(System.String,_INNO._Shape.PointD,System.Double,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeCircleFill을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptCenter"></param>
            <param name="radius"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeLine(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeLine을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeRectangle(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeRectangle을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.AddShapeRectangleFill(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeRectangleFill을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.DeleteShapeObject(System.String)">
            <summary>
            ShapeObject를 삭제합니다.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.DeleteAllShapeObjects">
            <summary>
            모든 ShapeObject를 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.GetShapeObjectPenColor(System.String)">
            <summary>
            ShapeObject의 Pen 색상을 가져옵니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.GetShapeObjectBrushColor(System.String)">
            <summary>
            ShapeObject의 Brush 색상을 가져옵니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.GetShapeObjectCount">
            <summary>
            ShapeObject의 개수를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.GetShapeObjectIndex(System.String)">
            <summary>
            ShapeObject를 가져옵니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.CheckExistShapeObject(System.String)">
            <summary>
            ShapeObject의 존재여부를 확인합니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.CalculateCoordinates(System.Collections.Generic.List{_INNO._Shape.PointD2}@)">
            <summary>
            Coordinates를 계산합니다.
            </summary>
            <param name="uiPointArray"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeUIViewer.CalculateUICoordinates">
            <summary>
            UI Coordinates를 계산합니다.
            </summary>
        </member>
        <member name="T:_INNO._Shape.InnoShapeBox">
            <summary>
            InnoShapeBox 클래스
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.GetReferenceLength">
            <summary>
            length 변수에 대한 참조를 리턴합니다.<br/>
            ref double d = ref GetReferenceLength(); d = 10.0; 으로 변경하면 InnoShapeBox내의 length값이 변화됩니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:_INNO._Shape.InnoShapeBox.Length">
            <summary>
            길이
            </summary>
        </member>
        <member name="P:_INNO._Shape.InnoShapeBox.Breadth">
            <summary>
            폭
            </summary>
        </member>
        <member name="P:_INNO._Shape.InnoShapeBox.Height">
            <summary>
            높이
            </summary>
        </member>
        <member name="P:_INNO._Shape.InnoShapeBox.Test">
            <summary>
            InnoObjectVariable에서 Test 접근 테스트..
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.op_Equality(_INNO._Shape.InnoShapeBox,_INNO._Shape.InnoShapeBox)">
            <summary>
            InnoShapeBox가 동일한지 여부를 확인합니다.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.op_Inequality(_INNO._Shape.InnoShapeBox,_INNO._Shape.InnoShapeBox)">
            <summary>
            InnoShapeBox가 다른지 여부를 확인합니다.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.Equals(System.Object)">
            <summary>
            InnoShapeBox가 동일한지 여부를 확인합니다.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.GetHashCode">
            <summary>
            인스턴스의 해시코드를 계산합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.IsAnyFieldNull">
            <summary>
            특정 필드(변수)가 null인지 여부를 확인합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.IsAnyPropertyNull">
            <summary>
            특정 프라퍼티가 null인지 여부를 확인합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.ToString">
            <summary>
            InnoShapeBox 정보를 문자열로 변환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeBox.IsSame(System.Object)">
            <summary>
            InnoShapeBox가 동일한지 여부를 확인합니다.
            </summary>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Shape.InnoShapeViewer">
            <summary>
            InnoShapeViewer 클래스
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.Bm">
            <summary>
            PictureBox에 지정할 그림 그리는 Bitmap입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.WorldWidth">
            <summary>
            그리기 영역 World Coordinates의 Width입니다.. 실제 구동시 UI에 배치된 Size를 가져와서 재설정됩니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.WorldHeight">
            <summary>
            그리기 영역 World Coordinates의 Height입니다.. 실제 구동시 UI에 배치된 Size를 가져와서 재설정됩니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer._RealPointArray">
            <summary>
            실제 포인트 좌표들의 배열입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer._uiPointArray">
            <summary>
            UI에 표시될 Pixel 좌표들의 배열입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.PictureScale">
            <summary>
            확대/축소용 Scale입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer._mouseControllable">
            <summary>
            마우스 컨트롤 여부를 설정합니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer._mouseDown">
            <summary>
            마우스 클릭 다운 여부를 확인합니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer._mouseDownPos">
            <summary>
            마우스 클릭 다운 위치입니다.
            </summary>
        </member>
        <member name="T:_INNO._Shape.InnoShapeViewer.ShapeObjectType">
            <summary>
            지원되는 Shape Object입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.NONE">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.DOT">
            <summary>
            점
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.LINE">
            <summary>
            라인
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.RECTANGLE">
            <summary>
            사각형
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.RECTANGLE_FILL">
            <summary>
            채워진 사각형
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.ELLIPSE">
            <summary>
            타원
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.ELLIPSE_FILL">
            <summary>
            채워진 타원
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.CIRCLE">
            <summary>
            원
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.CIRCLE_FILL">
            <summary>
            채워진 원
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObjectType.ARC">
            <summary>
            아크
            </summary>
        </member>
        <member name="T:_INNO._Shape.InnoShapeViewer.ShapeObject">
            <summary>
            ShapeObject 클래스
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObject.name">
            <summary>
            ShapeObject 이름입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObject.objType">
            <summary>
            ShapeObject 타입입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObject.pt">
            <summary>
            ShapeObject 위치들입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObject.text">
            <summary>
            ShapeObject 문자열입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObject.rgbPen">
            <summary>
            ShapeObject Pen 색상입니다.
            </summary>
        </member>
        <member name="F:_INNO._Shape.InnoShapeViewer.ShapeObject.rgbBrush">
            <summary>
            ShapeObject Brush 색상입니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.ShapeObject.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.SetViewerBackColor(System.Drawing.Color)">
            <summary>
            뷰어의 배경색을 설정합니다.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.GetViewerBackColor">
            <summary>
            뷰어의 배경색을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.SetScale">
            <summary>
            뷰어의 스케일을 설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.SetScale(System.Single)">
            <summary>
            뷰어의 스케일을 설정합니다.
            </summary>
            <param name="picture_scale"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.Invalidate">
            <summary>
            뷰어를 다시 그립니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.ResetScale">
            <summary>
            뷰어의 스케일을 1:1로 재설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.Clear">
            <summary>
            모든 데이터를 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddData(_INNO._Shape.PointD,_INNO._Shape.PointD)">
            <summary>
            데이터를 추가합니다.
            </summary>
            <param name="pt1Array"></param>
            <param name="pt2Array"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddData(_INNO._Shape.PointD2)">
            <summary>
            데이터를 추가합니다.
            </summary>
            <param name="ptArray"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddData(_INNO._Shape.PointD2[])">
            <summary>
            데이터를 추가합니다.
            </summary>
            <param name="ptArray"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.SetData(_INNO._Shape.PointD2[])">
            <summary>
            데이터 배열을 설정합니다.
            </summary>
            <param name="ptArray"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.DrawAllShapeObjects(System.Drawing.Graphics)">
            <summary>
            모든 ShapeObject를 그립니다.
            </summary>
            <param name="gr"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeObject(_INNO._Shape.InnoShapeViewer.ShapeObject)">
            <summary>
            ShapeObject를 추가합니다.
            </summary>
            <param name="eo"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.EditShapeObject(_INNO._Shape.InnoShapeViewer.ShapeObject)">
            <summary>
            ShapeObject를 변경합니다.
            </summary>
            <param name="eo"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.FindShapeObject(System.Int32)">
            <summary>
            ShapeObject를 찾습니다.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.FindShapeObject(System.String)">
            <summary>
            ShapeObject를 찾습니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeObject(System.String,_INNO._Shape.InnoShapeViewer.ShapeObjectType,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeObject를 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="eoType"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeDot(System.String,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeDot를 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="pt"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeEllipse(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeEllipse를 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeEllipseFill(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeEllipseFill을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeCircle(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeCircle을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeCircleFill(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeCircleFill을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeLine(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeLine을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeRectangle(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeRectangle을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.AddShapeRectangleFill(System.String,_INNO._Shape.PointD,_INNO._Shape.PointD,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            ShapeRectangleFill을 추가합니다.
            </summary>
            <param name="name"></param>
            <param name="ptStart"></param>
            <param name="ptEnd"></param>
            <param name="text"></param>
            <param name="rgbPen"></param>
            <param name="rgbBrush"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.DeleteShapeObject(System.String)">
            <summary>
            ShapeObject를 삭제합니다.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.DeleteAllShapeObjects">
            <summary>
            모든 ShapeObject를 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.GetShapeObjectPenColor(System.String)">
            <summary>
            ShapeObject의 Pen 색상을 가져옵니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.GetShapeObjectBrushColor(System.String)">
            <summary>
            ShapeObject의 Brush 색상을 가져옵니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.GetShapeObjectCount">
            <summary>
            ShapeObject의 개수를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.GetShapeObjectIndex(System.String)">
            <summary>
            ShapeObject를 가져옵니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.CheckExistShapeObject(System.String)">
            <summary>
            ShapeObject의 존재여부를 확인합니다.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.CalculateCoordinates(System.Collections.Generic.List{_INNO._Shape.PointD2}@,System.Collections.Generic.List{_INNO._Shape.PointD2}@)">
            <summary>
            Coordinates를 계산합니다.
            </summary>
            <param name="realPointArray"></param>
            <param name="uiPointArray"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer.CalculateUICoordinates">
            <summary>
            UI Coordinates를 계산합니다.
            </summary>
        </member>
        <member name="T:_INNO._Shape.InnoShapeViewer_Dots">
            <summary>
            InnoShapeViewer_Dots 클래스
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer_Dots.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer_Dots._ExampleShow">
            <summary>
            예제 코드를 보여줍니다.
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer_Dots.AddData(System.Double[],System.Double[])">
            <summary>
            데이터를 추가합니다.
            </summary>
            <param name="Xmms"></param>
            <param name="Ymms"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer_Dots.Off(System.Int32)">
            <summary>
            Off
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer_Dots.OffAll">
            <summary>
            모두 Off
            </summary>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer_Dots.On(System.Int32)">
            <summary>
            On
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:_INNO._Shape.InnoShapeViewer_Dots.SetCursor(System.Int32)">
            <summary>
            커서를 설정합니다.
            </summary>
            <param name="i"></param>
        </member>
        <member name="T:_INNO._Shape.PointD">
            <summary>
            PointD 클래스
            </summary>
        </member>
        <member name="F:_INNO._Shape.PointD.X">
            <summary>
            PointD.X
            </summary>
        </member>
        <member name="F:_INNO._Shape.PointD.Y">
            <summary>
            PointD.Y
            </summary>
        </member>
        <member name="M:_INNO._Shape.PointD.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.PointD.#ctor(System.Double,System.Double)">
            <summary>
            생성자
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:_INNO._Shape.PointD2">
            <summary>
            Point1, Point2를 가지는 클래스
            </summary>
        </member>
        <member name="F:_INNO._Shape.PointD2.X1">
            <summary>
            PointD2.X1
            </summary>
        </member>
        <member name="F:_INNO._Shape.PointD2.Y1">
            <summary>
            PointD2.Y1
            </summary>
        </member>
        <member name="F:_INNO._Shape.PointD2.X2">
            <summary>
            PointD2.X2
            </summary>
        </member>
        <member name="F:_INNO._Shape.PointD2.Y2">
            <summary>
            PointD2.Y2
            </summary>
        </member>
        <member name="M:_INNO._Shape.PointD2.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.PointD2.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.PointD2.#ctor(_INNO._Shape.PointD,_INNO._Shape.PointD)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.PointD2.#ctor(System.Double,System.Double)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:_INNO._Shape.RectangleD">
            <summary>
            RectangleD 클래스
            </summary>
        </member>
        <member name="F:_INNO._Shape.RectangleD.start">
            <summary>
            PointD.start
            </summary>
        </member>
        <member name="F:_INNO._Shape.RectangleD.end">
            <summary>
            PointD.end
            </summary>
        </member>
        <member name="M:_INNO._Shape.RectangleD.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Shape.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:_INNO._Shape._InnoShape">
            <summary>
            InnoShape 클래스
            </summary>
        </member>
        <member name="M:_INNO._Shape._InnoShape.CalculateMinMax(_INNO._Shape.PointD[])">
            <summary>
            모든 점들을 포함하는 RectangleD를 계산합니다.
            </summary>
            <param name="PTs"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape._InnoShape.CalculateMinMax(_INNO._Shape.PointD2[])">
            <summary>
            모든 점들을 포함하는 RectangleD를 계산합니다.
            </summary>
            <param name="PTs"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape._InnoShape.CalculateMinMax(System.Double[],System.Double[])">
            <summary>
            모든 점들을 포함하는 RectangleD를 계산합니다.
            </summary>
            <param name="Xs"></param>
            <param name="Ys"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape._InnoShape.CalculateMinMax(System.Collections.Generic.List{_INNO._Shape.PointD})">
            <summary>
            모든 점들을 포함하는 RectangleD를 계산합니다.
            </summary>
            <param name="ptArray"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Shape._InnoShape.CalculateMinMax(System.Collections.Generic.List{_INNO._Shape.PointD2})">
            <summary>
            모든 점들을 포함하는 RectangleD를 계산합니다.
            </summary>
            <param name="ptArray"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._System._InnoSystem">
            <summary>
            시스템 지원 정적 클래스입니다.
            </summary>
        </member>
        <member name="M:_INNO._System._InnoSystem._ExecuteProcess(System.String,System.String)">
            <summary>
            프로세스를 실행합니다.
            </summary>
            <param name="pathFile"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:_INNO._System._InnoSystem._RunProcess(System.String,System.String)">
            <summary>
            프로세스를 실행합니다.
            </summary>
            <param name="pathFile"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:_INNO._System._InnoSystem._KillProcess(System.String)">
            <summary>
            프로세스를 종료합니다.
            </summary>
            <param name="processName"></param>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetVersion(System.String)">
            <summary>
            어셈블리 파일의 버전 정보를 가져옵니다.<br/>
            ex) string version = GetVersion("_INNO.dll").ToString();<br/>
            ex) string version = GetVersion("Test.exe").ToString();<br/>
            </summary>
            <param name="fullPath">파일 전체 경로</param>
            <returns>버전</returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetSystemCode">
            <summary>
            자체 방식의 시스템 코드를 반환합니다.
            </summary>
        </member>
        <member name="M:_INNO._System._InnoSystem._FlushGarbageCollectorMemory">
            <summary>
            가비지 콜렉터의 메모리를 해제시킵니다.
            </summary>
        </member>
        <member name="M:_INNO._System._InnoSystem._SetScreenCapture_Enable(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            화면 캡쳐 방지 여부를 설정합니다. (폼을 지정하면 해당 폼 영역이 캡쳐 방지되고, 특정 컨트롤을 지정하면 해당 컨트롤 영역이 캡쳐 방지됩니다.)
            </summary>
            <param name="_c"></param>
            <param name="_enable"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._System._InnoSystem._Power">
            <summary>
            전원 관련 기능 제공 정적 클래스입니다.
            </summary>
        </member>
        <member name="M:_INNO._System._InnoSystem._UseCMDHistory(System.Boolean)">
            <summary>
            CMD 명령 이력 사용여부를 설정합니다.
            </summary>
            <param name="useHistory"></param>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetCMDHistoryPrev">
            <summary>
            CMD 이전 명령 이력을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetCMDHistoryNext">
            <summary>
            CMD 다음 명령 이력을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetCMDHistory">
            <summary>
            _CmdHistoryPos로 지정된 CMD 명령 이력를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._ExecuteCMD(System.String)">
            <summary>
            CMD 명령을 실행합니다.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._IsFileLocked(System.String)">
            <summary>
            파일이 잠긴 상태인지 여부를 확인합니다.
            </summary>
            <param name="pathFileNameExt"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._IsFileLocked(System.IO.FileInfo)">
            <summary>
            파일이 잠긴 상태인지 여부를 확인합니다.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._IsDebuggerAttached">
            <summary>
            디버거로 실행중인지 여부를 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetExeLocation">
            <summary>
            실행 파일의 전체 경로를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetExeName">
            <summary>
            모듈 이름을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetDllLocation">
            <summary>
            DLL 파일의 전체 경로를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetDllName">
            <summary>
            프로세스의 이름을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetExeBuildDateTimeStandard">
            <summary>
            실행 파일의 빌드 시간을 (주)북스 표준 형태로 가져옵니다. (AssemblyName VER.230102_182235)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetExeBuildDateTime">
            <summary>
            실행 파일의 빌드 시간을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetExeBuildDateTime_FormatString(System.String)">
            <summary>
            실행 파일의 빌드 시간을 특정 포맷으로 변환하여 가져옵니다.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetDllBuildDateTimeStandard">
            <summary>
            DLL 파일의 빌드 시간을 (주)북스 표준 형태로 가져옵니다. (DllName VER.230102_182235)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetDllBuildDateTime">
            <summary>
            DLL 파일의 빌드 시간을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetDllBuildDateTime_FormatString(System.String)">
            <summary>
            DLL 파일의 빌드 시간을 특정 포맷으로 변환하여 가져옵니다.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetModuleMemorySize">
            <summary>
            모듈 로드를 위한 메모리 크기를 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetDllFileVersion">
            <summary>
            파일 버전 번호를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetExeFileVersion">
            <summary>
            파일 버전 번호를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetExeFullPath">
            <summary>
            프로세스의 전체 경로를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetExePath">
            <summary>
            프로세스의 경로를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._GetMethodName(System.Int32)">
            <summary>
            지정된 스택 번호의 함수 이름을 가져옵니다.
            예시) void Test() { GetMethodName(1); } = "Test" // 1단계 이전 함수명
            n = 2는 2단계 이전 함수명을 가져옵니다.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._System._InnoSystem._CheckProcessRunning(System.String)">
            <summary>
            프로세스가 실행중인지 여부를 확인합니다.
            </summary>
            <param name="processName"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._System.InnoHotKey">
            <summary>
            InnoSystemHotKey 클래스
            </summary>
        </member>
        <member name="T:_INNO._System.InnoHotKey.ModifierKeys">
            <summary>
            특수키 Modifier Keys
            </summary>
        </member>
        <member name="F:_INNO._System.InnoHotKey.ModifierKeys.None">
            <summary>
            특수키 없음
            </summary>
        </member>
        <member name="F:_INNO._System.InnoHotKey.ModifierKeys.Alt">
            <summary>
            ALT 키
            </summary>
        </member>
        <member name="F:_INNO._System.InnoHotKey.ModifierKeys.Control">
            <summary>
            CONTROL 키
            </summary>
        </member>
        <member name="F:_INNO._System.InnoHotKey.ModifierKeys.Shift">
            <summary>
            SHIFT 키
            </summary>
        </member>
        <member name="F:_INNO._System.InnoHotKey.ModifierKeys.Win">
            <summary>
            윈도우 키
            </summary>
        </member>
        <member name="T:_INNO._System.InnoHotKey.HotKeyPressedEventArgs">
            <summary>
            HotKey가 눌렸을 때 발생하는 이벤트의 EventArgs
            </summary>
        </member>
        <member name="P:_INNO._System.InnoHotKey.HotKeyPressedEventArgs.Modifier">
            <summary>
            등록된 Modifier
            </summary>
        </member>
        <member name="P:_INNO._System.InnoHotKey.HotKeyPressedEventArgs.Key">
            <summary>
            등록된 Key
            </summary>
        </member>
        <member name="E:_INNO._System.InnoHotKey.HotKeyPressed">
            <summary>
            HotKey 눌림 이벤트
            </summary>
        </member>
        <member name="T:_INNO._System.InnoHotKey.HotKeyWindow">
            <summary>
            메시지 처리를 위한 내부 윈도우
            </summary>
        </member>
        <member name="M:_INNO._System.InnoHotKey.HotKeyWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            윈도우 메시지 통지를 받기위해 WndProc 오버라이드.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:_INNO._System.InnoHotKey.#ctor">
            <summary>
            InnoSystemHotKey 생성자
            </summary>
        </member>
        <member name="M:_INNO._System.InnoHotKey.RegisterHotKey(_INNO._System.InnoHotKey.ModifierKeys,System.Windows.Forms.Keys)">
            <summary>
            시스템에 HotKey를 등록합니다.
            </summary>
            <param name="modifier"></param>
            <param name="key"></param>
        </member>
        <member name="M:_INNO._System.InnoHotKey.UnregisterHotKey">
            <summary>
            시스템 HotKey를 해제합니다.
            </summary>
        </member>
        <member name="M:_INNO._System.InnoHotKey.Dispose">
            <summary>
            관리되지 않은 리소스의 확보, 해제 또는 다시 설정과 관련된 애플리케이션 정의 작업을 수행합니다.
            </summary>
        </member>
        <member name="T:_INNO._System.InnoFileWatcher">
            <summary>
            InnoSystemFileSystemWatcher 클래스
            </summary>
        </member>
        <member name="T:_INNO._System.InnoFileWatcher.FunctionPointer">
            <summary>
            파일 또는 디렉터리 생성,수정,삭제 이벤트 발생시 호출 받을 콜백 함수 구조입니다.
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._System.InnoFileWatcher.FunctionPointerRenamed">
            <summary>
            파일 또는 디렉터리 이름 변경 이벤트 발생시 호출 받을 콜백 함수 구조입니다.
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._System.InnoFileWatcher.FunctionPointerError">
            <summary>
            SystemWatcher 에러 이벤트 발생시 호출 받을 콜백 함수 구조입니다.
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._System.InnoFileWatcher.AddCreatedEventHandler(_INNO._System.InnoFileWatcher.FunctionPointer)">
            <summary>
            파일이나 디렉터리가 만들어질 경우에 호출될 함수를 등록합니다.
            </summary>
            <param name="funcCreated"></param>
        </member>
        <member name="M:_INNO._System.InnoFileWatcher.AddChangedEventHandler(_INNO._System.InnoFileWatcher.FunctionPointer)">
            <summary>
            파일이나 디렉터리가 변경될 경우에 호출될 함수를 등록합니다.
            </summary>
            <param name="funcChanged"></param>
        </member>
        <member name="M:_INNO._System.InnoFileWatcher.AddDeletedEventHandler(_INNO._System.InnoFileWatcher.FunctionPointer)">
            <summary>
            파일이나 디렉터리가 삭제될 경우에 호출될 함수를 등록합니다.
            </summary>
            <param name="funcDeleted"></param>
        </member>
        <member name="M:_INNO._System.InnoFileWatcher.AddRenamedEventHandler(_INNO._System.InnoFileWatcher.FunctionPointerRenamed)">
            <summary>
            파일이나 디렉터리의 이름이 바뀔 경우에 호출될 함수를 등록합니다.
            </summary>
            <param name="funcRenamed"></param>
        </member>
        <member name="M:_INNO._System.InnoFileWatcher.AddErrorEventHandler(_INNO._System.InnoFileWatcher.FunctionPointerError)">
            <summary>
            SystemWatcher 에러 발생시 호출될 함수를 등록합니다.
            </summary>
            <param name="funcError"></param>
        </member>
        <member name="M:_INNO._System.InnoFileWatcher.AddEventHandler(_INNO._System.InnoFileWatcher.FunctionPointer,_INNO._System.InnoFileWatcher.FunctionPointer,_INNO._System.InnoFileWatcher.FunctionPointer,_INNO._System.InnoFileWatcher.FunctionPointerRenamed,_INNO._System.InnoFileWatcher.FunctionPointerError)">
            <summary>
            파일이나 디렉터리의 생성, 변경, 삭제, 이름 변경, 에러시 호출될 함수를 등록합니다.
            </summary>
        </member>
        <member name="M:_INNO._System.InnoFileWatcher.InitWatcher(System.String,System.String)">
            <summary>
            초기화
            </summary>
            <param name="_path"></param>
            <param name="filter"></param>
        </member>
        <member name="T:_INNO._System.InnoSystem">
            <summary>
            InnoSystem 싱글턴 객체입니다. InnoSystem.Instance 또는 InnoSystem._전역함수() 를 사용하십시오.
            </summary>
        </member>
        <member name="M:_INNO._System.InnoSystem.Init(System.Boolean)">
            <summary>
            초기화
            </summary>
            <param name="useCollectSystemInfoThread"></param>
        </member>
        <member name="M:_INNO._System.InnoSystem.Deinit">
            <summary>
            초기화 해제
            </summary>
        </member>
        <member name="M:_INNO._System.InnoSystem.StartThread_CollectSystemInfo">
            <summary>
            CollectSystemInfo Thread를 시작합니다.
            </summary>
        </member>
        <member name="M:_INNO._System.InnoSystem.StopThread_CollectSystemInfo">
            <summary>
            CollectSystemInfo Thread를 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._System.InnoSystem.ManagementHelper.GetMACAddress">
            <summary>
            Returns MAC Address from first Network Card in Computer
            </summary>
            <returns>[string] MAC Address</returns>
        </member>
        <member name="M:_INNO._System.InnoSystem.ManagementHelper.GetCPUId">
            <summary>
            Return processorId from first CPU in machine
            </summary>
            <returns>[string] ProcessorId</returns>
        </member>
        <member name="T:_INNO._System.InnoSystem.SystemInfo">
            <summary>
            시스템 정보 데이터 관리 클래스.
            SystemEnvironment(환경 정보)와 SystemHardware(하드웨어 정보)로 구분하였다.
            </summary>
        </member>
        <member name="M:_INNO._System.InnoSystem.CollectSystemInfo">
            <summary>
            시스템 정보를 한번 취합합니다. (무분별한 대량의 제각각 호출을 제한하기 위함)
            .CollectSystemInfo(); -> .GetCpuiUsagePercent_System();을 호출하여 취득합니다.
            [자동화] _InnoSystem.Instance.StartThread_CollectSystemInfo(); 를 사용하면 됩니다.
            </summary>
        </member>
        <member name="M:_INNO._System.InnoSystem.GetSystemInfo_UniqueID">
            <summary>
            시스템의 유일한 ID를 가져옵니다. (현재 8자리)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System.InnoSystem.GetVolumeSerialNumber(System.String)">
            <summary>
            Volume의 시리얼번호를 가져옵니다. (현재 "C", "D" 드라이브를 지원합니다.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System.InnoSystem.GetCpuUsagePercent_System">
            <summary>
            시스템의 CPU 사용량을 가져옵니다. (백분율)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._System.InnoSystem.GetSystemUpTime_TotalSeconds">
            <summary>
            시스템이 켜진 시간을 초 단위로 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._Thread._InnoThread">
            <summary>
            InnoThread 클래스
            </summary>
        </member>
        <member name="M:_INNO._Thread._InnoThread._Sleep(System.Int32)">
            <summary>
            지정된 시간동안 현재 스레드를 일시 중단합니다.
            </summary>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:_INNO._Thread._InnoThread._Start(System.Delegate,System.Object[])">
            <summary>
            모든 형태의 메소드를 스레드로 실행합니다.<br/>
            추가적인 스레드 제어 메소드를 지원하지 않습니다. (외부에서 간단히 제어할 수 있습니다.)<br/>
            스레드 제어가 필요한 경우 InnoThreadCallback, InnoNameThread 사용을 고려하십시오.
            <code>
            // 반환값 없고 패러미터 없는 메소드 호출
            _InnoThread._Start((Action)InnoThread_Func1);
            // 반환값 없고 패러미터 있는 메소드 호출
            _InnoThread._Start((Action&lt;string, int&gt;)InnoThread_Func2, "name", 5);
            // 반환값 있고 패러미터 없는 메소드 호출
            _InnoThread._Start((Func&lt;bool&gt;)InnoThread_Func3);
            // 반환값 있고 패러미터 있는 메소드 호출
            _InnoThread._Start((Func&lt;string, int, bool&gt;)InnoThread_Func4, "name", 10);
            </code>
            </summary>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Thread.InnoThreadCallback">
            <summary>
            InnoThreadCallback 클래스
            </summary>
        </member>
        <member name="T:_INNO._Thread.InnoThreadCallback.Callback">
            <summary>
            콜백 이벤트
            </summary>
        </member>
        <member name="T:_INNO._Thread.InnoThreadCallback.CallbackObject">
            <summary>
            Object 콜백 이벤트
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:_INNO._Thread.InnoThreadCallback.SetCallback(_INNO._Thread.InnoThreadCallback.Callback)">
            <summary>
            콜백 함수를 설정합니다.
            </summary>
            <param name="deleCallback"></param>
        </member>
        <member name="M:_INNO._Thread.InnoThreadCallback.SetCallbackObject(_INNO._Thread.InnoThreadCallback.CallbackObject,System.Object)">
            <summary>
            Object 콜백 함수를 설정합니다.
            </summary>
            <param name="deleCallbackObject"></param>
            <param name="obj">전달할 Object</param>
        </member>
        <member name="M:_INNO._Thread.InnoThreadCallback.SetDelay(System.Int32)">
            <summary>
            Thread 딜레이 시간을 설정합니다.
            </summary>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:_INNO._Thread.InnoThreadCallback.Start">
            <summary>
            Thread를 시작합니다.
            </summary>
        </member>
        <member name="M:_INNO._Thread.InnoThreadCallback.Stop(System.Int32)">
            <summary>
            Thread를 정지합니다.
            </summary>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="T:_INNO._Thread.InnoThreadBackgroundWorker">
            <summary>
            InnoThreadBackgroundWorker 클래스
            </summary>
        </member>
        <member name="T:_INNO._Thread.InnoThreadBackgroundWorker.CallbackWork">
            <summary>
            Work 시작 콜백 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._Thread.InnoThreadBackgroundWorker.CallbackWorkCompleted">
            <summary>
            Work 완료 콜백 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._Thread.InnoThreadBackgroundWorker.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Thread.InnoThreadBackgroundWorker.SetCallback(_INNO._Thread.InnoThreadBackgroundWorker.CallbackWork)">
            <summary>
            BackgroundWorker 콜백 함수를 설정합니다.
            </summary>
            <param name="deleCallback"></param>
        </member>
        <member name="M:_INNO._Thread.InnoThreadBackgroundWorker.SetCompletedCallback(_INNO._Thread.InnoThreadBackgroundWorker.CallbackWorkCompleted)">
            <summary>
            BackgroundWorker 완료 콜백 함수를 설정합니다.
            </summary>
            <param name="deleCallback"></param>
        </member>
        <member name="M:_INNO._Thread.InnoThreadBackgroundWorker.Start(System.Object)">
            <summary>
            BackgroundWorker를 시작합니다.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:_INNO._Thread.InnoThreadBackgroundWorker.Stop">
            <summary>
            BackgroundWorker를 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Thread.InnoThreadBackgroundWorker.Pause">
            <summary>
            BackgroundWorker를 일시정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Thread.InnoThreadBackgroundWorker.Resume">
            <summary>
            BackgroundWorker를 계속 진행합니다.
            </summary>
        </member>
        <member name="E:_INNO._Thread.InnoThreadQueue`1.DoingJob">
            <summary>
            외부에서 실행할 작업을 함수로 만들어둔다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoPostIt">
            <summary>
            InnoPostIt 클래스
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPostIt.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPostIt.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_INNO._UI.InnoPostIt.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPostIt.#ctor">
            <summary>
            InnoPostIt 생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPostIt.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control.Paint 이벤트를 발생시킵니다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoPostIt.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Windows 메시지를 처리합니다.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:_INNO._UI.InnoSplashScreen">
            <summary>
            InnoSplashScreen 클래스
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoSplashScreen.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreen.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreen.SetCaption(System.String)">
            <summary>
            캡션을 설정합니다.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreen.SetTitle(System.String)">
            <summary>
            프로젝트 제목을 설정합니다.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreen.SetMessage(System.String)">
            <summary>
            세부 내용을 설정합니다.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="T:_INNO._UI.InnoFormVirtual">
            <summary>
            InnoUIFormVirtual 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual._ExampleShow">
            <summary>
            예제 코드를 보여줍니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual._ExampleString">
            <summary>
            Form에서 TimerVislbleRefresh_Tick()을 구현하여 사용하세요.
            해당 TimerVislbleRefresh_Tick()은 Form.Visible 상태에서만 호출됩니다.
            protected override void TimerVislbleRefresh_Tick(object sender, EventArgs e)
            {
            }
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnLoad(System.EventArgs)">
            <summary>
            Load 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            FormClosing 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnVisibleChanged(System.EventArgs)">
            <summary>
            VisibleChanged 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnReload(System.EventArgs)">
            <summary>
            Reload 이벤트 (폼이 Hide 상태에서 Show 되면 호출됩니다)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnHide(System.EventArgs)">
            <summary>
            Hide 이벤트 (폼이 Show 상태에서 Hide 되면 호출됩니다)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Reload">
            <summary>
            강제로 Reload 이벤트를 발생시킵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnResize(System.EventArgs)">
            <summary>
            Resize 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnMaximized(System.EventArgs)">
            <summary>
            Miximized 이벤트 (폼의 크기가 최대화되면 호출됩니다.)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnMinimized(System.EventArgs)">
            <summary>
            Minimized 이벤트 (폼의 크기가 최소화되면 호출됩니다.)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.OnNormalized(System.EventArgs)">
            <summary>
            Normalized 이벤트 (폼의 크기가 일반 상태로 돌아오면 호출됩니다.)<br/>
            [주의] 폼 생성 OnLoad() 이벤트가 호출되기 전부터 호출됩니다. (폼이 생성되었는지, 컨트롤이 생성되었는지를 보장하지 않습니다)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.SetInterval_TimerVisibleRefresh(System.Int32)">
            <summary>
            TimerVisibleRefresh의 Interval 시간 설정
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Start_TimerVisibleRefresh">
            <summary>
            TimerVisibleRefresh 시작
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Stop_TimerVisibleRefresh">
            <summary>
            TimerVisibleRefresh 정지
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.TimerVisibleRefreshStopAndGo_Tick(System.Object,System.EventArgs)">
            <summary>
            누적 Timer 메시지 호출을 방지하기 위해 StopAndGo 로 구동.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.TimerVisibleRefresh_Tick(System.Object,System.EventArgs)">
            <summary>
            Form.Visible 상태에서만 동작하는 Timer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.SetInterval_TimerRefresh(System.Int32)">
            <summary>
            TimerRefresh의 Interval 시간 설정
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Start_TimerRefresh">
            <summary>
            TimerRefresh 시작
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Stop_TimerRefresh">
            <summary>
            TimerRefresh 정지
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.TimerRefreshStopAndGo_Tick(System.Object,System.EventArgs)">
            <summary>
            누적 Timer 메시지 호출을 방지하기 위해 StopAndGo 로 구동.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.TimerRefresh_Tick(System.Object,System.EventArgs)">
            <summary>
            Start_TimerRefresh() 호출하면 Form.Visible 상태와 무관하게 항상 동작하는 Timer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.SetInterval_TimerVisibleElapsed(System.Int32)">
            <summary>
            TimerVisibleElapsed 의 Interval 시간 설정
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Start_TimerVisibleElapsed">
            <summary>
            TimerVisibleElapsed 시작
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Stop_TimerVisibleElapsed">
            <summary>
            TimerVisibleElapsed 정지
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.TimerVisibleElapsedStop_Tick(System.Object,System.EventArgs)">
            <summary>
            폼이 보여지고 특정시간이 경과하면 콜 됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.TimerVisibleElapsed_Tick(System.Object,System.EventArgs)">
            <summary>
            폼이 보여지고 특정시간이 경과하면 콜되는 Timer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.SetInterval_TimerHideElapsed(System.Int32)">
            <summary>
            TimerHideElapsed 의 Interval 시간 설정
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Start_TimerHideElapsed">
            <summary>
            TimerHideElapsed 시작
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.Stop_TimerHideElapsed">
            <summary>
            TimerHideElapsed 정지
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.TimerHideElapsedStop_Tick(System.Object,System.EventArgs)">
            <summary>
            폼이 숨겨지고 특정시간이 경과하면 콜 됩니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormVirtual.TimerHideElapsed_Tick(System.Object,System.EventArgs)">
            <summary>
            폼이 숨겨지고 특정시간이 경과하면 콜되는 Timer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoBox">
            <summary>
            InnoBox 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoBox.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control.Paint 이벤트를 발생시킵니다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.SetTopMost(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            부모 폼을 지정하며 TopMost 상태를 설정합니다.
            </summary>
            <param name="parentForm"></param>
            <param name="topMost"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.SetTopMost(System.Boolean)">
            <summary>
            TopMost 상태를 설정합니다.
            </summary>
            <param name="topMost"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.IsTopMost">
            <summary>
            TopMost 상태를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoBox.SetCaption(System.String)">
            <summary>
            MessageBox 상단 캡션을 설정합니다.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.SetButtonType(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            MessageBox 버튼 타입을 설정합니다. (현재 YesNo, OKCancel, OK를 지원합니다.)
            </summary>
            <param name="buttonType"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.Show(System.String,System.Nullable{System.Windows.Forms.MessageBoxButtons})">
            <summary>
            MessageBox를 보여줍니다.
            </summary>
            <param name="caption"></param>
            <param name="buttonType"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.ShowDialog(System.String,System.Nullable{System.Windows.Forms.MessageBoxButtons})">
            <summary>
            MessageBox를 Dialog로 보여줍니다. (부모 창 사용불가)
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoBox._CreateMessageBox(System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            MessageBox를 생성합니다.
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
            <param name="alignment"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoBox._Show(System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            MessageBox를 생성하며 보여줍니다.
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
            <param name="alignment"></param>
            <param name="font"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox._ShowDialog(System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            MessageBox를 생성하며 Dialog로 보여줍니다. (부모 창 사용불가)
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
            <param name="alignment"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoBox.SetCaptionColor(System.Drawing.Color,System.Nullable{System.Drawing.Color})">
            <summary>
            MessageBox 상단 캡션의 색상을 설정합니다.
            </summary>
            <param name="backColor"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.SetFormBackColor(System.Drawing.Color)">
            <summary>
            MessageBox의 배경색을 설정합니다.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.SetCopyButtonVisible(System.Boolean)">
            <summary>
            MessageBox의 [Copy] 버튼의 표시 여부를 설정합니다.
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:_INNO._UI.InnoBox.SetSize(System.Drawing.Size)">
            <summary>
            MessageBox의 크기를 설정합니다.
            </summary>
            <param name="size"></param>
        </member>
        <member name="F:_INNO._UI.InnoBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_INNO._UI.InnoBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoNotifyBox">
            <summary>
            InnoUIFormNotifyBox 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNotifyBox.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoNotifyBox.eType">
            <summary>
            NotifyBox 타입입니다.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoNotifyBox.eType.OK">
            <summary>
            성공
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoNotifyBox.eType.Warning">
            <summary>
            경고
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoNotifyBox.eType.Error">
            <summary>
            에러
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoNotifyBox.eType.Info">
            <summary>
            안내
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNotifyBox.ShowBox(System.String,_INNO._UI.InnoNotifyBox.eType,System.Int32,System.Int32,System.Nullable{System.Drawing.Size})">
            <summary>
            NotifyBox를 보여줍니다.
            </summary>
            <param name="msg"></param>
            <param name="type"></param>
            <param name="waitCloseInterval"></param>
        </member>
        <member name="F:_INNO._UI.InnoNotifyBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNotifyBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_INNO._UI.InnoNotifyBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoNumPad">
            <summary>
            InnoUIFormNumPad 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.#ctor(System.Windows.Forms.Control)">
            <summary>
            생성자
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.#ctor(System.Windows.Forms.ListViewItem.ListViewSubItem)">
            <summary>
            생성자
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            명령 키를 처리합니다. 현재 종료(X), 데이터삭제(Escape, Delete, Tilde, C), 입력(Enter)를 처리합니다.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.SetCaption(System.String)">
            <summary>
            NumPad의 캡션 문자열을 설정합니다.
            </summary>
            <param name="caption"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.SetTitle(System.String)">
            <summary>
            NumPad의 제목 문자열을 설정합니다.<br/>
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.SetInputText(System.String)">
            <summary>
            NumPad의 입력값을 설정합니다.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.ShowNumPad(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>
            NumPad를 띄울 때 Control을 지정하며 NumPad를 시작합니다. (설정값이 Contrl.Text로 자동 전달됩니다.)<br/>
            [환경안전] 사양을 위해 부모 폼을 사용할 수 있도록 합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.ShowNumPad(System.Windows.Forms.ListViewItem.ListViewSubItem,System.Boolean,System.Boolean)">
            <summary>
            NumPad를 띄울 때 Control을 지정하며 NumPad를 시작합니다. (설정값이 Contrl.Text로 자동 전달됩니다.)<br/>
            [환경안전] 사양을 위해 부모 폼을 사용할 수 있도록 합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.ShowNumPad(System.String,System.Boolean,System.Boolean)">
            <summary>
            NumPad를 띄울 때 전달된 값을 표시하며 NumPad를 시작합니다. (최종 입력된 값을 리턴합니다.)
            </summary>
            <param name="numValue"></param>
            <param name="usePassword"></param>
            <param name="topMost"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.OnShowNumPad(System.Object,System.EventArgs)">
            <summary>
            Control Event로 연결하는 이벤트 함수입니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.ShowNumPadDialog(System.Boolean)">
            <summary>
            NumPad를 시작합니다. (최종 입력된 값을 리턴합니다.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.ShowNumPadDialog(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            NumPad를 띄울 때 Control을 지정하며 NumPad를 시작합니다. (설정값이 Contrl.Text로 자동 전달됩니다.) (최종 입력된 값을 리턴합니다.)
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.ShowNumPadDialog(System.String,System.Boolean)">
            <summary>
            NumPad를 띄울 때 전달된 값을 표시하며 NumPad를 시작합니다. (최종 입력된 값을 리턴합니다.)
            </summary>
            <param name="numValue"></param>
            <param name="usePassword"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.OnShowNumPadDialog(System.Object,System.EventArgs)">
            <summary>
            Control Event로 연결하는 이벤트 함수입니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.GetInputNumber">
            <summary>
            NumPad에 입력된 값을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.UsePassword(System.Boolean,System.Char)">
            <summary>
            암호 문자로 마스킹하여 사용할지 여부를 설정합니다.
            </summary>
            <param name="usePassword"></param>
            <param name="passChar"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.SetTopMost(System.Boolean)">
            <summary>
            TopMost 상태를 설정합니다.
            </summary>
            <param name="topMost"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.SetTopMost(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            부모 폼을 지정하며 TopMost 상태를 설정합니다.
            </summary>
            <param name="parent"></param>
            <param name="topMost"></param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.IsTopMost">
            <summary>
            TopMost 상태를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="F:_INNO._UI.InnoNumPad.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_INNO._UI.InnoNumPad.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoMessageBox">
            <summary>
            InnoMessageBox 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control.Paint 이벤트를 발생시킵니다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetTopMost(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            부모 폼을 지정하며 TopMost 상태를 설정합니다.
            </summary>
            <param name="parentForm"></param>
            <param name="topMost"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetTopMost(System.Boolean)">
            <summary>
            TopMost 상태를 설정합니다.
            </summary>
            <param name="topMost"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.IsTopMost">
            <summary>
            TopMost 상태를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetCaption(System.String)">
            <summary>
            MessageBox 상단 캡션을 설정합니다.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetMessage(System.String)">
            <summary>
            MessageBox 내용을 설정합니다.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetMessageTextAlign(System.Drawing.ContentAlignment)">
            <summary>
            MessageBox 내용을 문자열 정렬을 설정합니다. (현재 TopLeft외에는 MiddleCenter로 동작합니다.)
            </summary>
            <param name="contentAlignment"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetButtonType(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            MessageBox 버튼 타입을 설정합니다. (현재 YesNo, OKCancel, OK를 지원합니다.)
            </summary>
            <param name="buttonType"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetMessageFont(System.Drawing.Font)">
            <summary>
            MessageBox 메시지의 폰트를 설정합니다.
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetMessageFont(System.String,System.Single)">
            <summary>
            MessageBox 메시지의 폰트를 설정합니다.
            </summary>
            <param name="fontName"></param>
            <param name="fontSize"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.Show(System.String,System.String,System.Nullable{System.Windows.Forms.MessageBoxButtons})">
            <summary>
            MessageBox를 보여줍니다.
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.ShowDialog(System.String,System.String,System.Nullable{System.Windows.Forms.MessageBoxButtons})">
            <summary>
            MessageBox를 Dialog로 보여줍니다. (부모 창 사용불가)
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox._CreateMessageBox(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.ContentAlignment,System.Drawing.Font)">
            <summary>
            MessageBox를 생성합니다.
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
            <param name="alignment"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox._Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.ContentAlignment,System.Drawing.Font)">
            <summary>
            MessageBox를 생성하며 보여줍니다.
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
            <param name="alignment"></param>
            <param name="font"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox._ShowDialog(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.ContentAlignment,System.Drawing.Font)">
            <summary>
            MessageBox를 생성하며 Dialog로 보여줍니다. (부모 창 사용불가)
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttonType"></param>
            <param name="alignment"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox._ExampleShow">
            <summary>
            예제 코드를 보여줍니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetCaptionColor(System.Drawing.Color,System.Nullable{System.Drawing.Color})">
            <summary>
            MessageBox 상단 캡션의 색상을 설정합니다.
            </summary>
            <param name="backColor"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetFormBackColor(System.Drawing.Color)">
            <summary>
            MessageBox의 배경색을 설정합니다.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetMessageColor(System.Drawing.Color,System.Nullable{System.Drawing.Color})">
            <summary>
            MessageBox의 메시지 상자 색상을 설정합니다.
            </summary>
            <param name="backColor"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetCopyButtonVisible(System.Boolean)">
            <summary>
            MessageBox의 [Copy] 버튼의 표시 여부를 설정합니다.
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.SetSize(System.Drawing.Size)">
            <summary>
            MessageBox의 크기를 설정합니다.
            </summary>
            <param name="size"></param>
        </member>
        <member name="F:_INNO._UI.InnoMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_INNO._UI.InnoMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoToolTip">
            <summary>
            InnoUIToolTip 싱글턴 객체입니다. InnoUIToolTip.Instance 를 사용하십시오.<br/>
            InnoUIToolTip tt = new InnoUIToolTip();을 선언하여 사용할 수 있습니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoTowerLampRYGB">
            <summary>
            InnoUITowerLampRYGB 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.SetBackColor(System.Nullable{System.Drawing.Color})">
            <summary>
            배경색을 설정합니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.RedOn">
            <summary>
            타워램프 빨간색을 켭니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.RedOff">
            <summary>
            타워램프 빨간색을 끕니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.IsRedOn">
            <summary>
            타워램프 빨간색이 켜져있는지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.YellowOn">
            <summary>
            타워램프 노란색을 켭니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.YellowOff">
            <summary>
            타워램프 노란색을 끕니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.IsYellowOn">
            <summary>
            타워램프 노란색이 켜져있는지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.GreenOn">
            <summary>
            타워램프 녹색을 켭니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.GreenOff">
            <summary>
            타워램프 녹색을 끕니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.IsGreenOn">
            <summary>
            타워램프 녹색이 켜져있는지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.BlueOn">
            <summary>
            타워램프 파란색을 켭니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.BlueOff">
            <summary>
            타워램프 파란색을 끕니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.IsBlueOn">
            <summary>
            타워램프 파란색이 켜져있는지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoTowerLampRYGB.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYGB.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxCircularTimer">
            <summary>
            InnoUIPictureBoxCircularTimer 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxCircularTimer.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxCircularTimer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control.Paint 이벤트를 발생시킵니다.
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxBounceBall">
            <summary>
            InnoUIPictureBoxBounceBall 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxBounceBall.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxBounceBall.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control.Paint 이벤트를 발생시킵니다.
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxSlideShow">
            <summary>
            InnoUIPictureBoxSlideShow 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxSlideShow.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxSlideShow.OnResize(System.EventArgs)">
            <summary>
            Control.Resize 이벤트를 발생시킵니다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxSlideShow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control.Paint 이벤트를 발생시킵니다.
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxRandomBall">
            <summary>
            InnoUIPictureBoxRandomBall 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxRandomBall.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxRandomBall.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control.Paint 이벤트를 발생시킵니다.
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="T:_INNO._UI.InnoButton">
            <summary>
            InnoUIButton 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButton.ButtonType">
            <summary>
            체크박스 타입 여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoButton.ButtonTypes">
            <summary>
            버튼의 형태들입니다.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoButton.ButtonTypes.Button">
            <summary>
            일반 버튼으로 동작합니다.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoButton.ButtonTypes.CheckBox">
            <summary>
            체크박스 버튼으로 동작합니다.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoButton.ButtonTypes.RadioButton">
            <summary>
            라디오 버튼으로 동작합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButton.Checked">
            <summary>
            체크 상태를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButton.NormalBackColor">
            <summary>
            일반 상태일 때의 배경색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButton.NormalForeColor">
            <summary>
            일반 상태일 때의 글자색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButton.CheckedBackColor">
            <summary>
            체크 상태일 때의 배경색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButton.CheckedForeColor">
            <summary>
            체크 상태일 때의 글자색을 지정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButton.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButton.SetCheck(System.Boolean)">
            <summary>
            체크 설정합니다.
            </summary>
            <param name="bCheck"></param>
        </member>
        <member name="M:_INNO._UI.InnoButton.IsChecked">
            <summary>
            체크 설정 여부를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButton.OnClick(System.EventArgs)">
            <summary>
            Click 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoButton.OnVisibleChanged(System.EventArgs)">
            <summary>
            VisibleChanged 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoComboBoxColorPicker">
            <summary>
            InnoUIComboBoxColorPicker 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoComboBoxColorPicker.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoComboBoxColorPicker.components">
            <summary>
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoComboBoxColorPicker.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:_INNO._UI.InnoComboBoxColorPicker.InitializeComponent">
            <summary>
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoBitmap">
            <summary>
            InnoUIBitmap 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoBitmap.CreateColorBitmap(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            배경색이 칠해친 비트맵을 생성하여 리턴합니다.
            </summary>
            <param name="bmpWidth"></param>
            <param name="bmpHeight"></param>
            <param name="bmpColor"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoBitmap.ReduceColor(System.Drawing.Bitmap,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Bitmap의 특정 색상을 한단계씩 감소시킵니다. (256 -> 128 -> 64 -> 32 -> 16 -> 8 -> 4 -> 2 -> 1)
            </summary>
            <param name="reduceR"></param>
            <param name="reduceG"></param>
            <param name="reduceB"></param>
        </member>
        <member name="M:_INNO._UI.InnoBitmap.CreateRandomBallBitmap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            랜덤볼이 그려진 비트맵을 생성하여 리턴합니다.
            </summary>
            <param name="bmpWidth"></param>
            <param name="bmpHeight"></param>
            <param name="ballCount"></param>
            <param name="ballRadius"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxColorPicker">
            <summary>
            InnoUIPictureBoxColorPicker 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxColorPicker.StartCapture">
            <summary>
            화면 캡쳐를 시작하거나 정지합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxColorPicker.CaptureInterval">
            <summary>
            화면 캡쳐 타이머 Interval을 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxColorPicker.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxColorPicker.GetCapturedColor">
            <summary>
            캡쳐된 색상을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxInterpolationMode">
            <summary>
            InnoUIPictureBoxInterpolationMode 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxInterpolationMode.InterpolationMode">
            <summary>
            이미지의 크기를 조정하거나 회전하는데 사용되는 알고리즘을 지정합니다. (기본 = NearestNeighbor)
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxInterpolationMode.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control.Paint 이벤트를 발생시킵니다.
            </summary>
            <param name="paintEventArgs"></param>
        </member>
        <member name="T:_INNO._UI.InnoRadioButtonColored">
            <summary>
            InnoUIButtonRadio 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoRadioButtonColored.CheckedColor">
            <summary>
            체크 상태일 때의 배경색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoRadioButtonColored.NormalColor">
            <summary>
            일반 상태일 때의 배경색을 지정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoRadioButtonColored.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoRadioButtonColored.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="T:_INNO._UI.InnoFlashWindow">
            <summary>
            InnoUIFlashWindow 클래스
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHWINFO.cbSize">
            <summary>
            The size of the structure in bytes.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHWINFO.hwnd">
            <summary>
            A Handle to the Window to be Flashed. The window can be either opened or minimized.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHWINFO.dwFlags">
            <summary>
            The Flash Status.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHWINFO.uCount">
            <summary>
            The number of times to Flash the window.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHWINFO.dwTimeout">
            <summary>
            The rate at which the Window is to be flashed, in milliseconds. If Zero, the function uses the default cursor blink rate.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHW_STOP">
            <summary>
            Stop flashing. The system restores the window to its original stae.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHW_CAPTION">
            <summary>
            Flash the window caption.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHW_TRAY">
            <summary>
            Flash the taskbar button.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHW_ALL">
            <summary>
            Flash both the window caption and taskbar button.
            This is equivalent to setting the FLASHW_CAPTION | FLASHW_TRAY flags.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHW_TIMER">
            <summary>
            Flash continuously, until the FLASHW_STOP flag is set.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoFlashWindow.FLASHW_TIMERNOFG">
            <summary>
            Flash continuously until the window comes to the foreground.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFlashWindow.Flash(System.Windows.Forms.Form)">
            <summary>
            Flash the spacified Window (Form) until it recieves focus.
            </summary>
            <param name="form">The Form (Window) to Flash.</param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoFlashWindow.Flash(System.Windows.Forms.Form,System.UInt32)">
            <summary>
            Flash the specified Window (form) for the specified number of times
            </summary>
            <param name="form">The Form (Window) to Flash.</param>
            <param name="count">The number of times to Flash.</param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoFlashWindow.Start(System.Windows.Forms.Form)">
            <summary>
            Start Flashing the specified Window (form)
            </summary>
            <param name="form">The Form (Window) to Flash.</param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoFlashWindow.Stop(System.Windows.Forms.Form)">
            <summary>
            Stop Flashing the specified Window (form)
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="P:_INNO._UI.InnoFlashWindow.Win2000OrLater">
            <summary>
            A boolean value indicating whether the application is running on Windows 2000 or later.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoSampleMenuSlide">
            <summary>
            InnoUIFormSampleMenuSlide 클래스
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoSampleMenuSlide.eMenuSizeState">
            <summary>
            메뉴 크기 상태입니다.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoSampleMenuSlide.eMenuSizeState.MinimumSize">
            <summary>
            축소된 메뉴 상태
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoSampleMenuSlide.eMenuSizeState.MaximumSize">
            <summary>
            펼쳐진 메뉴 상태
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.SetMenuContainer(System.Windows.Forms.Control,_INNO._UI.InnoSampleMenuSlide.eMenuSizeState)">
            <summary>
            메뉴 컨테이너 컨트롤을 설정합니다. (메뉴의 시작 상태를 설정할 수 있습니다.)
            </summary>
            <param name="menuContainer"></param>
            <param name="startSize"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.SetLogoMenu(System.Windows.Forms.Control)">
            <summary>
            로고 메뉴 컨트롤을 설정합니다. (로고 메뉴 클릭시 (주)북스 | 이노소프트 홈페이지를 엽니다.)
            </summary>
            <param name="logoCon"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.SetLogoBg(System.Windows.Forms.Control)">
            <summary>
            배경 로고 컨트롤을 설정합니다. (폼이 변경될 때, 자동으로 보이고 숨겨집니다.)
            </summary>
            <param name="logoCon"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.SetCopyRight(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            카피라이트 컨트롤을 설정합니다.
            </summary>
            <param name="copyrightCon"></param>
            <param name="useOnce"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.AddForm(System.Windows.Forms.Form,System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            폼 이름을 기준으로 폼을 추가합니다. (폼 이름이 동일하면 안됩니다.)
            </summary>
            <param name="form"></param>
            <param name="parentForm"></param>
            <param name="panelSel"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.CloseForm(System.Int32)">
            <summary>
            폼을 닫습니다.
            </summary>
            <param name="formNum"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.CloseForm(System.String)">
            <summary>
            폼을 닫습니다.
            </summary>
            <param name="formName"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.CloseAllForm">
            <summary>
            폼을 모두 닫습니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.ShowForm(System.Int32)">
            <summary>
            지정된 인덱스에 해당하는 폼을 보여줍니다.
            </summary>
            <param name="formNum"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.ShowForm(System.String)">
            <summary>
            지정된 이름에 해당하는 폼을 보여줍니다.
            </summary>
            <param name="formName"></param>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.GetForm(System.Int32)">
            <summary>
            지정된 인덱스에 해당하는 폼을 가져옵니다.
            </summary>
            <param name="formNum"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.GetForm(System.String)">
            <summary>
            지정된 이름에 해당하는 폼을 가져옵니다.
            </summary>
            <param name="formName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.GetAllForm">
            <summary>
            모든 폼을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoSampleMenuSlide.StartMenuSlide">
            <summary>
            메뉴 슬라이딩을 시작합니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoSplashScreenManager">
            <summary>
            InnoUIFormSplashScreenManager 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreenManager.StartSplashScreen(System.String,System.String,System.String)">
            <summary>
            스플래시 화면을 시작합니다.
            </summary>
            <param name="caption"></param>
            <param name="title"></param>
            <param name="message"></param>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreenManager.StopSplashScreen">
            <summary>
            스플래시 화면을 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoSplashScreenManager.ShowSplashScreen">
            <summary>
            스플래시 화면을 보여줍니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoFormManager">
            <summary>
            InnoUIFormManager 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.AddForm(System.Windows.Forms.Form,System.Windows.Forms.Control,System.Windows.Forms.DockStyle)">
            <summary>
            자식 폼을 추가합니다.
            </summary>
            <param name="f"></param>
            <param name="parent"></param>
            <param name="dockStyle"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.GetFormCount">
            <summary>
            자식 폼 개수를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.GetForm(System.Int32)">
            <summary>
            자식 폼을 가져옵니다.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.GetForm(System.String)">
            <summary>
            자식 폼을 가져옵니다.
            </summary>
            <param name="formName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.ShowAndBringToFront(System.String)">
            <summary>
            자식 폼을 보여주며 맨 앞으로 가져옵니다.
            </summary>
            <param name="formName"></param>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.CloseAllForms">
            <summary>
            모든 자식 폼을 닫습니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.BringToFrontAllForms">
            <summary>
            모든 자식폼을 맨 앞으로 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFormManager.HideAllForms">
            <summary>
            모든 자식 폼을 숨깁니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoUIFormManagerHashTable">
            <summary>
            InnoUIFormManagerHashTable 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoUIFormManagerHashTable.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoUIFormManagerHashTable.AddForm(System.Windows.Forms.Form,System.Windows.Forms.Control)">
            <summary>
            자식 폼을 추가합니다.
            </summary>
            <param name="f"></param>
            <param name="parent"></param>
        </member>
        <member name="M:_INNO._UI.InnoUIFormManagerHashTable.GetFormCount">
            <summary>
            자식 폼의 개수를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUIFormManagerHashTable.GetForm(System.String)">
            <summary>
            자식 폼을 가져옵니다.
            </summary>
            <param name="formName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUIFormManagerHashTable.ShowAndBringToFront(System.String)">
            <summary>
            자식 폼을 보여주며 맨 앞으로 가져옵니다.
            </summary>
            <param name="formName"></param>
        </member>
        <member name="M:_INNO._UI.InnoUIFormManagerHashTable.CloseAllForms">
            <summary>
            모든 자식 폼을 닫습니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoUIFormManagerHashTable.BringToFrontAllForms">
            <summary>
            모든 자식 폼을 보여주며 맨 앞으로 가져옵니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoPostiItManager">
            <summary>
            InnoUIFormPostiItManager 생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPostiItManager.NewPostIt">
            <summary>
            새로운 PostIt을 생성하고 보여줍니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoButtonColored">
            <summary>
            InnoUIButtonColored 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.CheckBoxType">
            <summary>
            체크박스 타입 여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.Checked">
            <summary>
            체크 상태를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.CheckedBackColor">
            <summary>
            체크 상태일 때의 배경색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.CheckedForeColor">
            <summary>
            체크 상태일 때의 전경색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.CheckedBorderColor">
            <summary>
            체크 상태일 때의 외곽 라인색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.BorderSize">
            <summary>
            외곽 라인 두께를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.BorderRadius">
            <summary>
            외곽 반지름을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.BorderColor">
            <summary>
            외곽 라인 색상을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.BackgroundColor">
            <summary>
            배경색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonColored.TextColor">
            <summary>
            글자색을 지정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButtonColored.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButtonColored.SetCheck(System.Boolean)">
            <summary>
            체크 설정합니다.
            </summary>
            <param name="bCheck"></param>
        </member>
        <member name="M:_INNO._UI.InnoButtonColored.IsChecked">
            <summary>
            체크 설정 여부를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButtonColored.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseClick 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoButtonColored.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:_INNO._UI.InnoButtonColored.OnHandleCreated(System.EventArgs)">
            <summary>
            HandleCreated 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoFlowLayoutPanelButtonArray">
            <summary>
            InnoUIFlowLayoutPanelButtonArray 클래스
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonCreatedHandle">
            <summary>
            버튼이 생성될 때 호출되는 이벤트 함수입니다.
            </summary>
        </member>
        <member name="E:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonCreated">
            <summary>
            버튼이 생성될 때 호출됩니다. 생성되는 버튼의 상태를 변경할 수 있습니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonClickedHandle">
            <summary>
            버튼이 클릭될 때 호출되는 이벤트 함수입니다.
            </summary>
        </member>
        <member name="E:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonClicked">
            <summary>
            버튼이 클릭될 때 호출됩니다. 버튼 클릭 동작을 구현할 수 있습니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.Selected">
            <summary>
            선택된 버튼들을 결정합니다. "1,3,4"와 같이 지정하여 다중선택이 가능합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.Clickable">
            <summary>
            버튼 클릭 가능 여부르 결정합니다. 표시 용도로만 사용시 false로 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonCount">
            <summary>
            버튼의 총 개수를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonWidth">
            <summary>
            버튼의 폭을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonHeight">
            <summary>
            버튼의 높이을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonMargin">
            <summary>
            버튼의 마진을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.ColorButtonBack">
            <summary>
            버튼의 배경색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.ColorButtonFore">
            <summary>
            버튼의 글자색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoFlowLayoutPanelButtonArray.ColorButtonSelected">
            <summary>
            버튼의 폭을 지정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFlowLayoutPanelButtonArray.#ctor">
            <summary>
            InnoUIButtonArrayPanel 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFlowLayoutPanelButtonArray.OnCreateControl">
            <summary>
            CreateControl 이벤트
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFlowLayoutPanelButtonArray.CreateButtons">
            <summary>
            버튼들을 생성합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoFlowLayoutPanelButtonArray.ButtonClick(System.Object,System.EventArgs)">
            <summary>
            버튼 클릭 이벤트를 발생합니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoGroupBoxBorder">
            <summary>
            InnoGroupBoxBorder 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoGroupBoxBorder.BorderColor">
            <summary>
            외곽 라인 색상을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoGroupBoxBorder.BorderWidth">
            <summary>
            외곽 라인 두께를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoGroupBoxBorder.BorderStyle">
            <summary>
            외곽 라인 스타일을 지정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoGroupBoxBorder.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoGroupBoxBorder.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoGroupBoxRoundBorder">
            <summary>
            InnoGroupBoxRoundBorder 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoGroupBoxRoundBorder.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoGroupBoxRoundBorder.#ctor(System.Int32,System.Single,System.Drawing.Color)">
            <summary>
            생성자
            </summary>
            <param name="width"></param>
            <param name="radius"></param>
            <param name="color"></param>
        </member>
        <member name="P:_INNO._UI.InnoGroupBoxRoundBorder.BorderColor">
            <summary>
            외곽 라인 색상을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoGroupBoxRoundBorder.BorderWidth">
            <summary>
            외곽 라인 두께를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoGroupBoxRoundBorder.BorderRadius">
            <summary>
            외곽 코너 아크 반지름을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoGroupBoxRoundBorder.LabelIndent">
            <summary>
            텍스트 들여쓰기 값을 입력합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoGroupBoxRoundBorder.Dispose(System.Boolean)">
            <summary>
            Dispose 이벤트
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:_INNO._UI.InnoNotifyTextIcon">
            <summary>
            InnoUINotifyTextIcon 클래스
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoNotifyTextIcon.RECT">
            <summary>
            RECT 구조체
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoNotifyTextIcon.RECT.left">
            <summary>
            RECT의 좌측 값
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoNotifyTextIcon.RECT.top">
            <summary>
            RECT의 상단 값
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoNotifyTextIcon.RECT.right">
            <summary>
            RECT의 우측 값
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoNotifyTextIcon.RECT.bottom">
            <summary>
            RECT의 하단 값
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNotifyTextIcon.FindWindow(System.String,System.String)">
            <summary>
            윈도우를 찾습니다.
            </summary>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNotifyTextIcon.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            윈도우를 찾습니다.
            </summary>
            <param name="hwndParent"></param>
            <param name="hwndChildAfter"></param>
            <param name="lpszClass"></param>
            <param name="lpszWindow"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNotifyTextIcon.GetClientRect(System.IntPtr,_INNO._UI.InnoNotifyTextIcon.RECT@)">
            <summary>
            윈도우의 크기를 얻습니다.
            </summary>
            <param name="hWnd"></param>
            <param name="lpRect"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNotifyTextIcon.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>
            윈도우에 메시지를 전송합니다.
            </summary>
            <param name="hWnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoNotifyTextIcon.RefreshTrayArea">
            <summary>
            트레이 영역을 다시 표시합니다. (숨겨진 아이콘은 재설정되지 않습니다.)
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoNotifyTextIcon.RefreshTrayArea(System.IntPtr)">
            <summary>
            트레이 영역을 다시 표시합니다. (숨겨진 아이콘은 재설정되지 않습니다.)
            </summary>
            <param name="windowHandle"></param>
        </member>
        <member name="M:_INNO._UI.InnoNotifyTextIcon.CreateTextNotifyIcon(System.String)">
            <summary>
            트레이에 표시되는 아이콘에 문자열을 표시합니다.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxImageArray">
            <summary>
            InnoUIPictureBoxImageArray 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxImageArray.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image0">
            <summary>
            첫번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image1">
            <summary>
            두번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image2">
            <summary>
            세번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image3">
            <summary>
            네번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image4">
            <summary>
            다섯번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image5">
            <summary>
            여섯번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image6">
            <summary>
            일곱번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image7">
            <summary>
            여덞번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image8">
            <summary>
            아홉번째 이미지
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxImageArray.Image9">
            <summary>
            열번째 이미지
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxButton">
            <summary>
            InnoUIPictureBoxButton 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxButton.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxButton.ImageNormal">
            <summary>
            일반 상태에서 표시되는 이미지입니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPictureBoxButton.ImageHover">
            <summary>
            마우스가 올라갔을 때 표시되는 이미지입니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxButton.OnMouseHover(System.EventArgs)">
            <summary>
            MouseHover 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxButton.OnMouseLeave(System.EventArgs)">
            <summary>
            MouseLeave 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoCheckBox">
            <summary>
            InnoUICheckBox 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoCheckBox.Checked">
            <summary>
            체크 상태를 지정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoCheckBox.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoCheckBox.#ctor(System.ComponentModel.IContainer)">
            <summary>
            생성자
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:_INNO._UI.InnoCheckBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pe"></param>
        </member>
        <member name="F:_INNO._UI.InnoCheckBox.components">
            <summary>
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoCheckBox.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:_INNO._UI.InnoCheckBox.InitializeComponent">
            <summary>
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoButtonEllipsed">
            <summary>
            InnoUIButtonEllipsed 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButtonEllipsed.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButtonEllipsed.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="T:_INNO._UI.InnoControlRounded">
            <summary>
            InnoUIControlRounded 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoControlRounded.CornerRadius">
            <summary>
            코너 반지름을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoControlRounded.TargetControl">
            <summary>
            타켓 컨트롤을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoPictureBoxEllipsed">
            <summary>
            InnoUIPictureBoxEllipsed 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPictureBoxEllipsed.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pe"></param>
        </member>
        <member name="T:_INNO._UI.InnoPanelGradiented">
            <summary>
            InnoUIPanelGradiented 클래스
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoPanelGradiented.Direction">
            <summary>
            그라디언트 방향성
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGradiented.Direction.LeftToRight">
            <summary>
            왼쪽에서 오른쪽으로 그라디언트
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGradiented.Direction.LeftTopToRightBottom">
            <summary>
            좌상단에서 우하단으로 그라디언트
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGradiented.Direction.TopToBottom">
            <summary>
            상단에서 하단으로 그라디언트
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGradiented.Direction.RightTopToLeftBottom">
            <summary>
            우상단에서 좌하단으로 그라디언트
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGradiented.Direction.RightToLeft">
            <summary>
            오른쪽에서 왼쪽으로 그라디언트
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGradiented.Direction.RightBottomToLeftTop">
            <summary>
            우하단에서 좌상단으로 그라디언트
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGradiented.Direction.BottomToTop">
            <summary>
            하단에서 상단으로 그라디언트
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGradiented.Direction.LeftBottomToRightTop">
            <summary>
            좌하단에서 우상단으로 그라디언트
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGradiented.ColorDirection">
            <summary>
            색상의 방향성을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGradiented.ColorStart">
            <summary>
            시작 색상을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGradiented.ColorEnd">
            <summary>
            끝 색상을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPanelGradiented.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoPanelGroupBox">
            <summary>
            InnoUIPanelGroupBox 클래스
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoPanelGroupBox.eTextStyle">
            <summary>
            그룹박스 스타일
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGroupBox.eTextStyle.GroupBox">
            <summary>
            그룹박스 모양
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGroupBox.eTextStyle.InnerBox">
            <summary>
            이너박스 모양
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoPanelGroupBox.eTextStyle.Tab">
            <summary>
            탭 모양
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.TextStyle">
            <summary>
            그룹박스 스타일을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.Text">
            <summary>
            문자열을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.TextDock">
            <summary>
            문자열 도킹 상태를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.TextAlign">
            <summary>
            문자열 맞춤을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.TextSize">
            <summary>
            문자열 크기를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.BorderThickness">
            <summary>
            외곽 라인 두께를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.ColorBorderBack">
            <summary>
            외곽 라인 배경색을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.ColorTextBack">
            <summary>
            문자열 배경색을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.ColorTextFore">
            <summary>
            외곽 라인 전경색을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.ColorContentsBack">
            <summary>
            컨텐츠의 배경색을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelGroupBox.ColorContentsFore">
            <summary>
            컨텐츠의 전경색을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPanelGroupBox.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPanelGroupBox.OnResize(System.EventArgs)">
            <summary>
            Resize 이벤트
            </summary>
            <param name="eventargs"></param>
        </member>
        <member name="T:_INNO._UI.InnoUI">
            <summary>
            InnoUI 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoUI.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoUI.FindControlParent(System.Windows.Forms.Control,System.Type)">
            <summary>
            컨트롤의 부모 컨트롤을 찾아줍니다.
            </summary>
            <param name="c"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI.MaximizeForm(System.Windows.Forms.Control)">
            <summary>
            폼을 최대화 상태로 만듭니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.LocateForm(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            폼을 특정 위치로 이동합니다.
            </summary>
            <param name="c"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI._NormalizeForm(System.Windows.Forms.Control)">
            <summary>
            폼을 일반 상태로 만듭니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI._MinimizeForm(System.Windows.Forms.Control)">
            <summary>
            폼을 최소화 상태로 만듭니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI._ToggleNormalizeMinimizeForm(System.Windows.Forms.Control)">
            <summary>
            폼을 일반, 최소화 상태를 전환합니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.SetFormDoubleClickMaximize(System.Windows.Forms.Control)">
            <summary>
            컨트롤을 더블클릭시 컨트롤이 포함된 폼을 최대화 상태로 만들 수 있도록 설정합니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.SetFormDoubleClickLocate(System.Windows.Forms.Control)">
            <summary>
            컨트롤을 더블클릭시 컨트롤이 포함된 폼을 특정 위치로 이동할 수  만들 수 있도록 설정합니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.SetFormDraggable(System.Windows.Forms.Control)">
            <summary>
            컨트롤을 드래그 이동시 컨트롤이 포함된 폼을 드래그 상태로 만들 수 있도록 설정합니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.FormFadeOutClose(System.Windows.Forms.Form,System.Int32)">
            <summary>
            폼을 FadeOut 효과를 내며 닫습니다.
            </summary>
            <param name="f"></param>
            <param name="interval"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.SetFormFadeOutClose(System.Windows.Forms.Control,System.Int32)">
            <summary>
            폼을 FadeOut 효과를 내며 닫도록 설정합니다.
            </summary>
            <param name="c"></param>
            <param name="interval"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.SetUIExit(System.Windows.Forms.Control)">
            <summary>
            컨트롤을 폼을 닫는 기능으로 설정합니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetMouseCursorPixelColor">
            <summary>
            마우스 위치의 색상을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetScreenBitmap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            화면 영역의 Bitmap을 가져옵니다.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetColorBlackOrWhite(System.Drawing.Color)">
            <summary>
            색상의 밝기를 계산하여, 밝으면 White를 어두우면 Black을 반환합니다.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetOppsiteColorBlackOrWhite(System.Drawing.Color)">
            <summary>
            색상의 밝기를 계산하여, 밟으면 Black을 어두우면 White를 반환합니다.
            </summary>
            <param name="backColor"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetFormBounceLocation(System.Windows.Forms.Form)">
            <summary>
            Form의 Bounce되는 Location을 알려줍니다.
            </summary>
            <param name="frm"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetFormBounceLocation(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
            부모 폼에 Form이 Bounce되는 Location을 알려줍니다.
            </summary>
            <param name="parentForm"></param>
            <param name="frm"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._RunScreenKeyboard">
            <summary>
            윈도우 내장 화상키보드를 실행합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoUI._KillScreenKeyboard">
            <summary>
            윈도우 내장 화상키보드를 종료합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetChildsOnly(System.Windows.Forms.Control)">
            <summary>
            컨트롤의 바로 하위 컨트롤만 찾습니다.
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetAllControls(System.Windows.Forms.Control)">
            <summary>
            모든 자식 컨트롤을 가져옵니다.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._FindControlByName(System.Windows.Forms.Control,System.String)">
            <summary>
            주어진 부모 컨트롤 내에서, 컨트롤 이름 기반으로 컨트롤을 찾습니다.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._FindControlByText(System.Windows.Forms.Control,System.String)">
            <summary>
            주어진 부모 컨트롤 내에서, 컨트롤 Text 기반으로 컨트롤을 찾습니다.
            </summary>
            <param name="parent"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._FindControlByTag(System.Windows.Forms.Control,System.Object)">
            <summary>
            주어진 부모 컨트롤 내에서, 컨트롤 Tag 기반으로 컨트롤을 찾습니다.
            </summary>
            <param name="parent"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetAllColors">
            <summary>
            모든 Color를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetAllColorNames">
            <summary>
            모든 Color 이름을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI.GetAllControls(System.Windows.Forms.Control)">
            <summary>
            모든 자식 컨트롤을 가져옵니다.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI.GetAllControls(System.Windows.Forms.Control,System.Type)">
            <summary>
            모든 자식 컨트롤을 가져옵니다.
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI.GetColor(System.String)">
            <summary>
            문자열을 칼라로 변경하여 줍니다.
            (예시) GetColor("33,33,33") -> Color 반환합니다.
            </summary>
            <param name="colorString"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI.FindMainForm(System.Windows.Forms.Control)">
            <summary>
            컨트롤이 포함된 가장 메인이 되는 폼을 찾습니다.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI.OpenForm(System.Windows.Forms.Form,System.Type)">
            <summary>
            폼을 엽니다.
            </summary>
            <param name="_mainForm"></param>
            <param name="formType"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.OpenForm``1(System.Windows.Forms.Control)">
            <summary>
            폼을 엽니다.
            </summary>
            <typeparam name="MiForm"></typeparam>
            <param name="_c"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.Event_CloseForm(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            폼을 닫습니다.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI.SaveControlToJpg(System.Windows.Forms.Control,System.String)">
            <summary>
            컨트롤을 JPG 파일로 저장합니다.
            </summary>
            <param name="c"></param>
            <param name="pathFileNameExt"></param>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetPrimaryScreenSize">
            <summary>
            기본 디스플레이의 크기를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetPrimaryScreenDesktopSize">
            <summary>
            기본 디스플레이에서 도킹된 창, 도구모음을 제외한 디스플레이의 데스크톱 영역을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetScreenCount">
            <summary>
            디스플레이의 전체 개수를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetScreenSize(System.Int32)">
            <summary>
            특정 디스플레이의 크기를 가져옵니다.
            </summary>
            <param name="iScreenIndex"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoUI._GetScreenVirtualSize">
            <summary>
            가상 화면의 경계를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._UI.InnoProgressBarCircular">
            <summary>
            InnoUIProgressBarCircular 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoProgressBarCircular.Thickness">
            <summary>
            두께를 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoProgressBarCircular.Progress">
            <summary>
            Progress 값을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoProgressBarCircular.ProgressMin">
            <summary>
            최소 Progress 값을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoProgressBarCircular.ProgressMax">
            <summary>
            최대 Progress 값을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoProgressBarCircular.ColorProgress">
            <summary>
            Progress 색상을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoProgressBarCircular.ColorTextArea">
            <summary>
            문자열 영역을 색상을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoProgressBarCircular.ColorText">
            <summary>
            문자열 색상을 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoProgressBarCircular.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoProgressBarCircular.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pe"></param>
        </member>
        <member name="T:_INNO._UI.InnoButtonRounded">
            <summary>
            InnoUIButtonRounded 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.CheckBoxType">
            <summary>
            체크박스 타입 여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.Checked">
            <summary>
            체크 상태를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.Thickness">
            <summary>
            두께를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.RoundColor">
            <summary>
            라운드 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.RoundHoverColor">
            <summary>
            마우스를 올렸을 때 라운드 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.RoundDownColor">
            <summary>
            마우스를 클릭했을 때 라운드 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.ButtonColor">
            <summary>
            버튼 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.ButtonHoverColor">
            <summary>
            마우스를 올렸을 때 버튼 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.ButtonDownColor">
            <summary>
            마우스를 클릭했을 때 버튼 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.TextColor">
            <summary>
            문자열 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.TextHoverColor">
            <summary>
            마우스를 올렸을 때 문자열 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.TextDownColor">
            <summary>
            마우스를 클릭했을 때 문자열 색상을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoButtonRounded.UseHoverColor">
            <summary>
            마우스를 올렸을 때 색상 사용 여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButtonRounded.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoButtonRounded.SetCheck(System.Boolean)">
            <summary>
            체크 설정합니다.
            </summary>
            <param name="bCheck"></param>
        </member>
        <member name="M:_INNO._UI.InnoButtonRounded.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseClick 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoButtonRounded.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoLabelRounded">
            <summary>
            InnoUILabelRounded 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoLabelRounded.RoundCorderRadius">
            <summary>
            둥근 코너의 반지름을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoLabelRounded.BorderColor">
            <summary>
            외곽선 색상을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoLabelRounded.RoundBackColor">
            <summary>
            내부 배경색을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoLabelRounded.BorderThickness">
            <summary>
            외곽선 두께를 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoLabelRounded.RoundCorderTopLeft">
            <summary>
            좌상단 둥근 코너 여부를 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoLabelRounded.RoundCorderTopRight">
            <summary>
            우상단 둥근 코너 여부를 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoLabelRounded.RoundCorderBottomLeft">
            <summary>
            좌하단 둥근 코너 여부를 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoLabelRounded.RoundCorderBottomRight">
            <summary>
            우하단 둥근 코너 여부를 설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoLabelRounded.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoLabelRounded.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._UI.InnoTextBoxColoredPlaceholder">
            <summary>
            InnoUITextBoxColoredPlaceholder 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.BorderColor">
            <summary>
            외곽 라인 색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.BorderFocusColor">
            <summary>
            포커스된 컨트롤의 외곽 라인 색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.BorderSize">
            <summary>
            포커스된 컨트롤의 외곽 라인 두께를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.UnderlinedStyle">
            <summary>
            언더라인 사용여부를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.PasswordChar">
            <summary>
            패스워드(***) 사용여부를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.Multiline">
            <summary>
            여러줄 입력방식을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.BackColor">
            <summary>
            배경색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.ForeColor">
            <summary>
            글자색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.Font">
            <summary>
            폰트를 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.Text">
            <summary>
            텍스트를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.ReadOnly">
            <summary>
            읽기 전용 여부를 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.AutoScroll">
            <summary>
            AutoScroll을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.BorderRadius">
            <summary>
            외곽 라운드 반지름을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.PlaceholderColor">
            <summary>
            플레이스홀더 색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.PlaceholderText">
            <summary>
            플레이스홀더 글자색을 지정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoTextBoxColoredPlaceholder.TextAlign">
            <summary>
            텍스트를 정렬하는 방법을 지정합니다.
            </summary>
        </member>
        <member name="E:_INNO._UI.InnoTextBoxColoredPlaceholder._TextChanged">
            <summary>
            문자열 변경 이벤트
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.OnResize(System.EventArgs)">
            <summary>
            Resize 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.OnLoad(System.EventArgs)">
            <summary>
            Load 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.AppendText(System.String)">
            <summary>
            현재 문자열에 문자열을 추가합니다.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.Select(System.Int32,System.Int32)">
            <summary>
            텍스트 상자의 텍스트 범위를 선택합니다.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.Clear">
            <summary>
            모든 문자열을 삭제합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.SelectAll">
            <summary>
            모든 문자열을 선택합니다.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoTextBoxColoredPlaceholder.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:_INNO._UI.InnoTextBoxColoredPlaceholder.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoTheme">
            <summary>
            InnoUITheme 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTheme.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTheme.Finalize">
            <summary>
            소멸자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTheme.LoadTheme(System.Windows.Forms.Form,System.String)">
            <summary>
            테마를 불러옵니다.
            </summary>
            <param name="_form"></param>
            <param name="themeName"></param>
        </member>
        <member name="M:_INNO._UI.InnoTheme.Check_SelectedTag(System.Windows.Forms.Control)">
            <summary>
            컨트롤의 Tag에 "_selected"를 설정합니다.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._UI.InnoTheme.RefreshTheme(System.Windows.Forms.Form)">
            <summary>
            테마를 다시 설정합니다.
            </summary>
            <param name="_parentForm"></param>
        </member>
        <member name="T:_INNO._UI.InnoTowerLampRYG">
            <summary>
            InnoUITowerLampRYG 클래스
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.SetBackColor(System.Nullable{System.Drawing.Color})">
            <summary>
            배경색을 설정합니다.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.RedOn">
            <summary>
            타워램프 빨간색을 켭니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.RedOff">
            <summary>
            타워램프 빨간색을 끕니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.IsRedOn">
            <summary>
            타워램프 빨간색이 켜져있는지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.YellowOn">
            <summary>
            타워램프 노란색을 켭니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.YellowOff">
            <summary>
            타워램프 노란색을 끕니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.IsYellowOn">
            <summary>
            타워램프 노란색이 켜져있는지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.GreenOn">
            <summary>
            타워램프 녹색을 켭니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.GreenOff">
            <summary>
            타워램프 녹색을 끕니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.IsGreenOn">
            <summary>
            타워램프 녹색이 켜져있는지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="F:_INNO._UI.InnoTowerLampRYG.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:_INNO._UI.InnoTowerLampRYG.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="T:_INNO._UI.InnoToggleButton">
            <summary>
            InnoUIToggleButton 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.OnBackColor">
            <summary>
            On 상태의 배경색을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.OnToggleColor">
            <summary>
            On 상태의 토글색을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.OffBackColor">
            <summary>
            Off 상태의 배경색을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.OffToggleColor">
            <summary>
            Off 상태의 토글색을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.OnText">
            <summary>
            On 상태의 문자열을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.OffText">
            <summary>
            Off 상태의 문자열을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.OnTextColor">
            <summary>
            On 상태의 글자색을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.OffTextColor">
            <summary>
            Off 상태의 글자색을 설정합니다.
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoToggleButton.SolidStyle">
            <summary>
            내부가 채워진 상태인지 설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoToggleButton.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoToggleButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="T:_INNO._UI.InnoPanelTransparented">
            <summary>
            InnoUIPanelTransparented 클래스
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelTransparented.Opacity">
            <summary>
            투명도를 % 지정합니다. (0~100)
            </summary>
        </member>
        <member name="P:_INNO._UI.InnoPanelTransparented.CreateParams">
            <summary>
            CreateParams 이벤트
            </summary>
        </member>
        <member name="M:_INNO._UI.InnoPanelTransparented.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:_INNO._Time.InnoTactTime">
            <summary>
            InnoTactTime 클래스
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTactTime.SetTactTime">
            <summary>
            한 지점에서 발생하는 Tact Time 반복 측정시 사용
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTactTime.BeginTactTime">
            <summary>
            구간에서 발생하는 Tact Time 측정 시작
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTactTime.EndTactTime">
            <summary>
            구간에서 발생하는 Tact Time 측정 끝
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTactTime.GetTactTime">
            <summary>
            TactTime 정보 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time.InnoTactTime.GetTactTimeString(System.String)">
            <summary>
            TactTime 정보를 포맷 문자열로 얻기
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time.InnoTactTime.GetLastTactTime">
            <summary>
            마지막 TactTime 정보 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time.InnoTactTime.ResetTactTime">
            <summary>
            TactTime 정보 초기화
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTactTime.PauseTactTime">
            <summary>
            TactTime 일시 정지
            </summary>
        </member>
        <member name="T:_INNO._Time._InnoTime">
            <summary>
            InnoTime 클래스
            </summary>
        </member>
        <member name="M:_INNO._Time._InnoTime._Sleep(System.Int32)">
            <summary>
            지정된 시간동안 현재 스레드를 일시 중단합니다.
            </summary>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:_INNO._Time._InnoTime._Seconds_To_DayHourMinuteSecond(System.Int32)">
            <summary>
            초 시간을 [일],[시간],[분],[초]로 계산하여 배열로 반환합니다.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time._InnoTime._Seconds_To_HourMinuteSecond(System.Int32)">
            <summary>
            초 시간을 [시간],[분],[초]로 계산하여 배열로 반환합니다.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time._InnoTime._Seconds_To_MinuteSecond(System.Int32)">
            <summary>
            초 시간을 [분],[초]로 계산하여 배열로 반환합니다.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time._InnoTime._DayHourMinuteSecond_To_Seconds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            [일],[시간],[분],[초]를 초로 계산하여 반환합니다.
            </summary>
            <param name="days"></param>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time._InnoTime._HourMinuteSecond_To_Seconds(System.Int32,System.Int32,System.Int32)">
            <summary>
            [시간],[분],[초]를 초로 계산하여 반환합니다.
            </summary>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time._InnoTime._MinuteSecond_To_Seconds(System.Int32,System.Int32)">
            <summary>
            [분],[초]를 초로 계산하여 반환합니다.
            </summary>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time._InnoTime._Seconds_To_Milliseconds(System.Int32)">
            <summary>
            [초]를 밀리초로 계산하여 반환합니다.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time._InnoTime._Milliseconds_To_Seconds(System.Int32)">
            <summary>
            [밀리초]를 초로 계산하여 반환합니다.
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time._InnoTime._ReplaceDateTimeFormat(System.String,System.Nullable{System.DateTime})">
            <summary>
            문자열을 날짜형식으로 변환하여 반환합니다. (문자열 "yyyyMM" => "202408")
            </summary>
            <param name="txt"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Time.InnoLifeTime">
            <summary>
            InnoTimeLifeTime 클래스
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoLifeTime.StartTime">
            <summary>
            LifeTime을 시작합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoLifeTime.StopTime">
            <summary>
            LifeTime을 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoLifeTime.GetTime(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            LifeTime을 가져옵니다.
            </summary>
            <param name="days"></param>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:_INNO._Time.InnoLifeTime.GetTimeStandard">
            <summary>
            LifeTime을 (주)북스 표준 형식으로 가져옵니다. "1.11:12:23" (1일 11시 12분 23초)
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._Time.InnoMultimediaTimer">
            <summary>
            InnoTimeMultimediaTimer 클래스
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoMultimediaTimer.#ctor">
            <summary>
            InnoTimeMultimediaTimer 생성자
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoMultimediaTimer.Finalize">
            <summary>
            InnoTimeMultimediaTimer 소멸자
            </summary>
        </member>
        <member name="P:_INNO._Time.InnoMultimediaTimer.Interval">
            <summary>
            Multimedia Timer의 Interval을 설정하거나 반환합니다.
            </summary>
        </member>
        <member name="P:_INNO._Time.InnoMultimediaTimer.Resolution">
            <summary>
            Multimedia Timer의 Resolution을 설정하거나 반환합니다.
            (최소 Resolution은 0이며, 0은 가장 높은 resolution을 의미합니다.)
            </summary>
        </member>
        <member name="P:_INNO._Time.InnoMultimediaTimer.IsRunning">
            <summary>
            Multimedia Timer가 구동중인지 여부를 반환합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoMultimediaTimer.Start">
            <summary>
            Multimedia Timer를 시작합니다.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
        </member>
        <member name="M:_INNO._Time.InnoMultimediaTimer.Stop">
            <summary>
            Multimedia Timer를 정지합니다.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:_INNO._Time.InnoMultimediaTimer.Dispose">
            <summary>
            Multimedia Timer를 Dispose 시킵니다.
            </summary>
        </member>
        <member name="T:_INNO._Time.InnoStopWatch">
            <summary>
            InnoTimeStopWatch 클래스
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoStopWatch.Reset">
            <summary>
            스톱와치를 초기화합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoStopWatch.Restart">
            <summary>
            스톱와치를 재시작합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoStopWatch.Start">
            <summary>
            스톱와치를 시작합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoStopWatch.Stop">
            <summary>
            스톱와치를 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoStopWatch.CheckGuaranteeTimePassed(System.Int32)">
            <summary>
            스톱와치 시작이후 몇 초가 지났는지를 확인합니다.
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time.InnoStopWatch.CheckLastTimePassed(System.Int32)">
            <summary>
            마지막 CheckTimePassed() 이후 몇 초가 지났는지를 확인합니다.
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Time.InnoTimerCallback">
            <summary>
            InnoTimeTimerCallback 클래스
            </summary>
        </member>
        <member name="T:_INNO._Time.InnoTimerCallback.Callback">
            <summary>
            콜백 이벤트
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTimerCallback.#ctor(System.Windows.Forms.Control)">
            <summary>
            생성자
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_INNO._Time.InnoTimerCallback.#ctor(System.Windows.Forms.Control,_INNO._Time.InnoTimerCallback.Callback)">
            <summary>
            생성자
            </summary>
            <param name="c"></param>
            <param name="deleCallback"></param>
        </member>
        <member name="M:_INNO._Time.InnoTimerCallback.SetCallbackFunction(_INNO._Time.InnoTimerCallback.Callback)">
            <summary>
            콜백 함수를 등록합니다.
            </summary>
            <param name="deleCallback"></param>
        </member>
        <member name="M:_INNO._Time.InnoTimerCallback.Start(System.Int32)">
            <summary>
            타이머를 시작합니다.
            </summary>
            <param name="milliseconds"></param>
        </member>
        <member name="M:_INNO._Time.InnoTimerCallback.Stop">
            <summary>
            타이머를 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTimerCallback.Change(System.Int32,System.Int32)">
            <summary>
            타이머 시간을 변경합니다.
            </summary>
            <param name="delayTime"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Time.InnoTime">
            <summary>
            InnoTimeWaitTime 클래스
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTime.RunTime(System.Int32)">
            <summary>
            RunTime()이 호출된 시점부터, 다음 RunTime()이 호출된 시점에 지정된 시간이 경과하면 false를 반환합니다.
            </summary>
            <param name="runMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time.InnoTime.ResetRunTime">
            <summary>
            RunTime을 재설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoTime.WaitTime(System.Int32)">
            <summary>
            WaitTime()이 호출된 시점부터, 다음 WaitTime()이 호출된 시점에 지정된 시간이 경과하면 true를 반환합니다.
            </summary>
            <param name="waitMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Time.InnoTime.ResetWaitTime">
            <summary>
            WaitTime을 재설정합니다.
            </summary>
        </member>
        <member name="T:_INNO._Time.InnoThreadTimer">
            <summary>
            InnoTimeThreadTimer 클래스
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoThreadTimer.#ctor(System.Threading.TimerCallback,System.Int32,System.Int32,System.Object)">
            <summary>
            생성자. InnoTimerThread(callback, dueTime, period) 생성자 호출하며 Timer 시작
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoThreadTimer.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoThreadTimer.Start(System.Threading.TimerCallback,System.Int32,System.Int32,System.Object)">
            <summary>
            타이머 시작
            </summary>
            <param name="callback">콜백 함수</param>
            <param name="dueTime">첫 타이머 시작 전 대기 시간</param>
            <param name="period">타이머 반복 시간</param>
            <param name="state"></param>
        </member>
        <member name="M:_INNO._Time.InnoThreadTimer.StartOnce(System.Threading.TimerCallback,System.Int32,System.Object)">
            <summary>
            타이머 한번만 실행
            </summary>
            <param name="callback"></param>
            <param name="waitTime"></param>
            <param name="state"></param>
        </member>
        <member name="M:_INNO._Time.InnoThreadTimer.Stop">
            <summary>
            타이머 정지
            </summary>
        </member>
        <member name="M:_INNO._Time.InnoThreadTimer.CallBack(System.Object)">
            <summary>
            Callback 함수 예시
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:_INNO._Dev.InnoUsbCam">
            <summary>
            InnoUsbCam 클래스
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoUsbCam.FindDevices">
            <summary>
            모든 USB Camera Device 정보를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoUsbCam.DeviceCount">
            <summary>
            USB Camera Device 개수를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoUsbCam.Init(System.Windows.Forms.Form,System.Windows.Forms.Control)">
            <summary>
            초기화
            </summary>
            <param name="frm"></param>
            <param name="con"></param>
        </member>
        <member name="M:_INNO._Dev.InnoUsbCam.Start">
            <summary>
            카메라 시작
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoUsbCam.Stop">
            <summary>
            카메라 정지
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoUsbCam.Deinit">
            <summary>
            초기화 해제
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoUsbCam.GetBitmap">
            <summary>
            Bitmap 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO._Dev.InnoJoystick">
            <summary>
            InnoJoystick 클래스
            제품 : USB 조이스틱
            </summary>
        </member>
        <member name="T:_INNO._Dev.USB_Joystick">
            <summary>
            USB_Joystick 클래스
            </summary>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.#ctor(System.Int32,System.Int32,System.Double,System.Windows.Forms.Form)">
            <summary>
            Creates a new USB_Joystick object and initializes the minimum and maximum range values of the joystick
            along with the threshold percentage.
            </summary>   
            <param name="rangeMin">The minimum value for the range of the joystick.</param>
            <param name="rangeMax">The maximum value for the range of the joystick.</param> 
            <param name="thresholdPerc">The threshold percentage. Value must be between 0.0 and .99.</param>
            <param name="form">Form to set the cooperative level for the joystick.</param>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.#ctor(System.Int32,System.Int32,System.Windows.Forms.Form)">
            <summary>
            Creates a new USB_Joystick object and initializes the minimum and maximum range values of the joystick, 
            along with setting the threshold percentage to a default value.       
            </summary>
            <param name="rangeMin">The minimum value for the range of the joystick.</param>
            <param name="rangeMax">The maximum value for the range of the joystick.</param>
            <param name="form">Form to set the cooperative level for the joystick.</param>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.#ctor(System.Windows.Forms.Form)">
            <summary>
            Creates a new USB_Joystick object and sets the minimum/maximum range values along the threshold
            percentage of the joystick to default values.       
            <param name="form">Form to set the cooperative level for the joystick.</param>
            </summary>        
        </member>
        <member name="P:_INNO._Dev.USB_Joystick.ThresholdPerc">
            <summary>
            Gets or sets the threshold based on a percentage scale.
            </summary>
        </member>
        <member name="P:_INNO._Dev.USB_Joystick.ThresholdMin">
            <summary>
            Returns the minimum value of the threshold.
            </summary>
        </member>
        <member name="T:_INNO._Dev.USB_Joystick.StateVirtual">
            <summary>
            StateVirtual 클래스
            </summary>
        </member>
        <member name="F:_INNO._Dev.USB_Joystick.StateVirtual.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:_INNO._Dev.USB_Joystick.StateVirtual.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:_INNO._Dev.USB_Joystick.StateVirtual.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:_INNO._Dev.USB_Joystick.StateVirtual.Rx">
            <summary>
            Rx
            </summary>
        </member>
        <member name="F:_INNO._Dev.USB_Joystick.StateVirtual.Ry">
            <summary>
            Ry
            </summary>
        </member>
        <member name="F:_INNO._Dev.USB_Joystick.StateVirtual.Rz">
            <summary>
            Rz
            </summary>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.StateVirtual.GetSlider">
            <summary>
            Slider를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.StateVirtual.GetPointOfView">
            <summary>
            PointOfView를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.StateVirtual.GetButtons">
            <summary>
            눌린 버튼을 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="F:_INNO._Dev.USB_Joystick.State">
            <summary>
            State 개체
            </summary>
        </member>
        <member name="P:_INNO._Dev.USB_Joystick.ThresholdMax">
            <summary>
            Returns the maximum value of the threshold.
            </summary>
        </member>
        <member name="P:_INNO._Dev.USB_Joystick.GetRawXYPerc">
            <summary>
            Returns the raw value of the joystick's X and Y coordinates converted into a percent.
            </summary>
        </member>
        <member name="P:_INNO._Dev.USB_Joystick.NumberOfButtons">
            <summary>
            Returns the number of buttons on the joystick.
            </summary>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.ButtonValue(System.Int32)">
            <summary>
            Returns the value of the specified button.
            </summary>
            <param name="index">Index of the button being pressed.</param>        
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.ButtonPressed(System.Int32)">
            <summary>
            Returns the state of a button.
            </summary>
            <param name="index">The index of the button to be used to test whether it has been pressed.</param>        
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.IsXOutsideThreshold">
            <summary>
            Returns true if the joystick's current X position is outside of the threshold.
            </summary>        
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.IsYOutsideThreshold">
            <summary>
            Returns true if the joystick's current Y position is outside of the threshold.
            </summary>        
        </member>
        <member name="P:_INNO._Dev.USB_Joystick.IsXYInsideThreshold">
            <summary>
            Returns true if the joystick's current position is inside the threshold    
            </summary> 
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.SetThreshold">
            <summary>
            Sets the threshold of the X and Y joystick values.
            </summary>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.GetData">
            <summary>
            Acquires the joystick if necessary, and starts polling the joystick for information.
            Uses the same concepts behind the DirectX 9 SDK Joystick sample download.
            </summary>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.InitDirectInput(System.Windows.Forms.Form)">
            <summary>
            Finds the first joystick attached, and initializes it.
            Uses the same concepts behind the DirectX 9 Joystick sample download.
            </summary>
            <param name="Form1">Form to set the cooperative level for the joystick.</param>
            <returns>Returns true if the joystick was successfully created.</returns>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.PresetValues">
            <summary>
            Presets all of the values that are required to use an object of the USB_Joystick class.
            </summary>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.UnacquireAppDevice">
            <summary>
            Unacquires the device
            </summary>
        </member>
        <member name="M:_INNO._Dev.USB_Joystick.Dispose">
            <summary>
            Calls the methods that are used to dispose of this object, and all objects contained within.
            </summary>
        </member>
        <member name="T:_INNO._Dev._InnoDev">
            <summary>
            InnoDev 클래스
            </summary>
        </member>
        <member name="T:_INNO._Dev.InnoAdlinkPciDask">
            <summary>
            InnoAdlinkPciDask 클래스 (PCI-Dask.dll 사용)<br/>
            제품 : Adlink PCI-7230<br/>
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.Initialize">
            <summary>
            디바이스 개체를 초기화합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.Deinitialize">
            <summary>
            디바이스 개체를 해제합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.RegisterCard(System.Int32,System.Int32)">
            <summary>
            디바이스 보드를 등록합니다.
            </summary>
            <param name="cardType"></param>
            <param name="cardNum"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.ReleaseCard">
            <summary>
            디바이스 보드를 해제합니다.
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.IsOpen">
            <summary>
            디바이스 연결 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.DI_Read(System.Int32,System.Int32)">
            <summary>
            DIGITAL INPUT index번째 상태를 읽어옵니다
            </summary>
            <param name="inputIndex"></param>
            <param name="portNum"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.DO_Write(System.Int32,System.Boolean,System.Int32)">
            <summary>
            DIGITAL OUTPUT index번째에 상태를 씁니다
            </summary>
            <param name="outputIndex"></param>
            <param name="on"></param>
            <param name="portNum"></param>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.DO_Read(System.Int32,System.Int32)">
            <summary>
            DIGITAL OUTPUT index번째 상태를 읽어옵니다
            </summary>
            <param name="outputIndex"></param>
            <param name="portNum"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoAdlinkPciDask.DO_Reset(System.Int32)">
            <summary>
            DIGITAL OUTPUT 전체 상태를 0으로 초기화합니다.
            </summary>
            <param name="portNum"></param>
        </member>
        <member name="T:_INNO._Dev.InnoEmotiontekMcuh2">
            <summary>
            InnoEmotiontekMcuh2 클래스 (MCU2Common.dll 사용)<br/>
            제품 : 이모션텍 MCUH2 (MCUH-XP2)<br/>
            </summary>
        </member>
        <member name="T:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode">
            <summary>
            MCUH2 리턴코드
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.OK">
            <summary>
            MCUH2 리턴코드 : 정상
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.NOT_INITIALIZED">
            <summary>
            MCUH2 리턴코드 : 초기화되지 않음
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.NOT_FOUND">
            <summary>
            MCUH2 리턴코드 : 찾을 수 없음
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.ILLEGAL_PARAMETER">
            <summary>
            MCUH2 리턴코드 : 비정상 패러미터
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.CHECKSUM_ERROR">
            <summary>
            MCUH2 리턴코드 : 체크썸 에러
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.NACK_RETURN">
            <summary>
            MCUH2 리턴코드 : NACK 리턴
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.RETURN_COMMAND_ERROR">
            <summary>
            MCUH2 리턴코드 : COMMAND 에러 리턴
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.NO_SET">
            <summary>
            MCUH2 리턴코드 : SET 없음
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.NOT_EVENT">
            <summary>
            MCUH2 리턴코드 : 이벤트 아님
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.NOT_OPEN_PORT">
            <summary>
            MCUH2 리턴코드 : OPEN PORT 아님
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.FUNCTION_NOT_AVAILABLE">
            <summary>
            MCUH2 리턴코드 : FUNCTION 사용할 수 없음
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.NOT_THREAD">
            <summary>
            MCUH2 리턴코드 : 쓰레드 아님
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoEmotiontekMcuh2.ReturnCode.DISCONNECT">
            <summary>
            MCUH2 리턴코드 : 끊김
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.Initialize">
            <summary>
            디바이스 개체를 초기화합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.Deinitialize">
            <summary>
            디바이스 개체를 해제합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.Connect(System.Int32)">
            <summary>
            디바이스에 연결합니다. (RS232 컴포트 = 1)
            </summary>
            <param name="comPortNum"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.Connect(System.String)">
            <summary>
            디바이스에 연결합니다. (RS232 컴포트 = "COM1" 또는 "1")
            </summary>
            <param name="comPortNum"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.Reconnect">
            <summary>
            디바이스에 재연결합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.IsOpen">
            <summary>
            디바이스 연결 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.GetVariable_L(System.Int32,System.Int32@)">
            <summary>
            L 주소의 값을 읽어옵니다.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.SetVariable_L(System.Int32,System.Int32)">
            <summary>
            L 주소에 값을 씁니다.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.GetVariable_P(System.Int32,System.Int32,System.Int32@)">
            <summary>
            P 주소의 값을 읽어옵니다.
            </summary>
            <param name="axis"></param>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.SetVariable_P(System.Int32,System.Int32,System.Int32)">
            <summary>
            P 주소에 값을 씁니다.
            </summary>
            <param name="axis"></param>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.ReadCurrentPosition(System.Int32,System.Double@)">
            <summary>
            현재 위치 값을 읽어옵니다.
            </summary>
            <param name="axis"></param>
            <param name="mmPos"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoEmotiontekMcuh2.ReadMotorPosition(System.Int32,System.Double@)">
            <summary>
            모터 위치 값을 읽어옵니다.
            </summary>
            <param name="axis"></param>
            <param name="mmPos"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Dev.InnoIFLightController">
            <summary>
            InnoIFLightController 클래스<br/>
            제품 : 이미지포커스 - 조명컨트롤러 (2CH, 4CH)<br/>
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoIFLightController.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoIFLightController.Open(System.String)">
            <summary>
            디바이스를 오픈합니다.
            </summary>
            <param name="portName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoIFLightController.SetLight(System.Int32,System.Int32)">
            <summary>
            조명값을 설정합니다.
            </summary>
            <param name="channel"></param>
            <param name="lightValue"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoIFLightController.GetLight(System.Int32)">
            <summary>
            조명값을 읽어옵니다.
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoIFLightController.SetOn(System.Int32,System.Boolean)">
            <summary>
            조명을 켜거나 끕니다.
            </summary>
            <param name="channel"></param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Dev.InnoMotionLogical">
             <summary>
             InnoMotionLogicalManager 클래스 : 물리축을 가상축으로 설정하여 사용할 수 있습니다.<br/>
             제품 : InnoMotionVirtual를 상속받은 DevMotion 클래스
             <br/>
             <code>
             [Information]
              H = Home Position
              --> = + Direction
            
              // Physical Axis                          ===>  // Logical Axis를 아래와 같이 구성하려면.. ===>  SetPhysicalAxisInformation(true, 0.0);  // Logical == Physical
              0   100  200  300  400  500  600  700           0   100  200  300  400  500  600  700            GetPhysicalPosition(100.0) return 100.0; 
              H----+----+----+----+----+----+---->            H----+----+----+----+----+----+---->             GetLogicalPosition(100.0)  return 100.0;
            
              // Physical Axis                          ===>  // Logical Axis를 아래와 같이 구성하려면.. ===>  SetPhysicalAxisInformation(true, 300.0);
              0   100  200  300  400  500  600  700         -300 -200 -100   0   100  200  300  400            GetPhysicalPosition(100.0) return 300.0;
              H----+----+----+----+----+----+---->            -----+----+----H----+----+----+---->             GetLogicalPosition(300.0)  return 100.0;
            
              // Physical Axis                          ===>  // Logical Axis를 아래와 같이 구성하려면.. ===>  SetPhysicalAxisInformation(false, 700.0);
             700  600  500  400  300  200  100   0            0   100  200  300  400  500  600  700            GetPhysicalPosition(100.0) return 600.0;
              &lt;----+----+----+----+----+----+----H            H----+----+----+----+----+----+---->             GetLogicalPosition(600.0)  return 100.0;
            
              // Physical Axis                          ===>  // Logical Axis를 아래와 같이 구성하려면.. ===>  SetPhysicalAxisInformation(false, 400.0);
             700  600  500  400  300  200  100   0          -300 -200 -100   0   100  200  300  400            GetPhysicalPosition(100.0) return 300.0;
              &lt;----+----+----+----+----+----+----H            -----+----+----H----+----+----+---->             GetLogicalPosition(300.0)  return 100.0;
             </code>
             </summary>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.SetPhysicalInformation(System.Int32,System.Boolean,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            한축을 설정합니다.<br/>
            - InnoMotionLogical()를 한축씩 생성하여 한축씩 할당할 때 사용합니다.<br/>
            </summary>
            <param name="physicalAxisNumber"></param>
            <param name="physicalDirectionPositive"></param>
            <param name="physicalPositionForLogicalHomePosition"></param>
            <param name="physicalPulseOutputMultiply"></param>
            <param name="physicalPulseInputMultiply"></param>
            <param name="physicalPulseInputUse"></param>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.SetPhysicalInformation(System.Int32[],System.Boolean[],System.Double[],System.Double[],System.Double[])">
            <summary>
            다축을 설정합니다. (현재 구현X)<br/>
            - InnoMotionLogical()를 관리자로서 하나 생성하고 다축 할당할 때 사용합니다.<br/>
            </summary>
            <param name="physicalAxisNumbers"></param>
            <param name="physicalDirectionPositives"></param>
            <param name="physicalPositionForLogicalHomePositions"></param>
            <param name="physicalPulseOutputMultiply"></param>
            <param name="physicalPulseInputMultiply"></param>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.SetPhysicalAxisMotionVelocity(System.Double,System.Double,System.Double)">
            <summary>
            모션 속도, 가속도, 감속도를 설정합니다.
            </summary>
            <param name="physicalVelocity"></param>
            <param name="physicalAccel"></param>
            <param name="physicalDecel"></param>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.SetPhysicalAxisJogVelocity(System.Double,System.Double,System.Double)">
            <summary>
            조그 속도, 가속도, 감속도를 설정합니다.
            </summary>
            <param name="physicalVelocity"></param>
            <param name="physicalAccel"></param>
            <param name="physicalDecel"></param>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.GetPhysicalHomeLogicalPosition">
            <summary>
            물리적 Home 위치의 논리적 위치 얻어오기..???
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.LogicalPositionToPhysicalPosition(System.Double)">
            <summary>
            논리축 위치를 물리축 위치로 변환하여 리턴합니다.
            </summary>
            <param name="logicalPosition"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.LogicalPositionToPhysicalPosition(System.Double[])">
            <summary>
            (미구현) 논리축들의 위치를 물리축들의 위치로 변환하여 리턴합니다.
            </summary>
            <param name="logicalPositions"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.PhysicalPositionToLogicalPosition(System.Double,System.Boolean)">
            <summary>
            물리축 위치를 논리축 위치로 변환하여 리턴합니다.
            </summary>
            <param name="physicalPosition"></param>
            <param name="calcInputMultiply"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.AttachMotionController(_INNO._Dev.InnoMotionVirtual)">
            <summary>
            InnoMotionVirtual을 상속받은 DevMotion을 할당합니다.
            </summary>
            <param name="devMotionController"></param>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.DetachMotionController">
            <summary>
            할당된 DevMotion을 해제합니다.
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.SetCorrectionList(System.Double[][])">
            <summary>
            위치 보정값을 설정합니다.<br/>
            <code>
            1. Axis_Correction_X.ini 등의 파일 연동 사용시
            [CORRECTION]
            -50.0 = 0.000
            0.0 = 0.000
            5.0 = 0.002
            10.0 = 0.003
            15.0 = 0.004
            20.0 = 0.005
            
            2. 2차원 배열을 직접 전달시
            [0][0] = -50.0 | [0][1] = 0.000
            [1][0] =   0.0 | [1][1] = 0.000
            [2][0] =   5.0 | [2][1] = 0.002
            [3][0] =  10.0 | [3][1] = 0.003
            [4][0] =  15.0 | [4][1] = 0.004
            [5][0] =  20.0 | [5][1] = 0.005
            </code>
            </summary>
            <param name="correctionList"></param>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.GetLinearInterpolationPosition(System.Double,System.Boolean)">
            <summary>
            보정 위치값 계산 알고리즘
            </summary>
            <param name="position"></param>
            <param name="setPosition"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.LinearInterpolationTest(System.Double)">
            <summary>
            위치 보정값을 테스트합니다. (전달된 위치값으로 계산된 보정값을 리턴합니다.)
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.HomingStart">
            <summary>
            홈잉을 시작합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.HomingStop">
            <summary>
            홈잉을 정지합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsHomingDone">
            <summary>
            홈잉 완료여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.ClearPosition">
            <summary>
            위치값을 0.0으로 클리어합니다. (Command Position, Actual Position 모두 클리어)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.ServoOn">
            <summary>
            서보를 ON 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.ServoOff">
            <summary>
            서보를 OFF 합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsServoOn">
            <summary>
            서버 ON 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsAlarm">
            <summary>
            알람 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsEmergency">
            <summary>
            Emergency 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.AlarmClear">
            <summary>
            알람을 클리어합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.MoveAbs(System.Double,System.Boolean)">
            <summary>
            절대 위치로 이동합니다.
            </summary>
            <param name="logicalPosition"></param>
            <param name="blocking"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.MoveAbs(System.Double,System.Double,System.Boolean)">
            <summary>
            절대 위치로 이동합니다. (지정된 속도의 백분율 설정하여 이동)<br/>
            - 속도 = 400m/s로 설정되어 있는 경우, speedPercent = 50.0로 설정하면 50% 속도인 200m/s로 이동합니다.
            </summary>
            <param name="logicalPosition"></param>
            <param name="speedPercent">speedPercent = 50.0로 설정하면 50% 속도인 200m/s로 이동합니다.</param>
            <param name="blocking"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.MoveRel(System.Double,System.Boolean)">
            <summary>
            상대 위치로 이동합니다.
            </summary>
            <param name="relPosition"></param>
            <param name="blocking"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.MoveRel(System.Double,System.Int32,System.Boolean)">
            <summary>
            상대 위치로 이동합니다.(지정된 속도의 백분율 설정하여 이동)<br/>
            - 속도 = 400m/s로 설정되어 있는 경우, speedPercent = 50.0로 설정하면 50% 속도인 200m/s로 이동합니다.
            </summary>
            <param name="relPosition"></param>
            <param name="speedPercent"></param>
            <param name="blocking"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.MoveStop">
            <summary>
            이동을 정지합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.MoveStopEmergency">
            <summary>
            이동을 비상 정지합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.GetActualPosition">
            <summary>
            Actual Position을 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.GetCommandPosition">
            <summary>
            Command Position을 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.InMotion">
            <summary>
            InMotion (모션구동중) 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.InPosition">
            <summary>
            InPosition (정위치) 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsHome">
            <summary>
            Home 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsMinusLimit">
            <summary>
            Minus Limit 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsPlusLimit">
            <summary>
            Plus Limit 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsNegativeLimit">
            <summary>
            Negative Limit 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsPositiveLimit">
            <summary>
            Positive Limit 여부를 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.InCommandPosition(System.Double)">
            <summary>
            InCommandPosition 여부를 리턴합니다.
            </summary>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.CheckPosition(System.Double,System.Double)">
            <summary>
            정위치 여부를 리턴합니다. (기본 허용오차 = 1um)
            </summary>
            <param name="pos"></param>
            <param name="tolerance">허용오차</param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.JogPlus">
            <summary>
            조그 Plus 이동합니다.
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.JogMinus">
            <summary>
            조그 Minus 이동합니다.
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.WriteOutputBitOn(System.Int32)">
            <summary>
            [IO] OUTPUT Bit를 ON 합니다.
            </summary>
            <param name="bitNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.WriteOutputBitOff(System.Int32)">
            <summary>
            [IO] OUTPUT Bit를 OFF 합니다.
            </summary>
            <param name="bitNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsOutputBitOn(System.Int32)">
            <summary>
            [IO] OUTPUT Bit의 ON 여부를 리턴합니다.
            </summary>
            <param name="bitNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionLogical.IsInputBitOn(System.Int32)">
            <summary>
            [IO] INPUT Bit의 ON 여부를 리턴합니다.
            </summary>
            <param name="bitNo"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Dev.InnoMotionVirtual">
            <summary>
            InnoMotionVirtual 클래스
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.Initialize">
            <summary>
            초기화를 진행합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.DeInitialize">
            <summary>
            초기화를 해제합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.HomingStart(System.Int32)">
            <summary>
            홈잉을 시작합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.HomingStop(System.Int32)">
            <summary>
            홈잉을 정지합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsHomingDone(System.Int32)">
            <summary>
            홈잉 완료여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.ClearPosition(System.Int32)">
            <summary>
            위치값을 0.0으로 클리어합니다. (Command Position, Actual Position 모두 클리어)
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.ServoOn(System.Int32)">
            <summary>
            서보를 ON 합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.ServoOff(System.Int32)">
            <summary>
            서보를 OFF 합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsServoOn(System.Int32)">
            <summary>
            서버 ON 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsAlarm(System.Int32)">
            <summary>
            알람 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsEmergency(System.Int32)">
            <summary>
            Emergency 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.AlarmClear(System.Int32)">
            <summary>
            알람을 클리어합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.MoveAbs(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            절대 위치로 이동합니다.
            </summary>
            <param name="axisNo"></param>
            <param name="position"></param>
            <param name="Velocity"></param>
            <param name="Accel"></param>
            <param name="Decel"></param>
            <param name="blocking"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.MoveRel(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            상대 위치로 이동합니다.
            </summary>
            <param name="axisNo"></param>
            <param name="position"></param>
            <param name="velocity"></param>
            <param name="accel"></param>
            <param name="decel"></param>
            <param name="blocking"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.MoveStop(System.Int32)">
            <summary>
            이동을 정지합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.MoveStopEmergency(System.Int32)">
            <summary>
            이동을 비상 정지합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.GetActualPosition(System.Int32)">
            <summary>
            Actual Position을 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.GetCommandPosition(System.Int32)">
            <summary>
            Command Position을 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.InMotion(System.Int32)">
            <summary>
            InMotion (모션구동중) 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.InPosition(System.Int32)">
            <summary>
            InPosition (정위치) 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsHome(System.Int32)">
            <summary>
            Home 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsMinusLimit(System.Int32)">
            <summary>
            Minus Limit 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsPlusLimit(System.Int32)">
            <summary>
            Plus Limit 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsNegativeLimit(System.Int32)">
            <summary>
            Negative Limit 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsPositiveLimit(System.Int32)">
            <summary>
            Positive Limit 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.JogPlus(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            조그 Plus 이동합니다.
            </summary>
            <param name="axisNo"></param>
            <param name="velocity"></param>
            <param name="accel"></param>
            <param name="decel"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.JogMinus(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            조그 Minus 이동합니다.
            </summary>
            <param name="axisNo"></param>
            <param name="velocity"></param>
            <param name="accel"></param>
            <param name="decel"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.WriteOutputBitOn(System.Int32,System.Int32)">
            <summary>
            [IO] OUTPUT Bit를 ON 합니다.
            </summary>
            <param name="axisNo"></param>
            <param name="bitNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.WriteOutputBitOff(System.Int32,System.Int32)">
            <summary>
            [IO] OUTPUT Bit를 OFF 합니다.
            </summary>
            <param name="axisNo"></param>
            <param name="bitNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsOutputBitOn(System.Int32,System.Int32)">
            <summary>
            [IO] OUTPUT Bit를 ON 합니다.
            </summary>
            <param name="axisNo"></param>
            <param name="bitNo"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoMotionVirtual.IsInputBitOn(System.Int32,System.Int32)">
            <summary>
            [IO] INPUT Bit의 ON 여부를 리턴합니다.
            </summary>
            <param name="axisNo"></param>
            <param name="bitNo"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Dev.InnoSerial">
            <summary>
            InnoSerial 클래스
            </summary>
        </member>
        <member name="T:_INNO._Dev.InnoSerial.ASCII_NAME">
            <summary>
            ASCII 코드 이름
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.NUL">
            <summary>
            NULL
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.SOH">
            <summary>
            Start of Headiing
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.STX">
            <summary>
            Start of Text
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.ETX">
            <summary>
            End of Text
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.EOT">
            <summary>
            End of Transmission
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.ENQ">
            <summary>
            Enquiry
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.ACK">
            <summary>
            Acknowledge
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.LF">
            <summary>
            Line Feed (= NL : New Line)
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.FF">
            <summary>
            Form Feed (= NP : New Page)
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.CR">
            <summary>
            Carriage Return
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.XON">
            <summary>
            XON (=DC1:Device Control 1)
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.XOFF">
            <summary>
            XOFF (=DC1:Device Control 1)
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.NAK">
            <summary>
            Negative Acknowledge
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.CAN">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.ESC">
            <summary>
            Escape
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.FS">
            <summary>
            File Separator
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.GS">
            <summary>
            Group Separator
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.RS">
            <summary>
            Record Separator
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.US">
            <summary>
            Unit Separator
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerial.ASCII_NAME.SPACE">
            <summary>
            SPACE
            </summary>
        </member>
        <member name="T:_INNO._Dev.InnoSerialAbstract`1">
            <summary>
            InnoDeviceSerialAbstract 클래스 - 완벽하게 수신된 데이터를 처리하는 추상 클래스
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:_INNO._Dev.InnoSerialAbstract`1.Callback">
            <summary>
            데이터 수신시 처리할 함수 Delegate
            </summary>
            <param name="receiveData"></param>
        </member>
        <member name="P:_INNO._Dev.InnoSerialAbstract`1.IsOpen">
            <summary>
            RS232 오픈 여부
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.#ctor">
            <summary>
            InnoDeviceSerialAbstract 생성자
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.Open(System.String,System.Int32)">
            <summary>
            Serial 통신을 오픈합니다.
            </summary>
            <param name="portName">COM1 ~ COMxx</param>
            <param name="baudRate">9600 ~ </param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.ReOpen(System.String,System.Int32)">
            <summary>
            Serial 통신을 재오픈합니다.<br/>
            - 패러미터 미 지정시, Open()에서 사용된 패러미터값을 사용합니다.
            </summary>
            <param name="portName"></param>
            <param name="baudRate"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.GetAvailablePorts">
            <summary>
            현재 가능한 컴포트 목록을 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.Close">
            <summary>
            Serial 통신을 클로즈합니다.
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.SetSaveLog(System.Boolean)">
            <summary>
            로그 저장여부를 설정합니다.
            </summary>
            <param name="save"></param>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.SetLogPathFile(System.String,System.String,System.String)">
            <summary>
            로그 저장 경로 및 파일을 설정합니다.
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="fileExt"></param>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.SetReceiveCallFunc(_INNO._Dev.InnoSerialAbstract{`0}.Callback)">
            <summary>
            RS232 데이터 수신시 CallBack 받을 함수를 설정합니다.
            </summary>
            <param name="deleCallback"></param>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.SetCommandStartEndBytes(System.Byte[],System.Byte[])">
            <summary>
            RS232 통신 프로토콜의 시작 바이트와 끝 바이트를 설정합니다.<br/>
            - 시작바이트, 끝바이트가 여러 바이트인 경우도 설정 가능합니다.<br/>
            </summary>
            <param name="startBytes"></param>
            <param name="endBytes"></param>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.Send(System.Byte[])">
            <summary>
            RS232 명령을 전송합니다.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialAbstract`1.SendAndReceive(System.Byte[],System.Int32)">
            <summary>
            RS232 명령을 전송하고 Delay 시간만큼 대기한 후 수신된 값을 리턴합니다.
            </summary>
            <param name="cmd"></param>
            <param name="delayMilliSeconds"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Dev.InnoSerialComm">
            <summary>
            InnoSerialComm 클래스
            </summary>
        </member>
        <member name="T:_INNO._Dev.InnoSerialComm.DataReceivedHandlerFunc">
            <summary>
            데이터 수신을 처리할 함수 Delegate
            </summary>
            <param name="receiveData"></param>
        </member>
        <member name="F:_INNO._Dev.InnoSerialComm.DataReceivedHandler">
            <summary>
            데이터 수신을 처리할 핸들러
            </summary>
        </member>
        <member name="T:_INNO._Dev.InnoSerialComm.DisconnectedHandlerFunc">
            <summary>
            통신 종료를 처리할 함수 Delegate
            </summary>
        </member>
        <member name="F:_INNO._Dev.InnoSerialComm.DisconnectedHandler">
            <summary>
            통신 종료를 처리할 핸들러
            </summary>
        </member>
        <member name="P:_INNO._Dev.InnoSerialComm.IsOpen">
            <summary>
            RS232 오픈 여부
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.OpenComm(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Handshake)">
            <summary>
            Serial 통신을 오픈합니다.
            </summary>
            <param name="portName"></param>
            <param name="baudrate"></param>
            <param name="parity"></param>
            <param name="databits"></param>
            <param name="stopbits"></param>
            <param name="handshake"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.CloseComm">
            <summary>
            Serial 통신을 클로즈합니다.
            </summary>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.Send(System.String)">
            <summary>
            RS232 명령을 전송합니다.
            </summary>
            <param name="sendData"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.Send(System.Byte[])">
            <summary>
            RS232 명령을 전송합니다.
            </summary>
            <param name="sendData"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            RS232 명령을 전송합니다.
            </summary>
            <param name="sendData"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.SendAndRecv(System.Byte[],System.Int32)">
            <summary>
            RS232 명령을 전송하고 Delay 시간만큼 대기한 후 수신된 값을 리턴합니다.
            </summary>
            <param name="sendData"></param>
            <param name="delayMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.GetAvailablePorts">
            <summary>
            현재 가능한 컴포트 목록을 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Dev.InnoSerialComm.GetAvailablePortList">
            <summary>
            현재 가능한 컴포트 목록을 리턴합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO.InnoFormOKNGListView">
            <summary>
            InnoFormOKNGListView 클래스
            </summary>
        </member>
        <member name="M:_INNO.InnoFormOKNGListView.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:_INNO.InnoFormOKNGListView.SetAutoCloseInterval(System.Int32)">
            <summary>
            자동 닫힘 시간(밀리초)을 설정합니다.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:_INNO.InnoFormOKNGListView.AddMessage(System.String,System.String)">
            <summary>
            메시지를 추가합니다.
            </summary>
            <param name="title"></param>
            <param name="result"></param>
        </member>
        <member name="F:_INNO.InnoFormOKNGListView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_INNO.InnoFormOKNGListView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_INNO.InnoFormOKNGListView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:_INNO._Pattern.InnoPattern">
            <summary>
            InnoPattern 클래스
            </summary>
        </member>
        <member name="T:_INNO._Pattern.InnoThreadAbstract">
            <summary>
            InnoPatternThread 추상화 클래스
            </summary>
        </member>
        <member name="F:_INNO._Pattern.InnoThreadAbstract._threadRunning">
            <summary>
            Thread가 구동중인지 여부를 설정합니다.
            </summary>
        </member>
        <member name="M:_INNO._Pattern.InnoThreadAbstract.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="P:_INNO._Pattern.InnoThreadAbstract.IsAlive">
            <summary>
            Thread가 살아 있는지 여부를 알려줍니다.
            </summary>
        </member>
        <member name="M:_INNO._Pattern.InnoThreadAbstract.StartThread">
            <summary>
            Thread를 시작합니다.
            </summary>
        </member>
        <member name="M:_INNO._Pattern.InnoThreadAbstract.StopThread">
            <summary>
            Thread를 정지합니다.
            </summary>
        </member>
        <member name="M:_INNO._Pattern.InnoThreadAbstract.IsThreadRunning">
            <summary>
            Thread가 구동중인지 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Pattern.InnoThreadAbstract.RunningThread">
            <summary>
            RunningThread 이벤트
            </summary>
        </member>
        <member name="T:_INNO._Pattern.InnoSingletonAbstract`1">
            <summary>
            [예제1] 싱글턴 구조를 써야하는 클래스의 선언 방법
            <code>
            /// &lt;summary&gt;
            /// 싱글턴 클래스입니다. Test.Instance 를 사용하십시오.
            /// &lt;/summary&gt;
            public class Test : InnoPatternSingletonAbstract&lt;Test&gt;
            {
                private Test() {} // private 생성자를 꼭 만들어 주세요!!!
            }
            </code>
            <br/>
            [예제2] 디폴트 패러미터가 필요한 클래스의 선언 방법
            <code>
            public class Test : InnoPatternSingletonAbstract&lt;Test&gt;
            {
                private Test() : this (no: 1, name: "Andy") {}
                private Test(int no, string name) {}
            }
            </code>
            <br/>
            [예제3] 싱글턴 구조는 깨지지만, 싱글턴 객체 사용 및 new 생성도 가능한 클래스 만들기<br/>
            [#주의#] 사용방법 및 문제점을 정확히 인지하는 경우에만 적용하십시오
            <code>
            public class Test : InnoPatternSingletonAbstract&lt;Test&gt;
            {
                public Test() {}
            }
            </code>
            <br/>
            [호출방법] Test.Instance.Func();
            </summary>
            <typeparam name="T">싱글턴 객체 클래스</typeparam>
        </member>
        <member name="M:_INNO._Pattern.InnoSingletonAbstract`1.#cctor">
            <summary>
            디폴트 정적 생성자 (Lazy constructor)
            </summary>
        </member>
        <member name="P:_INNO._Pattern.InnoSingletonAbstract`1.Instance">
            <summary>
            싱글톤 인스턴스 얻기
            </summary>
        </member>
        <member name="P:_INNO._Pattern.InnoSingletonAbstract`1.Inst">
            <summary>
            싱글턴 인스턴스를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Pattern.InnoSingletonAbstract`1.GetInstance">
            <summary>
            싱글턴 인스턴스를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Pattern.InnoSingletonAbstract`1.CreateInstanceOfT">
            <summary>
            리플렉션으로 T의 인스턴스를 생성합니다.<br/>
            => 리플렉션으로 또다른 Instance가 생성됩니다. 즉, 리플렉션으로 생성하는 코드를 사용하면 안 됩니다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_INNO.Inno">
            <summary>
            Inno 싱글턴 객체입니다. Inno.Instance 또는 Inno._전역함수() 를 사용하십시오.
            </summary>
            <summary>
            Inno 싱글턴 객체입니다. Inno.Instance 또는 Inno._전역함수() 를 사용하십시오.
            </summary>
        </member>
        <member name="M:_INNO.Inno._NewGuid">
            <summary>
            Global Unique Identifier를 생성하여 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._Terminate">
            <summary>
            현재 프로세스를 강제 종료합니다.
            </summary>
        </member>
        <member name="M:_INNO.Inno._IsRuntime">
            <summary>
            프로그램의 실행중 여부를 리턴합니다. (InnoFormVirtual의 생성자나 OnLoad, OnFormClosing 등에서 사용하세요)
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._IsDesigntime">
            <summary>
            디자인 타임 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._ShowExample(System.String)">
            <summary>
            Inno._ShowExample(code);를 호출하면 InnoUIMessageBox로 코드를 보여줍니다.
            메시지창에서 [COPY] 버튼이나, Ctrl+C 하여 소스를 복사할 수 있습니다.
            </summary>
        </member>
        <member name="M:_INNO.Inno._Clipboard_Copy(System.String)">
            <summary>
            클립보드에 문자열을 복사합니다.
            </summary>
            <param name="txt">클립보드에 복사할 문자열</param>
            <example>
            <code>
            _INNO.Inno._CopyToClipBoard("ABCDE");
            </code>
            </example>
        </member>
        <member name="M:_INNO.Inno._Clipboard_Paste">
            <summary>
            클립보드에서 문자열을 가져옵니다.
            </summary>
            <returns>클립보드에서 가져온 문자열</returns>
            <example>
            <code>string textFromClipboard = _INNO.Inno._PasteFromClipboard();</code>
            </example>
        </member>
        <member name="M:_INNO.Inno._GetNowFormatString(System.String)">
            <summary>
            현재 시간을 특정 포맷으로 가져옵니다.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._GetPropertyName(System.String)">
            <summary>
            Property 이름을 가져옵니다.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._IsKeyControlPress">
            <summary>
            CONTROL 키 눌린 상태 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._IsKeyAltPress">
            <summary>
            ALT 키 눌린 상태 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._IsKeyShiftPress">
            <summary>
            SHIFT 키 눌린 상태 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._IsMouseLeftPress">
            <summary>
            MOUSE 왼쪽 버튼 눌린 상태 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._IsMouseRightPress">
            <summary>
            MOUSE 오른쪽 버튼 눌린 상태 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._IsMouseMiddlePress">
            <summary>
            MOUSE 가운데 버튼 눌린 상태 여부를 가져옵니다.
            </summary>
            <returns></returns>
        </member>
        <member name="F:_INNO.Inno._System">
            <summary>
            Inno에서 생성된 _System.InnoSystem 인스턴스입니다.
            </summary>
        </member>
        <member name="F:_INNO.Inno._LifeTime">
            <summary>
            Inno에서 생성된 _Time.InnoTimeLifeTime 인스턴스입니다. (_INNO.dll 구동시간)
            </summary>
        </member>
        <member name="F:_INNO.Inno._InnoLogger">
            <summary>
            Inno에서 생성된 _UI.InnoFormManager 인스턴스입니다. (현재 하나의 폼에 여러 자식 폼이 붙는 형태를 지원합니다.)
            여러 부모 폼에 여러 자식 폼을 구현하려면 부모 폼에서 InnoUIFormManager를 구현하여 사용하면 됩니다.
            </summary>
        </member>
        <member name="M:_INNO.Inno.Init(System.Boolean)">
            <summary>
            Inno 개체를 초기화 합니다.<br/>
            1. _INNO.dll 실행 시간 관리를 위한 InnoTimeLifeTime을 실행합니다.<br/>
            2. _INNO.dll 로그를 위한 _InnoLogger, _InnoExceptionLogger를 생성합니다. (설정은 _INNO.ini 파일을 참조하십시오.)<br/>
            </summary>
        </member>
        <member name="M:_INNO.Inno.Deinit">
            <summary>
            Inno 개체를 해제합니다.
            1. _INNO.dll 로그를 위한 _InnoLogger, _InnoExceptionLogger를 해제합니다.
            2. _INNO.dll 실행 시간 관리를 위한 InnoTimeLifeTime을 해제합니다.
            </summary>
        </member>
        <member name="M:_INNO.Inno.CheckLicense">
            <summary>
            라이선스 등록을 체크하여 등록되어 있지 않다면 라이선스 메시지 박스를 띄웁니다.
            </summary>
        </member>
        <member name="M:_INNO.Inno._IsAdministrator">
            <summary>
            관리자 권한으로 실행중인지 여부를 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._RunAsAdministrator(System.Boolean)">
            <summary>
            현재 프로세스를 관리자 권한으로 실행합니다. (기존 프로세스를 종료시키지 않습니다. 기존 프로세스는 _Terminiate()를 호출하여 종료합니다.)
            </summary>
        </member>
        <member name="M:_INNO.Inno._CheckLicense(System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            _INNO 라이선스 등록 여부를 확인합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._LicenseState">
            <summary>
            라이선스 상태를 나타냅니다.<br/>
            <code>
            디버깅 = [Debug Mode]
            등록됨 = [Registered]
            임시 3시간 = [임시(3:00:00)] - 남은시간표시
            임시 만료 = [Unregistered]
            </code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO.Inno._ShowLicenseMessageBox_Once(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <returns>신규로 생성된 경우에 true 반환.</returns>
        </member>
        <member name="M:_INNO.Inno._GetDeveloperCompanyName">
            <summary>
            개발사 (주)북스의 회사명을 가져옵니다.
            </summary>
            <returns>현재 프로젝트를 위해 내부적으로 고정된 (주)북스의 회사명</returns>
        </member>
        <member name="M:_INNO.Inno._GetDeveloperCompanyContact">
            <summary>
            개발사 (주)북스의 회사명을 가져옵니다.
            </summary>
            <returns>현재 프로젝트를 위해 내부적으로 고정된 (주)북스의 회사명</returns>
        </member>
        <member name="M:_INNO.Inno._GetProjectCompanyName">
            <summary>
            설비 프로젝트 회사명을 가져옵니다.
            </summary>
            <returns>설비 프로젝트 회사명</returns>
        </member>
        <member name="M:_INNO.Inno._SetProjectName(System.String)">
            <summary>
            프로젝트 명을 설정합니다.
            </summary>
            <param name="projectName">변경할 프로젝트 명</param>
        </member>
        <member name="M:_INNO.Inno._GetProjectName">
            <summary>
            프로젝트 명을 가져옵니다.
            </summary>
            <returns>프로젝트 명</returns>
        </member>
        <member name="T:_INNO._Math._InnoMath">
            <summary>
            InnoMath 클래스
            </summary>
        </member>
        <member name="P:_INNO._Math._InnoMath._Temperature._FahrenheitSymbol">
            <summary>
            화씨 기호인 °F를 나타냅니다.<br/><br/>
            [화씨] 물의 어는점을 32°F, 끓는점을 212°F로 정의하고 그 사이를 180등분합니다.<br/>
            사람의 체온은 98.6°F, 암모늄염 용액 온도 4°F입니다.<br/>
            화씨온도의 장점은 일상생활에서 쉽게 접할 수 있는 온도 범위에 적합하다는 것입니다.<br/>
            겨울철 추운 날씨가 대략 0°F≒−17.8°C에 가깝고, 여름철 매우 더운 날씨는 100°F≒37.8°C에 가깝습니다.<br/>
            더욱이 −17.8°C에서 37.8°C까지 약 56도 범위를 100단위로 나눴기 때문에 온도 조절이 매우 중요한 작물을 관리하는 데 유용합니다.<br/>
            화씨 사용 국가 : 미국, 미얀마, 라이베리아, 벨리즈, 팔라우, 미크로네시아 연방, 마셜 제도 등에 불과합니다.<br/>
            </summary>
        </member>
        <member name="P:_INNO._Math._InnoMath._Temperature._CelsiusSymbol">
            <summary>
            섭씨 기호인 °C를 나타냅니다.<br/><br/>
            어는점 0°C, 끓는점 100°C<br/>
            전 세계에서 가장 널리 쓰이는 온도 단위입니다.<br/>
            </summary>
        </member>
        <member name="M:_INNO._Math._InnoMath._Temperature._CelsiusToFahrenheit(System.Double)">
            <summary>
            섭씨를 화씨로 변환하여 반환합니다.
            </summary>
            <param name="celsius"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._Temperature._FahrenheitToCelsius(System.Double)">
            <summary>
            화씨를 섭씨로 변환하여 반환합니다.
            </summary>
            <param name="fahrenheit"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetRadianByDelta(System.Double,System.Double)">
            <summary>
            Delta에 의한 라디언트를 계산합니다.
            </summary>
            <param name="deltaX"></param>
            <param name="deltaY"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetDegreeByDelta(System.Double,System.Double)">
            <summary>
            Delta에 의한 각도를 계산합니다.
            </summary>
            <param name="deltaX"></param>
            <param name="deltaY"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._Rotate(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            라디언트 값으로 회전변환을 계산합니다.
            </summary>
            <param name="sourceX"></param>
            <param name="sourceY"></param>
            <param name="radian"></param>
            <param name="targetX"></param>
            <param name="targetY"></param>
            <param name="centerX"></param>
            <param name="centerY"></param>
        </member>
        <member name="M:_INNO._Math._InnoMath._RotateByDegree(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            각도 값으로 회전변환을 계산합니다.
            </summary>
            <param name="sourceX"></param>
            <param name="sourceY"></param>
            <param name="degree"></param>
            <param name="targetX"></param>
            <param name="targetY"></param>
            <param name="centerX"></param>
            <param name="centerY"></param>
        </member>
        <member name="T:_INNO._Math._InnoMath.PointD">
            <summary>
            PointD 구조체
            </summary>
        </member>
        <member name="F:_INNO._Math._InnoMath.PointD.X">
            <summary>
            PointD.X
            </summary>
        </member>
        <member name="F:_INNO._Math._InnoMath.PointD.Y">
            <summary>
            PointD.Y
            </summary>
        </member>
        <member name="M:_INNO._Math._InnoMath._Rotate(_INNO._Math._InnoMath.PointD,System.Double,_INNO._Math._InnoMath.PointD@,_INNO._Math._InnoMath.PointD)">
            <summary>
            라디언트 값으로 회전변환을 계산합니다.
            </summary>
            <param name="source"></param>
            <param name="radian"></param>
            <param name="target"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._RotateByDegree(_INNO._Math._InnoMath.PointD,System.Double,_INNO._Math._InnoMath.PointD@,_INNO._Math._InnoMath.PointD)">
            <summary>
            각도 값으로 회전변환을 계산합니다.
            </summary>
            <param name="source"></param>
            <param name="degree"></param>
            <param name="target"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._RadianToDegree(System.Double)">
            <summary>
            라디언트를 각도로 변환합니다.
            </summary>
            <param name="radian"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._DegreeToRadian(System.Double)">
            <summary>
            각도를 라디언트로 변환합니다.
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._VectorToDegree(System.Numerics.Vector2)">
            <summary>
            벡터를 각도로 변환합니다.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._VectorToRadian(System.Numerics.Vector2)">
            <summary>
            벡터를 라디언트로 변환합니다.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._Rotate(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            라디언트 값으로 회전변환을 계산합니다.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="radian"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:_INNO._Math._InnoMath._RotateByDegree(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            각도 값으로 회전변환을 계산합니다.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="degree"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetRandomInt(System.Int32,System.Int32)">
            <summary>
            랜덤 int 값을 생성합니다.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetRandomIntArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            랜덤 int 배열을 생성합니다.
            </summary>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetRandomIntArrayWithoutDuplicate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            랜덤 int 배열을 중복값 없이 생성합니다.
            </summary>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetRandomDouble(System.Double,System.Double)">
            <summary>
            랜덤 double 값을 생성합니다.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetRandomDoubleArray(System.Int32,System.Double,System.Double)">
            <summary>
            랜덤 double 배열을 생성합니다.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetRandomDoubleArrayWithoutDuplicate(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            랜덤 double 배열을 중복값 없이 생성합니다.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetAverage(System.Double[])">
            <summary>
            산술평균 : 모든 데이터의 평균을 계산합니다.
            단점 : 모든 데이터가 필요하며, 데이터가 많을 경우 계산이 느립니다.
            장점 : 계산이 쉽습니다.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetAverageFilter(System.Double,System.Double,System.Double)">
            <summary>
            평균필터 (실시간 데이터 평균) : 지속 추가되는 데이터의 누적 평균을 계산합니다.
            장점 : 모든 데이터를 가지지 않아도 되며, 데이터가 많아져도 계산이 빠릅니다.
            단점 : 많은 시간 많은 데이터가 누적되면 평균에 수렴하게 되어 평균 변화가 무색해질 수 있습니다.
            </summary>
            <param name="prevAvg"></param>
            <param name="newNumber"></param>
            <param name="listLength"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetMovingAverageFilter(System.Double[],System.Double,System.Double[]@,System.Int32)">
            <summary>
            이동평균필터 : 최근 평균 가중치를 주어 이동평균을 계산합니다.
            장점 : 시간에 따른 변화량 추이를 잘 따릅니다. 데이터 수가 많아지면 노이즈 제거 성능이 좋아집니다.
            단점 : 데이터가 많아지면 시간 지연이 발생합니다.
            </summary>
            <param name="srcData"></param>
            <param name="inputData"></param>
            <param name="outData"></param>
            <param name="filterSize">크기가 작으면 변화의 추이는 잘 반영하나 노이즈 제거 어렵고, 크기가 크면 변화 추이를 반영하기 어렵습니다. 휴리스틱하게 대상에 따른 실험치 반영이 필요합니다.</param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math._InnoMath._GetPercent(System.Int32,System.Int32)">
            <summary>
            전체값에서 일부값은 몇 퍼센트? 계산법 공식
            공식) 일부값 ÷ 전체값 X 100
            예제) 300에서 105는 몇퍼센트? 답: 35%
            </summary>
            <param name="value"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Math.InnoMathKilogram">
            <summary>
            InnoMathKilogram 클래스
            </summary>
        </member>
        <member name="M:_INNO._Math.InnoMathKilogram.#ctor(System.Double)">
            <summary>
            생성자
            </summary>
            <param name="mass"></param>
        </member>
        <member name="M:_INNO._Math.InnoMathKilogram.Equals(System.Object)">
            <summary>
            전달된 object가 InnoMathKilogram인지 여부를 확인합니다.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math.InnoMathKilogram.GetHashCode">
            <summary>
            인스턴스의 해시코드를 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math.InnoMathKilogram.op_Addition(_INNO._Math.InnoMathKilogram,_INNO._Math.InnoMathKilogram)">
            <summary>
            덧셈을 수행합니다.
            </summary>
            <param name="k1"></param>
            <param name="k2"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math.InnoMathKilogram.op_Subtraction(_INNO._Math.InnoMathKilogram,_INNO._Math.InnoMathKilogram)">
            <summary>
            뺄셈을 수행합니다.
            </summary>
            <param name="k1"></param>
            <param name="k2"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math.InnoMathKilogram.op_Equality(_INNO._Math.InnoMathKilogram,_INNO._Math.InnoMathKilogram)">
            <summary>
            값이 같은지 확인합니다.
            </summary>
            <param name="k1"></param>
            <param name="k2"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Math.InnoMathKilogram.op_Inequality(_INNO._Math.InnoMathKilogram,_INNO._Math.InnoMathKilogram)">
            <summary>
            값이 다른지 확인합니다.
            </summary>
            <param name="k1"></param>
            <param name="k2"></param>
            <returns></returns>
        </member>
        <member name="T:_INNO._Media.InnoMedia">
            <summary>
            InnoMedia 싱글턴 객체입니다. InnoMedia.Instance 를 사용하십시오.
            </summary>
        </member>
        <member name="M:_INNO._Media.InnoMedia.Beep">
            <summary>
            Beep 소리를 재생합니다.
            </summary>
        </member>
        <member name="T:_INNO._Media.InnoMediaPlayerList">
            <summary>
            InnoMediaPlayerList 클래스
            </summary>
        </member>
        <member name="P:_INNO._Media.InnoMediaPlayerList.Item(System.String)">
            <summary>
            MediaPlayer를 생성하거나 접근합니다.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:_INNO._Media.InnoMediaPlayerList.Add(System.String)">
            <summary>
            MediaPlayer를 추가합니다.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:_INNO.Properties.Resources">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources._INNO">
            <summary>
              _INNO™ is trademarked 2019 by (주)북스 BOOX, Inc. Innosoft Company.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources._주_북스">
            <summary>
              (주)북스™ is trademarked 2019 by (주)북스 BOOX, Inc. Innosoft Company.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.BOOX__Inc_">
            <summary>
              BOOX, Inc.™ is trademarked 2019 by (주)북스 BOOX, Inc. Innosoft Company.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.BOOX_Logo_Black">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.BOOX_Logo_Blue">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.BOOX_Logo_White">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.BooxBasicPattern">
            <summary>
              (아이콘)과(와) 유사한 System.Drawing.Icon 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.BooxColorPattern">
            <summary>
              (아이콘)과(와) 유사한 System.Drawing.Icon 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.InnoBasicPattern">
            <summary>
              (아이콘)과(와) 유사한 System.Drawing.Icon 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.InnoColorPattern">
            <summary>
              (아이콘)과(와) 유사한 System.Drawing.Icon 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.InnoMachine">
            <summary>
              InnoMachine™ is trademarked 2019 by (주)북스 BOOX, Inc. Innosoft Company.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.Innosoft">
            <summary>
              Innosoft™ is trademarked 2019 by (주)북스 BOOX, Inc. Innosoft Company.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:_INNO.Properties.Resources.Innosoft_Logo_200x62">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:Secile.Video.UsbCamera.Size">
            <summary>Usb camera image size.</summary>
        </member>
        <member name="P:Secile.Video.UsbCamera.Start">
            <summary>Start.</summary>
        </member>
        <member name="P:Secile.Video.UsbCamera.Stop">
            <summary>Stop.</summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.Release">
            <summary>Release resource.</summary>
        </member>
        <member name="P:Secile.Video.UsbCamera.GetBitmap">
            <summary>Get image.</summary>
            <remarks>Immediately after starting, fails because image buffer is not prepared yet.</remarks>
        </member>
        <member name="P:Secile.Video.UsbCamera.StillImageAvailable">
            <summary>
            camera support still image or not.
            some cameras can produce a still image and often higher quality than capture stream.
            </summary>
        </member>
        <member name="P:Secile.Video.UsbCamera.StillImageTrigger">
            <summary>trigger still image capture.</summary>
        </member>
        <member name="P:Secile.Video.UsbCamera.StillImageCaptured">
            <summary>called when still image captured by hardware button or software trigger.</summary>
            <remarks>called by worker thread.</remarks>
        </member>
        <member name="P:Secile.Video.UsbCamera.PreviewCaptured">
            <summary>
            called when preview image captured. there is a little difference in behavior between WPF and WinForms.
            in WPF, image is single instance and returns same reference for every call. image is updated internally in the library.
            the image can only be used to show preview with data binding. DO NOT USE for other purpose.
            in WinForms, returns different reference for every call.
            </summary>
            <remarks>called by worker thread. to maintain throughput on the capture pin, the preview pin drops frames as needed.</remarks>
        </member>
        <member name="M:Secile.Video.UsbCamera.SetPreviewControl(System.IntPtr,System.Drawing.Size)">
            <summary>Set preview on control. Call before starts.</summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.SetPreviewSize(System.Drawing.Size)">
            <summary>Set preview size.</summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.FindDevices">
            <summary>
            Get available USB camera list.
            </summary>
            <returns>Array of camera name, or if no device found, zero length array.</returns>
        </member>
        <member name="M:Secile.Video.UsbCamera.GetVideoFormat(System.Int32)">
            <summary>
            Get video formats.
            </summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.#ctor(System.Int32,System.Drawing.Size)">
            <summary>
            Create USB Camera. If device do not support the size, default size will applied.
            </summary>
            <param name="cameraIndex">Camera index in FindDevices() result.</param>
            <param name="size">
            Size you want to create. Normally use Size property of VideoFormat in GetVideoFormat() result.
            </param>
        </member>
        <member name="M:Secile.Video.UsbCamera.#ctor(System.Int32,Secile.Video.UsbCamera.VideoFormat)">
            <summary>
            Create USB Camera. If device do not support the format, default format will applied.
            </summary>
            <param name="cameraIndex">Camera index in FindDevices() result.</param>
            <param name="format">
            Normally use GetVideoFormat() result.
            You can change TimePerFrame value from Caps.MinFrameInterval to Caps.MaxFrameInterval.
            TimePerFrame = 10,000,000 / frame duration. (ex: 333333 in case 30fps).
            You can change Size value in case Caps.MaxOutputSize > Caps.MinOutputSize and OutputGranularityX/Y is not zero.
            Size = any value from Caps.MinOutputSize to Caps.MaxOutputSize step with OutputGranularityX/Y.
            </param>
        </member>
        <member name="P:Secile.Video.UsbCamera.Properties">
            <summary>Properties user can adjust.</summary>
        </member>
        <member name="F:Secile.Video.UsbCamera.PropertyItems.CameraControl">
            <summary>Camera Control properties.</summary>
        </member>
        <member name="F:Secile.Video.UsbCamera.PropertyItems.VideoProcAmp">
            <summary>Video Processing Amplifier properties.</summary>
        </member>
        <member name="P:Secile.Video.UsbCamera.PropertyItems.Item(Secile.Video.DirectShow.CameraControlProperty)">
            <summary>Get CameraControl Property. Check Available before use.</summary>
        </member>
        <member name="P:Secile.Video.UsbCamera.PropertyItems.Item(Secile.Video.DirectShow.VideoProcAmpProperty)">
            <summary>Get VideoProcAmp Property. Check Available before use.</summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.CreateSampleGrabber">
            <summary>
            サンプルグラバを作成する
            </summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.CreateVideoCaptureSource(System.Int32,Secile.Video.UsbCamera.VideoFormat)">
            <summary>
            Video Capture Sourceフィルタを作成する
            </summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.SetVideoOutputFormat(Secile.Video.DirectShow.IPin,Secile.Video.UsbCamera.VideoFormat)">
            <summary>
            ビデオキャプチャデバイスの出力形式を選択する。
            </summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.GetVideoOutputFormat(Secile.Video.DirectShow.IPin)">
            <summary>
            ビデオキャプチャデバイスがサポートするメディアタイプ・サイズを取得する。
            </summary>
        </member>
        <member name="M:Secile.Video.UsbCamera.SetVideoOutputFormat(Secile.Video.DirectShow.IPin,System.Int32,System.Drawing.Size,System.Int64)">
            <summary>
            ビデオキャプチャデバイスの出力形式を選択する。
            事前にGetVideoOutputFormatでメディアタイプ・サイズを得ておき、その中から希望のindexを指定する。
            同時に出力サイズとフレームレートを変更することができる。
            </summary>
            <param name="pin"></param>
            <param name="index">希望のindexを指定する</param>
            <param name="size">Empty以外を指定すると出力サイズを変更する。事前にVIDEO_STREAM_CONFIG_CAPSで取得した可能範囲内を指定すること。</param>
            <param name="timePerFrame">0以上を指定するとフレームレートを変更する。事前にVIDEO_STREAM_CONFIG_CAPSで取得した可能範囲内を指定すること。</param>
        </member>
        <member name="M:Secile.Video.DirectShow.CoCreateInstance(System.Guid)">
            <summary>COMオブジェクトのインスタンスを作成する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.ReleaseInstance``1(``0@)">
            <summary>COMオブジェクトのインスタンスを開放する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.CreateGraph">
            <summary>フィルタグラフを作成する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.PlayGraph(Secile.Video.DirectShow.IGraphBuilder,Secile.Video.DirectShow.FILTER_STATE)">
            <summary>フィルタグラフを再生・停止・一時停止する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.GetFiltes(System.Guid)">
            <summary>フィルタの一覧を取得する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.CreateFilter(System.Guid)">
            <summary>フィルタのインスタンスを作成する。CLSIDで指定する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.CreateFilter(System.Guid,System.Int32)">
            <summary>フィルタのインスタンスを作成する。CategoryとIndexで指定する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.EnumMonikers(System.Guid,System.Func{System.Runtime.InteropServices.ComTypes.IMoniker,Secile.Video.DirectShow.IPropertyBag,System.Boolean})">
            <summary>モニカを列挙する。</summary>
            <remarks>モニカとはCOMオブジェクトを識別する別名のこと。</remarks>
        </member>
        <member name="M:Secile.Video.DirectShow.FindPin(Secile.Video.DirectShow.IBaseFilter,System.String)">
            <summary>ピンを検索する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.FindPin(Secile.Video.DirectShow.IBaseFilter,System.Int32,Secile.Video.DirectShow.PIN_DIRECTION)">
            <summary>ピンを検索する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.FindPin(Secile.Video.DirectShow.IBaseFilter,System.Int32,Secile.Video.DirectShow.PIN_DIRECTION,System.Guid)">
            <summary>ピンを検索する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.EnumPins(Secile.Video.DirectShow.IBaseFilter,System.Func{Secile.Video.DirectShow.IPin,Secile.Video.DirectShow.PIN_INFO,System.Boolean})">
            <summary>Pinを列挙する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.ConnectFilter(Secile.Video.DirectShow.IGraphBuilder,Secile.Video.DirectShow.IBaseFilter,System.Int32,Secile.Video.DirectShow.IBaseFilter,System.Int32)">
            <summary>ピンを接続する。</summary>
        </member>
        <member name="M:Secile.Video.DirectShow.DeleteMediaType(Secile.Video.DirectShow.AM_MEDIA_TYPE@)">
            <summary>メディアタイプを開放する。</summary>
        </member>
        <member name="T:Secile.Video.DirectShow.IEnumFilters">
            <summary>
            フィルタ グラフ内のフィルタを列挙するインタフェース.
            </summary>
        </member>
        <member name="T:Secile.Video.DirectShow.IVideoWindow">
            <summary>
            ビデオ ウィンドウのプロパティを設定するメソッドを提供するインタフェース.
            </summary>
        </member>
        <member name="M:Secile.Video.DirectShow.DsGuid.GetNickname(System.Guid)">
            <summary>
            Guidをわかりやすい文字列で返す。
            MEDIATYPE_Videoなら[Video]を返す。PIN_CATEGORY_CAPTUREなら[CATEGORY_CAPTURE]を返す。
            </summary>
        </member>
    </members>
</doc>
